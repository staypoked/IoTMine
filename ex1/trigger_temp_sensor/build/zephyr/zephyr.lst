
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 0e 00 20 61 21 00 00 fb 55 00 00 35 21 00 00     ... a!...U..5!..
  10:	35 21 00 00 35 21 00 00 35 21 00 00 00 00 00 00     5!..5!..5!......
	...
  2c:	49 1e 00 00 35 21 00 00 00 00 00 00 f5 1d 00 00     I...5!..........
  3c:	e5 60 00 00                                         .`..

00000040 <_irq_vector_table>:
  40:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  50:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  60:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  70:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  80:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  90:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  a0:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  b0:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  c0:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00 f9 1e 00 00     ................
  d0:	f9 1e 00 00 f9 1e 00 00 f9 1e 00 00                 ............

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x72>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_FLASH_SIZE+0x12c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_FLASH_SIZE+0x13a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <__aeabi_dmul+0x1dc>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <__aeabi_dmul+0xb4>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <__aeabi_dmul+0xde>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <__aeabi_dmul+0x238>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <__aeabi_dmul+0x164>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <__aeabi_dmul+0x134>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <__aeabi_dmul+0x1c2>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <__aeabi_dmul+0x1a6>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1c6>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <__aeabi_dmul+0x206>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <__aeabi_dmul+0x19c>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <__aeabi_dmul+0x24a>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <__aeabi_dmul+0x222>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <__aeabi_dmul+0x24a>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <__aeabi_dmul+0x234>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <__aeabi_dmul+0x24a>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <__aeabi_dmul+0xde>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <__aeabi_dmul+0xde>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <__aeabi_dmul+0xde>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <__aeabi_dmul+0x24a>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <__aeabi_dmul+0x24a>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <__aeabi_dmul+0x234>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <__aeabi_dmul+0x24a>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <__aeabi_dmul+0x1f8>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <__aeabi_dmul+0x24a>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <__aeabi_dmul+0x19c>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <__aeabi_dmul+0x234>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <__aeabi_dmul+0x1f8>
     87a:	e712      	b.n	6a2 <__aeabi_dmul+0x24a>

0000087c <__aeabi_uldivmod>:
     87c:	b953      	cbnz	r3, 894 <__aeabi_uldivmod+0x18>
     87e:	b94a      	cbnz	r2, 894 <__aeabi_uldivmod+0x18>
     880:	2900      	cmp	r1, #0
     882:	bf08      	it	eq
     884:	2800      	cmpeq	r0, #0
     886:	bf1c      	itt	ne
     888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     88c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     890:	f000 b80c 	b.w	8ac <__aeabi_idiv0>
     894:	f1ad 0c08 	sub.w	ip, sp, #8
     898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     89c:	f000 f808 	bl	8b0 <__udivmoddi4>
     8a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8a8:	b004      	add	sp, #16
     8aa:	4770      	bx	lr

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <__udivmoddi4>:
     8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b4:	4607      	mov	r7, r0
     8b6:	468c      	mov	ip, r1
     8b8:	4608      	mov	r0, r1
     8ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
     8bc:	4615      	mov	r5, r2
     8be:	463c      	mov	r4, r7
     8c0:	4619      	mov	r1, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	f040 80c6 	bne.w	a54 <__udivmoddi4+0x1a4>
     8c8:	4282      	cmp	r2, r0
     8ca:	fab2 f782 	clz	r7, r2
     8ce:	d946      	bls.n	95e <__udivmoddi4+0xae>
     8d0:	b14f      	cbz	r7, 8e6 <__udivmoddi4+0x36>
     8d2:	f1c7 0e20 	rsb	lr, r7, #32
     8d6:	fa24 fe0e 	lsr.w	lr, r4, lr
     8da:	fa00 f307 	lsl.w	r3, r0, r7
     8de:	40bd      	lsls	r5, r7
     8e0:	ea4e 0c03 	orr.w	ip, lr, r3
     8e4:	40bc      	lsls	r4, r7
     8e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
     8ea:	fa1f fe85 	uxth.w	lr, r5
     8ee:	fbbc f9f8 	udiv	r9, ip, r8
     8f2:	0c22      	lsrs	r2, r4, #16
     8f4:	fb08 c319 	mls	r3, r8, r9, ip
     8f8:	fb09 fa0e 	mul.w	sl, r9, lr
     8fc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     900:	459a      	cmp	sl, r3
     902:	d928      	bls.n	956 <__udivmoddi4+0xa6>
     904:	18eb      	adds	r3, r5, r3
     906:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     90a:	d204      	bcs.n	916 <__udivmoddi4+0x66>
     90c:	459a      	cmp	sl, r3
     90e:	d902      	bls.n	916 <__udivmoddi4+0x66>
     910:	f1a9 0002 	sub.w	r0, r9, #2
     914:	442b      	add	r3, r5
     916:	eba3 030a 	sub.w	r3, r3, sl
     91a:	b2a4      	uxth	r4, r4
     91c:	fbb3 f2f8 	udiv	r2, r3, r8
     920:	fb08 3312 	mls	r3, r8, r2, r3
     924:	fb02 fe0e 	mul.w	lr, r2, lr
     928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     92c:	45a6      	cmp	lr, r4
     92e:	d914      	bls.n	95a <__udivmoddi4+0xaa>
     930:	192c      	adds	r4, r5, r4
     932:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     936:	d203      	bcs.n	940 <__udivmoddi4+0x90>
     938:	45a6      	cmp	lr, r4
     93a:	d901      	bls.n	940 <__udivmoddi4+0x90>
     93c:	1e93      	subs	r3, r2, #2
     93e:	442c      	add	r4, r5
     940:	eba4 040e 	sub.w	r4, r4, lr
     944:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     948:	b11e      	cbz	r6, 952 <__udivmoddi4+0xa2>
     94a:	40fc      	lsrs	r4, r7
     94c:	2300      	movs	r3, #0
     94e:	6034      	str	r4, [r6, #0]
     950:	6073      	str	r3, [r6, #4]
     952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     956:	4648      	mov	r0, r9
     958:	e7dd      	b.n	916 <__udivmoddi4+0x66>
     95a:	4613      	mov	r3, r2
     95c:	e7f0      	b.n	940 <__udivmoddi4+0x90>
     95e:	b902      	cbnz	r2, 962 <__udivmoddi4+0xb2>
     960:	deff      	udf	#255	; 0xff
     962:	bb87      	cbnz	r7, 9c6 <__udivmoddi4+0x116>
     964:	1a83      	subs	r3, r0, r2
     966:	2101      	movs	r1, #1
     968:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     96c:	b2aa      	uxth	r2, r5
     96e:	fbb3 fcfe 	udiv	ip, r3, lr
     972:	0c20      	lsrs	r0, r4, #16
     974:	fb0e 331c 	mls	r3, lr, ip, r3
     978:	fb0c f802 	mul.w	r8, ip, r2
     97c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     980:	4598      	cmp	r8, r3
     982:	d963      	bls.n	a4c <__udivmoddi4+0x19c>
     984:	18eb      	adds	r3, r5, r3
     986:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     98a:	d204      	bcs.n	996 <__udivmoddi4+0xe6>
     98c:	4598      	cmp	r8, r3
     98e:	d902      	bls.n	996 <__udivmoddi4+0xe6>
     990:	f1ac 0002 	sub.w	r0, ip, #2
     994:	442b      	add	r3, r5
     996:	eba3 0308 	sub.w	r3, r3, r8
     99a:	b2a4      	uxth	r4, r4
     99c:	fbb3 fcfe 	udiv	ip, r3, lr
     9a0:	fb0e 331c 	mls	r3, lr, ip, r3
     9a4:	fb0c f202 	mul.w	r2, ip, r2
     9a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9ac:	42a2      	cmp	r2, r4
     9ae:	d94f      	bls.n	a50 <__udivmoddi4+0x1a0>
     9b0:	192c      	adds	r4, r5, r4
     9b2:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     9b6:	d204      	bcs.n	9c2 <__udivmoddi4+0x112>
     9b8:	42a2      	cmp	r2, r4
     9ba:	d902      	bls.n	9c2 <__udivmoddi4+0x112>
     9bc:	f1ac 0302 	sub.w	r3, ip, #2
     9c0:	442c      	add	r4, r5
     9c2:	1aa4      	subs	r4, r4, r2
     9c4:	e7be      	b.n	944 <__udivmoddi4+0x94>
     9c6:	f1c7 0c20 	rsb	ip, r7, #32
     9ca:	fa20 f80c 	lsr.w	r8, r0, ip
     9ce:	fa00 f307 	lsl.w	r3, r0, r7
     9d2:	fa24 fc0c 	lsr.w	ip, r4, ip
     9d6:	40bd      	lsls	r5, r7
     9d8:	ea4c 0203 	orr.w	r2, ip, r3
     9dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     9e0:	b2ab      	uxth	r3, r5
     9e2:	fbb8 fcfe 	udiv	ip, r8, lr
     9e6:	0c11      	lsrs	r1, r2, #16
     9e8:	fb0e 801c 	mls	r0, lr, ip, r8
     9ec:	fb0c f903 	mul.w	r9, ip, r3
     9f0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     9f4:	4581      	cmp	r9, r0
     9f6:	fa04 f407 	lsl.w	r4, r4, r7
     9fa:	d923      	bls.n	a44 <__udivmoddi4+0x194>
     9fc:	1828      	adds	r0, r5, r0
     9fe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     a02:	d204      	bcs.n	a0e <__udivmoddi4+0x15e>
     a04:	4581      	cmp	r9, r0
     a06:	d902      	bls.n	a0e <__udivmoddi4+0x15e>
     a08:	f1ac 0102 	sub.w	r1, ip, #2
     a0c:	4428      	add	r0, r5
     a0e:	eba0 0009 	sub.w	r0, r0, r9
     a12:	b292      	uxth	r2, r2
     a14:	fbb0 fcfe 	udiv	ip, r0, lr
     a18:	fb0e 001c 	mls	r0, lr, ip, r0
     a1c:	fb0c f803 	mul.w	r8, ip, r3
     a20:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     a24:	4598      	cmp	r8, r3
     a26:	d90f      	bls.n	a48 <__udivmoddi4+0x198>
     a28:	18eb      	adds	r3, r5, r3
     a2a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     a2e:	d204      	bcs.n	a3a <__udivmoddi4+0x18a>
     a30:	4598      	cmp	r8, r3
     a32:	d902      	bls.n	a3a <__udivmoddi4+0x18a>
     a34:	f1ac 0202 	sub.w	r2, ip, #2
     a38:	442b      	add	r3, r5
     a3a:	eba3 0308 	sub.w	r3, r3, r8
     a3e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     a42:	e791      	b.n	968 <__udivmoddi4+0xb8>
     a44:	4661      	mov	r1, ip
     a46:	e7e2      	b.n	a0e <__udivmoddi4+0x15e>
     a48:	4662      	mov	r2, ip
     a4a:	e7f6      	b.n	a3a <__udivmoddi4+0x18a>
     a4c:	4660      	mov	r0, ip
     a4e:	e7a2      	b.n	996 <__udivmoddi4+0xe6>
     a50:	4663      	mov	r3, ip
     a52:	e7b6      	b.n	9c2 <__udivmoddi4+0x112>
     a54:	4283      	cmp	r3, r0
     a56:	d905      	bls.n	a64 <__udivmoddi4+0x1b4>
     a58:	b10e      	cbz	r6, a5e <__udivmoddi4+0x1ae>
     a5a:	e9c6 7000 	strd	r7, r0, [r6]
     a5e:	2100      	movs	r1, #0
     a60:	4608      	mov	r0, r1
     a62:	e776      	b.n	952 <__udivmoddi4+0xa2>
     a64:	fab3 f183 	clz	r1, r3
     a68:	b981      	cbnz	r1, a8c <__udivmoddi4+0x1dc>
     a6a:	4283      	cmp	r3, r0
     a6c:	d301      	bcc.n	a72 <__udivmoddi4+0x1c2>
     a6e:	42ba      	cmp	r2, r7
     a70:	d80a      	bhi.n	a88 <__udivmoddi4+0x1d8>
     a72:	1abc      	subs	r4, r7, r2
     a74:	eb60 0303 	sbc.w	r3, r0, r3
     a78:	2001      	movs	r0, #1
     a7a:	469c      	mov	ip, r3
     a7c:	2e00      	cmp	r6, #0
     a7e:	d068      	beq.n	b52 <__udivmoddi4+0x2a2>
     a80:	e9c6 4c00 	strd	r4, ip, [r6]
     a84:	2100      	movs	r1, #0
     a86:	e764      	b.n	952 <__udivmoddi4+0xa2>
     a88:	4608      	mov	r0, r1
     a8a:	e7f7      	b.n	a7c <__udivmoddi4+0x1cc>
     a8c:	f1c1 0c20 	rsb	ip, r1, #32
     a90:	408b      	lsls	r3, r1
     a92:	fa22 f40c 	lsr.w	r4, r2, ip
     a96:	431c      	orrs	r4, r3
     a98:	fa02 f501 	lsl.w	r5, r2, r1
     a9c:	fa00 f301 	lsl.w	r3, r0, r1
     aa0:	fa27 f20c 	lsr.w	r2, r7, ip
     aa4:	fa20 fb0c 	lsr.w	fp, r0, ip
     aa8:	ea4f 4914 	mov.w	r9, r4, lsr #16
     aac:	4313      	orrs	r3, r2
     aae:	fbbb f8f9 	udiv	r8, fp, r9
     ab2:	fa1f fe84 	uxth.w	lr, r4
     ab6:	fb09 bb18 	mls	fp, r9, r8, fp
     aba:	0c1a      	lsrs	r2, r3, #16
     abc:	fb08 fa0e 	mul.w	sl, r8, lr
     ac0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     ac4:	4592      	cmp	sl, r2
     ac6:	fa07 f701 	lsl.w	r7, r7, r1
     aca:	d93e      	bls.n	b4a <__udivmoddi4+0x29a>
     acc:	18a2      	adds	r2, r4, r2
     ace:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     ad2:	d204      	bcs.n	ade <__udivmoddi4+0x22e>
     ad4:	4592      	cmp	sl, r2
     ad6:	d902      	bls.n	ade <__udivmoddi4+0x22e>
     ad8:	f1a8 0002 	sub.w	r0, r8, #2
     adc:	4422      	add	r2, r4
     ade:	eba2 020a 	sub.w	r2, r2, sl
     ae2:	b29b      	uxth	r3, r3
     ae4:	fbb2 f8f9 	udiv	r8, r2, r9
     ae8:	fb09 2218 	mls	r2, r9, r8, r2
     aec:	fb08 fe0e 	mul.w	lr, r8, lr
     af0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     af4:	4596      	cmp	lr, r2
     af6:	d92a      	bls.n	b4e <__udivmoddi4+0x29e>
     af8:	18a2      	adds	r2, r4, r2
     afa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     afe:	d204      	bcs.n	b0a <__udivmoddi4+0x25a>
     b00:	4596      	cmp	lr, r2
     b02:	d902      	bls.n	b0a <__udivmoddi4+0x25a>
     b04:	f1a8 0302 	sub.w	r3, r8, #2
     b08:	4422      	add	r2, r4
     b0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b0e:	fba0 9305 	umull	r9, r3, r0, r5
     b12:	eba2 020e 	sub.w	r2, r2, lr
     b16:	429a      	cmp	r2, r3
     b18:	46ce      	mov	lr, r9
     b1a:	4698      	mov	r8, r3
     b1c:	d302      	bcc.n	b24 <__udivmoddi4+0x274>
     b1e:	d106      	bne.n	b2e <__udivmoddi4+0x27e>
     b20:	454f      	cmp	r7, r9
     b22:	d204      	bcs.n	b2e <__udivmoddi4+0x27e>
     b24:	ebb9 0e05 	subs.w	lr, r9, r5
     b28:	eb63 0804 	sbc.w	r8, r3, r4
     b2c:	3801      	subs	r0, #1
     b2e:	b186      	cbz	r6, b52 <__udivmoddi4+0x2a2>
     b30:	ebb7 030e 	subs.w	r3, r7, lr
     b34:	eb62 0708 	sbc.w	r7, r2, r8
     b38:	fa07 fc0c 	lsl.w	ip, r7, ip
     b3c:	40cb      	lsrs	r3, r1
     b3e:	ea4c 0303 	orr.w	r3, ip, r3
     b42:	40cf      	lsrs	r7, r1
     b44:	e9c6 3700 	strd	r3, r7, [r6]
     b48:	e79c      	b.n	a84 <__udivmoddi4+0x1d4>
     b4a:	4640      	mov	r0, r8
     b4c:	e7c7      	b.n	ade <__udivmoddi4+0x22e>
     b4e:	4643      	mov	r3, r8
     b50:	e7db      	b.n	b0a <__udivmoddi4+0x25a>
     b52:	4631      	mov	r1, r6
     b54:	e6fd      	b.n	952 <__udivmoddi4+0xa2>
	...

00000b58 <main>:
  }

  printk("Temperature: %f \n",  sensor_value_to_double(&temp_value));
}

void main() {
     b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  printk("Starting main.\n");
     b5c:	4844      	ldr	r0, [pc, #272]	; (c70 <main+0x118>)
void main() {
     b5e:	b085      	sub	sp, #20
  printk("Starting main.\n");
     b60:	f004 fb9d 	bl	529e <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     b64:	4843      	ldr	r0, [pc, #268]	; (c74 <main+0x11c>)
     b66:	f003 fb85 	bl	4274 <z_impl_device_get_binding>
  const struct device* sensor_device = device_get_binding(DT_LABEL(MY_TEMPERATURE));
#else
#error "Node is disabled"
#endif

  if (sensor_device == NULL) {
     b6a:	4604      	mov	r4, r0
     b6c:	b928      	cbnz	r0, b7a <main+0x22>
    /* No such node, or the node does not have status "okay". */
    printk("\nError: no device found.\n");
     b6e:	4842      	ldr	r0, [pc, #264]	; (c78 <main+0x120>)
    get_sample(sensor_device);
    k_msleep(1000);
  }

  return;
     b70:	b005      	add	sp, #20
     b72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printk("\nError: no device found.\n");
     b76:	f004 bb92 	b.w	529e <printk>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     b7a:	f005 fb5b 	bl	6234 <z_device_ready>
  printk("Found device \"%s\", getting sensor data\n", sensor_device->name);
     b7e:	6821      	ldr	r1, [r4, #0]
     b80:	b178      	cbz	r0, ba2 <main+0x4a>
     b82:	483e      	ldr	r0, [pc, #248]	; (c7c <main+0x124>)
     b84:	f004 fb8b 	bl	529e <printk>
  struct sensor_value attr = {
     b88:	221b      	movs	r2, #27
     b8a:	2300      	movs	r3, #0
    printk("HTS221 trigger is enabled and will be set to specified upper threshold.");
     b8c:	483c      	ldr	r0, [pc, #240]	; (c80 <main+0x128>)
  struct sensor_value attr = {
     b8e:	e9cd 2300 	strd	r2, r3, [sp]
    printk("HTS221 trigger is enabled and will be set to specified upper threshold.");
     b92:	f004 fb84 	bl	529e <printk>
					 const struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	if (api->attr_set == NULL) {
     b96:	68a3      	ldr	r3, [r4, #8]
     b98:	681d      	ldr	r5, [r3, #0]
     b9a:	b945      	cbnz	r5, bae <main+0x56>
		return -ENOSYS;
     b9c:	f06f 0157 	mvn.w	r1, #87	; 0x57
     ba0:	e00c      	b.n	bbc <main+0x64>
    printk("\nError: Device \"%s\" is not ready; "
     ba2:	4838      	ldr	r0, [pc, #224]	; (c84 <main+0x12c>)
     ba4:	b005      	add	sp, #20
     ba6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printk("\nError: Device \"%s\" is not ready; "
     baa:	f004 bb78 	b.w	529e <printk>
	}

	return api->attr_set(dev, chan, attr, val);
     bae:	210d      	movs	r1, #13
     bb0:	466b      	mov	r3, sp
     bb2:	2202      	movs	r2, #2
     bb4:	4620      	mov	r0, r4
     bb6:	47a8      	blx	r5
    if (ret < 0) {
     bb8:	1e01      	subs	r1, r0, #0
     bba:	da05      	bge.n	bc8 <main+0x70>
      printk("Could not set threshold ass error occured:\"%d\" \n", ret);
     bbc:	4832      	ldr	r0, [pc, #200]	; (c88 <main+0x130>)
     bbe:	f004 fb6e 	bl	529e <printk>
     bc2:	b005      	add	sp, #20
     bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct sensor_trigger trig = {
     bc8:	2304      	movs	r3, #4
     bca:	f8ad 3008 	strh.w	r3, [sp, #8]
     bce:	230d      	movs	r3, #13
     bd0:	f8ad 300a 	strh.w	r3, [sp, #10]
				     sensor_trigger_handler_t handler)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	if (api->trigger_set == NULL) {
     bd4:	68a3      	ldr	r3, [r4, #8]
     bd6:	689b      	ldr	r3, [r3, #8]
     bd8:	b91b      	cbnz	r3, be2 <main+0x8a>
      printk("Could not set trigger\n");
     bda:	482c      	ldr	r0, [pc, #176]	; (c8c <main+0x134>)
     bdc:	f004 fb5f 	bl	529e <printk>
      return;
     be0:	e7ef      	b.n	bc2 <main+0x6a>
		return -ENOSYS;
	}

	return api->trigger_set(dev, trig, handler);
     be2:	4a2b      	ldr	r2, [pc, #172]	; (c90 <main+0x138>)
     be4:	a902      	add	r1, sp, #8
     be6:	4620      	mov	r0, r4
     be8:	4798      	blx	r3
    if (sensor_trigger_set(sensor_device, &trig, trigger_handler)) {
     bea:	2800      	cmp	r0, #0
     bec:	d1f5      	bne.n	bda <main+0x82>
  printk("Trigger set with upper threshold of: \"%d\".\"%d\" ", attr.val1, attr.val2);
     bee:	e9dd 1200 	ldrd	r1, r2, [sp]
     bf2:	4828      	ldr	r0, [pc, #160]	; (c94 <main+0x13c>)
    printk("Error when sampling sensor (err: %d)", err);
     bf4:	4d28      	ldr	r5, [pc, #160]	; (c98 <main+0x140>)
  printk("Trigger set with upper threshold of: \"%d\".\"%d\" ", attr.val1, attr.val2);
     bf6:	f004 fb52 	bl	529e <printk>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     bfa:	a71b      	add	r7, pc, #108	; (adr r7, c68 <main+0x110>)
     bfc:	e9d7 6700 	ldrd	r6, r7, [r7]
	return api->sample_fetch(dev, type);
     c00:	68a3      	ldr	r3, [r4, #8]
     c02:	210d      	movs	r1, #13
     c04:	68db      	ldr	r3, [r3, #12]
     c06:	4620      	mov	r0, r4
     c08:	4798      	blx	r3
  if(err){
     c0a:	4601      	mov	r1, r0
     c0c:	b110      	cbz	r0, c14 <main+0xbc>
    printk("Error when sampling sensor (err: %d)", err);
     c0e:	4628      	mov	r0, r5
     c10:	f004 fb45 	bl	529e <printk>
	return api->channel_get(dev, chan, val);
     c14:	68a3      	ldr	r3, [r4, #8]
     c16:	210d      	movs	r1, #13
     c18:	691b      	ldr	r3, [r3, #16]
     c1a:	aa02      	add	r2, sp, #8
     c1c:	4620      	mov	r0, r4
     c1e:	4798      	blx	r3
  if(err){
     c20:	4601      	mov	r1, r0
     c22:	b110      	cbz	r0, c2a <main+0xd2>
    printk("Error obtaining sensor value (err: %d)", err);
     c24:	481d      	ldr	r0, [pc, #116]	; (c9c <main+0x144>)
     c26:	f004 fb3a 	bl	529e <printk>
	return (double)val->val1 + (double)val->val2 / 1000000;
     c2a:	9803      	ldr	r0, [sp, #12]
     c2c:	f7ff fbaa 	bl	384 <__aeabi_i2d>
     c30:	4632      	mov	r2, r6
     c32:	463b      	mov	r3, r7
     c34:	f7ff fd3a 	bl	6ac <__aeabi_ddiv>
     c38:	4680      	mov	r8, r0
     c3a:	9802      	ldr	r0, [sp, #8]
     c3c:	4689      	mov	r9, r1
     c3e:	f7ff fba1 	bl	384 <__aeabi_i2d>
     c42:	4602      	mov	r2, r0
     c44:	460b      	mov	r3, r1
     c46:	4640      	mov	r0, r8
     c48:	4649      	mov	r1, r9
     c4a:	f7ff fa4f 	bl	ec <__adddf3>
     c4e:	4602      	mov	r2, r0
     c50:	460b      	mov	r3, r1
  printk("Temperature: %f \n",  sensor_value_to_double(&temp_value));
     c52:	4813      	ldr	r0, [pc, #76]	; (ca0 <main+0x148>)
     c54:	f004 fb23 	bl	529e <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     c58:	2100      	movs	r1, #0
     c5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     c5e:	f004 f8ef 	bl	4e40 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     c62:	e7cd      	b.n	c00 <main+0xa8>
     c64:	f3af 8000 	nop.w
     c68:	00000000 	.word	0x00000000
     c6c:	412e8480 	.word	0x412e8480
     c70:	00006b82 	.word	0x00006b82
     c74:	00006b92 	.word	0x00006b92
     c78:	00006b99 	.word	0x00006b99
     c7c:	00006bb3 	.word	0x00006bb3
     c80:	00006bdb 	.word	0x00006bdb
     c84:	00006c23 	.word	0x00006c23
     c88:	00006c77 	.word	0x00006c77
     c8c:	00006ca8 	.word	0x00006ca8
     c90:	00000ca5 	.word	0x00000ca5
     c94:	00006cbf 	.word	0x00006cbf
     c98:	00006cef 	.word	0x00006cef
     c9c:	00006d14 	.word	0x00006d14
     ca0:	00006d3b 	.word	0x00006d3b

00000ca4 <trigger_handler>:
  printk("The room is getting to hot, please cool down.");
     ca4:	4801      	ldr	r0, [pc, #4]	; (cac <trigger_handler+0x8>)
     ca6:	f004 bafa 	b.w	529e <printk>
     caa:	bf00      	nop
     cac:	00006b54 	.word	0x00006b54

00000cb0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     cb0:	680b      	ldr	r3, [r1, #0]
     cb2:	3301      	adds	r3, #1
     cb4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     cb6:	4b01      	ldr	r3, [pc, #4]	; (cbc <char_out+0xc>)
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	4718      	bx	r3
     cbc:	20000000 	.word	0x20000000

00000cc0 <__printk_hook_install>:
	_char_out = fn;
     cc0:	4b01      	ldr	r3, [pc, #4]	; (cc8 <__printk_hook_install+0x8>)
     cc2:	6018      	str	r0, [r3, #0]
}
     cc4:	4770      	bx	lr
     cc6:	bf00      	nop
     cc8:	20000000 	.word	0x20000000

00000ccc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     ccc:	b507      	push	{r0, r1, r2, lr}
     cce:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     cd0:	2100      	movs	r1, #0
{
     cd2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     cd4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     cd6:	4803      	ldr	r0, [pc, #12]	; (ce4 <vprintk+0x18>)
     cd8:	a901      	add	r1, sp, #4
     cda:	f000 f8e5 	bl	ea8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     cde:	b003      	add	sp, #12
     ce0:	f85d fb04 	ldr.w	pc, [sp], #4
     ce4:	00000cb1 	.word	0x00000cb1

00000ce8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cec:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cf0:	f019 0808 	ands.w	r8, r9, #8
{
     cf4:	4604      	mov	r4, r0
     cf6:	4693      	mov	fp, r2
	if (processing) {
     cf8:	d00d      	beq.n	d16 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     cfa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     cfc:	bf0c      	ite	eq
     cfe:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d02:	f049 0920 	orrne.w	r9, r9, #32
     d06:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d0a:	f38b 8811 	msr	BASEPRI, fp
     d0e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d16:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     d1a:	2902      	cmp	r1, #2
     d1c:	d107      	bne.n	d2e <process_event+0x46>
			evt = process_recheck(mgr);
     d1e:	4620      	mov	r0, r4
     d20:	f004 faca 	bl	52b8 <process_recheck>
		if (evt == EVT_NOP) {
     d24:	2800      	cmp	r0, #0
     d26:	d0f0      	beq.n	d0a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     d28:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d2a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     d2c:	d14e      	bne.n	dcc <process_event+0xe4>
			res = mgr->last_res;
     d2e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d30:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d32:	2f00      	cmp	r7, #0
     d34:	da15      	bge.n	d62 <process_event+0x7a>
		*clients = mgr->clients;
     d36:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d38:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     d3c:	e9c4 8800 	strd	r8, r8, [r4]
     d40:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d44:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     d46:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d48:	8b21      	ldrh	r1, [r4, #24]
     d4a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d4e:	45ca      	cmp	sl, r9
     d50:	d002      	beq.n	d58 <process_event+0x70>
		if (do_monitors
     d52:	68a3      	ldr	r3, [r4, #8]
     d54:	2b00      	cmp	r3, #0
     d56:	d15a      	bne.n	e0e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     d58:	b90d      	cbnz	r5, d5e <process_event+0x76>
		    || (transit != NULL)) {
     d5a:	2e00      	cmp	r6, #0
     d5c:	d071      	beq.n	e42 <process_event+0x15a>
     d5e:	2300      	movs	r3, #0
     d60:	e056      	b.n	e10 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d62:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d66:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d68:	2a01      	cmp	r2, #1
     d6a:	d81e      	bhi.n	daa <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d6c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d70:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d72:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d74:	b289      	uxth	r1, r1
     d76:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d7a:	d10a      	bne.n	d92 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d7c:	b13d      	cbz	r5, d8e <process_event+0xa6>
     d7e:	8b63      	ldrh	r3, [r4, #26]
     d80:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     d82:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     d84:	3301      	adds	r3, #1
     d86:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d88:	2a00      	cmp	r2, #0
     d8a:	d1fa      	bne.n	d82 <process_event+0x9a>
     d8c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d8e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     d92:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d94:	4620      	mov	r0, r4
     d96:	f004 fa8f 	bl	52b8 <process_recheck>
     d9a:	4606      	mov	r6, r0
     d9c:	2800      	cmp	r0, #0
     d9e:	d0d3      	beq.n	d48 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     da0:	8b23      	ldrh	r3, [r4, #24]
     da2:	f043 0320 	orr.w	r3, r3, #32
     da6:	8323      	strh	r3, [r4, #24]
     da8:	e7cd      	b.n	d46 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     daa:	2b04      	cmp	r3, #4
     dac:	d10c      	bne.n	dc8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dae:	f021 0107 	bic.w	r1, r1, #7
     db2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     db4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     db6:	4620      	mov	r0, r4
     db8:	f004 fa7e 	bl	52b8 <process_recheck>
     dbc:	4605      	mov	r5, r0
     dbe:	2800      	cmp	r0, #0
     dc0:	d0c1      	beq.n	d46 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dc2:	f041 0120 	orr.w	r1, r1, #32
     dc6:	8321      	strh	r1, [r4, #24]
     dc8:	2500      	movs	r5, #0
     dca:	e7bc      	b.n	d46 <process_event+0x5e>
		} else if (evt == EVT_START) {
     dcc:	2803      	cmp	r0, #3
     dce:	d109      	bne.n	de4 <process_event+0xfc>
			transit = mgr->transitions->start;
     dd0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dd2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     dd6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dd8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     ddc:	8323      	strh	r3, [r4, #24]
}
     dde:	2500      	movs	r5, #0
		res = 0;
     de0:	462f      	mov	r7, r5
     de2:	e7b1      	b.n	d48 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     de4:	2804      	cmp	r0, #4
     de6:	d106      	bne.n	df6 <process_event+0x10e>
			transit = mgr->transitions->stop;
     de8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dea:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     dee:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     df0:	f043 0304 	orr.w	r3, r3, #4
     df4:	e7f2      	b.n	ddc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     df6:	2805      	cmp	r0, #5
     df8:	d106      	bne.n	e08 <process_event+0x120>
			transit = mgr->transitions->reset;
     dfa:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dfc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     e00:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e02:	f043 0305 	orr.w	r3, r3, #5
     e06:	e7e9      	b.n	ddc <process_event+0xf4>
     e08:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     e0a:	462e      	mov	r6, r5
     e0c:	e7e8      	b.n	de0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     e0e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e10:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e14:	8321      	strh	r1, [r4, #24]
     e16:	f38b 8811 	msr	BASEPRI, fp
     e1a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e1e:	b9fb      	cbnz	r3, e60 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     e20:	bb85      	cbnz	r5, e84 <process_event+0x19c>
			if (transit != NULL) {
     e22:	b116      	cbz	r6, e2a <process_event+0x142>
				transit(mgr, transition_complete);
     e24:	491f      	ldr	r1, [pc, #124]	; (ea4 <process_event+0x1bc>)
     e26:	4620      	mov	r0, r4
     e28:	47b0      	blx	r6
	__asm__ volatile(
     e2a:	f04f 0320 	mov.w	r3, #32
     e2e:	f3ef 8b11 	mrs	fp, BASEPRI
     e32:	f383 8812 	msr	BASEPRI_MAX, r3
     e36:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e3a:	8b23      	ldrh	r3, [r4, #24]
     e3c:	f023 0308 	bic.w	r3, r3, #8
     e40:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e42:	8b23      	ldrh	r3, [r4, #24]
     e44:	06da      	lsls	r2, r3, #27
     e46:	d525      	bpl.n	e94 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e48:	f023 0310 	bic.w	r3, r3, #16
     e4c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     e4e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e50:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     e54:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     e58:	2900      	cmp	r1, #0
     e5a:	f47f af5e 	bne.w	d1a <process_event+0x32>
out:
     e5e:	e754      	b.n	d0a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     e60:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e62:	2900      	cmp	r1, #0
     e64:	d0dc      	beq.n	e20 <process_event+0x138>
	return node->next;
     e66:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     e6a:	f8d1 b004 	ldr.w	fp, [r1, #4]
     e6e:	463b      	mov	r3, r7
     e70:	4652      	mov	r2, sl
     e72:	4620      	mov	r0, r4
     e74:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e76:	f1b9 0f00 	cmp.w	r9, #0
     e7a:	d0d1      	beq.n	e20 <process_event+0x138>
     e7c:	4649      	mov	r1, r9
     e7e:	f8d9 9000 	ldr.w	r9, [r9]
     e82:	e7f2      	b.n	e6a <process_event+0x182>
     e84:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     e86:	463b      	mov	r3, r7
     e88:	4652      	mov	r2, sl
     e8a:	4620      	mov	r0, r4
     e8c:	682d      	ldr	r5, [r5, #0]
     e8e:	f004 fa2f 	bl	52f0 <notify_one>
     e92:	e7c5      	b.n	e20 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     e94:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e98:	bf1e      	ittt	ne
     e9a:	f023 0320 	bicne.w	r3, r3, #32
     e9e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     ea0:	2102      	movne	r1, #2
     ea2:	e7d5      	b.n	e50 <process_event+0x168>
     ea4:	0000531d 	.word	0x0000531d

00000ea8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eac:	4681      	mov	r9, r0
     eae:	b09b      	sub	sp, #108	; 0x6c
     eb0:	468a      	mov	sl, r1
     eb2:	4615      	mov	r5, r2
     eb4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     eb6:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     eb8:	7828      	ldrb	r0, [r5, #0]
     eba:	b910      	cbnz	r0, ec2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     ebc:	4630      	mov	r0, r6
     ebe:	f000 bdee 	b.w	1a9e <cbvprintf+0xbf6>
			OUTC(*fp++);
     ec2:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
     ec4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     ec6:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     ec8:	d006      	beq.n	ed8 <cbvprintf+0x30>
			OUTC(*fp++);
     eca:	4651      	mov	r1, sl
			OUTC('%');
     ecc:	47c8      	blx	r9
     ece:	2800      	cmp	r0, #0
     ed0:	f2c0 85e5 	blt.w	1a9e <cbvprintf+0xbf6>
     ed4:	3601      	adds	r6, #1
		if (bps == NULL) {
     ed6:	e24c      	b.n	1372 <cbvprintf+0x4ca>
		} state = {
     ed8:	2218      	movs	r2, #24
     eda:	2100      	movs	r1, #0
     edc:	a80c      	add	r0, sp, #48	; 0x30
     ede:	f004 fbc4 	bl	566a <memset>
	if (*sp == '%') {
     ee2:	786b      	ldrb	r3, [r5, #1]
     ee4:	2b25      	cmp	r3, #37	; 0x25
     ee6:	d07c      	beq.n	fe2 <cbvprintf+0x13a>
     ee8:	2200      	movs	r2, #0
     eea:	1c68      	adds	r0, r5, #1
     eec:	4696      	mov	lr, r2
     eee:	4690      	mov	r8, r2
     ef0:	4694      	mov	ip, r2
     ef2:	4617      	mov	r7, r2
     ef4:	4601      	mov	r1, r0
		switch (*sp) {
     ef6:	f810 3b01 	ldrb.w	r3, [r0], #1
     efa:	2b2b      	cmp	r3, #43	; 0x2b
     efc:	f000 80a0 	beq.w	1040 <cbvprintf+0x198>
     f00:	f200 8097 	bhi.w	1032 <cbvprintf+0x18a>
     f04:	2b20      	cmp	r3, #32
     f06:	f000 809e 	beq.w	1046 <cbvprintf+0x19e>
     f0a:	2b23      	cmp	r3, #35	; 0x23
     f0c:	f000 809e 	beq.w	104c <cbvprintf+0x1a4>
     f10:	b12f      	cbz	r7, f1e <cbvprintf+0x76>
     f12:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     f16:	f040 0004 	orr.w	r0, r0, #4
     f1a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     f1e:	f1bc 0f00 	cmp.w	ip, #0
     f22:	d005      	beq.n	f30 <cbvprintf+0x88>
     f24:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     f28:	f040 0008 	orr.w	r0, r0, #8
     f2c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     f30:	f1b8 0f00 	cmp.w	r8, #0
     f34:	d005      	beq.n	f42 <cbvprintf+0x9a>
     f36:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     f3a:	f040 0010 	orr.w	r0, r0, #16
     f3e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     f42:	f1be 0f00 	cmp.w	lr, #0
     f46:	d005      	beq.n	f54 <cbvprintf+0xac>
     f48:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     f4c:	f040 0020 	orr.w	r0, r0, #32
     f50:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     f54:	b12a      	cbz	r2, f62 <cbvprintf+0xba>
     f56:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f5e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
     f62:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     f66:	f002 0044 	and.w	r0, r2, #68	; 0x44
     f6a:	2844      	cmp	r0, #68	; 0x44
     f6c:	d103      	bne.n	f76 <cbvprintf+0xce>
		conv->flag_zero = false;
     f6e:	f36f 1286 	bfc	r2, #6, #1
     f72:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
     f76:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
     f7a:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     f80:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
     f84:	d17e      	bne.n	1084 <cbvprintf+0x1dc>
		conv->width_star = true;
     f86:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     f8a:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     f8e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     f90:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
     f94:	781a      	ldrb	r2, [r3, #0]
     f96:	2a2e      	cmp	r2, #46	; 0x2e
     f98:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     f9c:	bf0c      	ite	eq
     f9e:	2101      	moveq	r1, #1
     fa0:	2100      	movne	r1, #0
     fa2:	f361 0241 	bfi	r2, r1, #1, #1
     fa6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
     faa:	d177      	bne.n	109c <cbvprintf+0x1f4>
	if (*sp == '*') {
     fac:	785a      	ldrb	r2, [r3, #1]
     fae:	2a2a      	cmp	r2, #42	; 0x2a
     fb0:	d06d      	beq.n	108e <cbvprintf+0x1e6>
	++sp;
     fb2:	3301      	adds	r3, #1
	size_t val = 0;
     fb4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     fb6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     fba:	4618      	mov	r0, r3
     fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
     fc0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fc4:	2f09      	cmp	r7, #9
     fc6:	f240 80ab 	bls.w	1120 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
     fca:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
     fce:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
     fd0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     fd4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     fd8:	f361 0241 	bfi	r2, r1, #1, #1
     fdc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
     fe0:	e05c      	b.n	109c <cbvprintf+0x1f4>
		conv->specifier = *sp++;
     fe2:	1caa      	adds	r2, r5, #2
     fe4:	9202      	str	r2, [sp, #8]
     fe6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
     fea:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     fee:	07df      	lsls	r7, r3, #31
     ff0:	f140 8173 	bpl.w	12da <cbvprintf+0x432>
			width = va_arg(ap, int);
     ff4:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
     ff8:	f1bb 0f00 	cmp.w	fp, #0
     ffc:	da07      	bge.n	100e <cbvprintf+0x166>
				conv->flag_dash = true;
     ffe:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1002:	f042 0204 	orr.w	r2, r2, #4
    1006:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    100a:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    100e:	0758      	lsls	r0, r3, #29
    1010:	f140 816c 	bpl.w	12ec <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    1014:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1018:	f1b8 0f00 	cmp.w	r8, #0
    101c:	f280 816b 	bge.w	12f6 <cbvprintf+0x44e>
				conv->prec_present = false;
    1020:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1024:	f36f 0341 	bfc	r3, #1, #1
    1028:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    102c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1030:	e161      	b.n	12f6 <cbvprintf+0x44e>
		switch (*sp) {
    1032:	2b2d      	cmp	r3, #45	; 0x2d
    1034:	d00d      	beq.n	1052 <cbvprintf+0x1aa>
    1036:	2b30      	cmp	r3, #48	; 0x30
    1038:	f47f af6a 	bne.w	f10 <cbvprintf+0x68>
			conv->flag_zero = true;
    103c:	2201      	movs	r2, #1
	} while (loop);
    103e:	e759      	b.n	ef4 <cbvprintf+0x4c>
			conv->flag_plus = true;
    1040:	f04f 0c01 	mov.w	ip, #1
    1044:	e756      	b.n	ef4 <cbvprintf+0x4c>
			conv->flag_space = true;
    1046:	f04f 0801 	mov.w	r8, #1
    104a:	e753      	b.n	ef4 <cbvprintf+0x4c>
			conv->flag_hash = true;
    104c:	f04f 0e01 	mov.w	lr, #1
    1050:	e750      	b.n	ef4 <cbvprintf+0x4c>
		switch (*sp) {
    1052:	2701      	movs	r7, #1
    1054:	e74e      	b.n	ef4 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    1056:	fb0c 7202 	mla	r2, ip, r2, r7
    105a:	3a30      	subs	r2, #48	; 0x30
    105c:	4603      	mov	r3, r0
    105e:	4618      	mov	r0, r3
    1060:	f810 7b01 	ldrb.w	r7, [r0], #1
    1064:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1068:	f1be 0f09 	cmp.w	lr, #9
    106c:	d9f3      	bls.n	1056 <cbvprintf+0x1ae>
	if (sp != wp) {
    106e:	4299      	cmp	r1, r3
    1070:	d090      	beq.n	f94 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    1072:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    1076:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    1078:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    107a:	f362 0141 	bfi	r1, r2, #1, #1
    107e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    1082:	e787      	b.n	f94 <cbvprintf+0xec>
    1084:	460b      	mov	r3, r1
	size_t val = 0;
    1086:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1088:	f04f 0c0a 	mov.w	ip, #10
    108c:	e7e7      	b.n	105e <cbvprintf+0x1b6>
		conv->prec_star = true;
    108e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1092:	f042 0204 	orr.w	r2, r2, #4
    1096:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    109a:	3302      	adds	r3, #2
	switch (*sp) {
    109c:	4619      	mov	r1, r3
    109e:	f811 2b01 	ldrb.w	r2, [r1], #1
    10a2:	2a6c      	cmp	r2, #108	; 0x6c
    10a4:	d05c      	beq.n	1160 <cbvprintf+0x2b8>
    10a6:	d840      	bhi.n	112a <cbvprintf+0x282>
    10a8:	2a68      	cmp	r2, #104	; 0x68
    10aa:	d046      	beq.n	113a <cbvprintf+0x292>
    10ac:	2a6a      	cmp	r2, #106	; 0x6a
    10ae:	d061      	beq.n	1174 <cbvprintf+0x2cc>
    10b0:	2a4c      	cmp	r2, #76	; 0x4c
    10b2:	d067      	beq.n	1184 <cbvprintf+0x2dc>
    10b4:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    10b6:	460b      	mov	r3, r1
    10b8:	f813 2b01 	ldrb.w	r2, [r3], #1
    10bc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    10be:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    10c0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    10c4:	f200 80df 	bhi.w	1286 <cbvprintf+0x3de>
    10c8:	2a57      	cmp	r2, #87	; 0x57
    10ca:	d868      	bhi.n	119e <cbvprintf+0x2f6>
    10cc:	2a41      	cmp	r2, #65	; 0x41
    10ce:	d004      	beq.n	10da <cbvprintf+0x232>
    10d0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    10d4:	2b02      	cmp	r3, #2
    10d6:	f200 80d6 	bhi.w	1286 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    10da:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    10de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    10e2:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    10e4:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    10e8:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    10ec:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    10f0:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    10f4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    10f8:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    10fc:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1100:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1102:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    1106:	b2cb      	uxtb	r3, r1
    1108:	f100 80e5 	bmi.w	12d6 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    110c:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1110:	2a18      	cmp	r2, #24
    1112:	f040 80b5 	bne.w	1280 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    1116:	f36f 03c6 	bfc	r3, #3, #4
    111a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    111e:	e09c      	b.n	125a <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    1120:	fb0c 2101 	mla	r1, ip, r1, r2
    1124:	3930      	subs	r1, #48	; 0x30
    1126:	4603      	mov	r3, r0
    1128:	e747      	b.n	fba <cbvprintf+0x112>
	switch (*sp) {
    112a:	2a74      	cmp	r2, #116	; 0x74
    112c:	d026      	beq.n	117c <cbvprintf+0x2d4>
    112e:	2a7a      	cmp	r2, #122	; 0x7a
    1130:	d1c0      	bne.n	10b4 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    1132:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1136:	2206      	movs	r2, #6
    1138:	e00d      	b.n	1156 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    113a:	785a      	ldrb	r2, [r3, #1]
    113c:	2a68      	cmp	r2, #104	; 0x68
    113e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1142:	d106      	bne.n	1152 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    1144:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1146:	f361 02c6 	bfi	r2, r1, #3, #4
    114a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    114e:	1c99      	adds	r1, r3, #2
    1150:	e7b1      	b.n	10b6 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    1152:	4613      	mov	r3, r2
    1154:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1156:	f362 03c6 	bfi	r3, r2, #3, #4
    115a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    115e:	e7aa      	b.n	10b6 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    1160:	785a      	ldrb	r2, [r3, #1]
    1162:	2a6c      	cmp	r2, #108	; 0x6c
    1164:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1168:	d101      	bne.n	116e <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    116a:	2104      	movs	r1, #4
    116c:	e7eb      	b.n	1146 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    116e:	4613      	mov	r3, r2
    1170:	2203      	movs	r2, #3
    1172:	e7f0      	b.n	1156 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    1174:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1178:	2205      	movs	r2, #5
    117a:	e7ec      	b.n	1156 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    117c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1180:	2207      	movs	r2, #7
    1182:	e7e8      	b.n	1156 <cbvprintf+0x2ae>
		conv->unsupported = true;
    1184:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    1188:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    118c:	f023 0302 	bic.w	r3, r3, #2
    1190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1194:	f043 0302 	orr.w	r3, r3, #2
    1198:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    119c:	e78b      	b.n	10b6 <cbvprintf+0x20e>
	switch (conv->specifier) {
    119e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    11a2:	2b20      	cmp	r3, #32
    11a4:	d86f      	bhi.n	1286 <cbvprintf+0x3de>
    11a6:	a101      	add	r1, pc, #4	; (adr r1, 11ac <cbvprintf+0x304>)
    11a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    11ac:	0000125f 	.word	0x0000125f
    11b0:	00001287 	.word	0x00001287
    11b4:	00001287 	.word	0x00001287
    11b8:	00001287 	.word	0x00001287
    11bc:	00001287 	.word	0x00001287
    11c0:	00001287 	.word	0x00001287
    11c4:	00001287 	.word	0x00001287
    11c8:	00001287 	.word	0x00001287
    11cc:	00001287 	.word	0x00001287
    11d0:	000010db 	.word	0x000010db
    11d4:	00001287 	.word	0x00001287
    11d8:	0000125f 	.word	0x0000125f
    11dc:	00001231 	.word	0x00001231
    11e0:	000010db 	.word	0x000010db
    11e4:	000010db 	.word	0x000010db
    11e8:	000010db 	.word	0x000010db
    11ec:	00001287 	.word	0x00001287
    11f0:	00001231 	.word	0x00001231
    11f4:	00001287 	.word	0x00001287
    11f8:	00001287 	.word	0x00001287
    11fc:	00001287 	.word	0x00001287
    1200:	00001287 	.word	0x00001287
    1204:	00001295 	.word	0x00001295
    1208:	0000125f 	.word	0x0000125f
    120c:	000012b9 	.word	0x000012b9
    1210:	00001287 	.word	0x00001287
    1214:	00001287 	.word	0x00001287
    1218:	000012b9 	.word	0x000012b9
    121c:	00001287 	.word	0x00001287
    1220:	0000125f 	.word	0x0000125f
    1224:	00001287 	.word	0x00001287
    1228:	00001287 	.word	0x00001287
    122c:	0000125f 	.word	0x0000125f
		conv->specifier_cat = SPECIFIER_SINT;
    1230:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1234:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1236:	f361 0302 	bfi	r3, r1, #0, #3
    123a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    123e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1242:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1246:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    1248:	bf02      	ittt	eq
    124a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    124e:	f041 0101 	orreq.w	r1, r1, #1
    1252:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    1256:	2a63      	cmp	r2, #99	; 0x63
    1258:	d005      	beq.n	1266 <cbvprintf+0x3be>
	bool unsupported = false;
    125a:	2300      	movs	r3, #0
    125c:	e006      	b.n	126c <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    125e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1262:	2102      	movs	r1, #2
    1264:	e7e7      	b.n	1236 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1266:	3b00      	subs	r3, #0
    1268:	bf18      	it	ne
    126a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    126c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1270:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1274:	430b      	orrs	r3, r1
    1276:	f363 0241 	bfi	r2, r3, #1, #1
    127a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    127e:	e6b4      	b.n	fea <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    1280:	f013 0f38 	tst.w	r3, #56	; 0x38
    1284:	d0e9      	beq.n	125a <cbvprintf+0x3b2>
			conv->invalid = true;
    1286:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    128a:	f043 0301 	orr.w	r3, r3, #1
    128e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    1292:	e7e2      	b.n	125a <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    1294:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1298:	2203      	movs	r2, #3
    129a:	f362 0302 	bfi	r3, r2, #0, #3
    129e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    12a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    12a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    12aa:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    12ae:	f1dc 0300 	rsbs	r3, ip, #0
    12b2:	eb43 030c 	adc.w	r3, r3, ip
    12b6:	e7d9      	b.n	126c <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    12b8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    12bc:	2203      	movs	r2, #3
    12be:	f362 0302 	bfi	r3, r2, #0, #3
    12c2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    12c6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    12ca:	f013 0f78 	tst.w	r3, #120	; 0x78
    12ce:	bf14      	ite	ne
    12d0:	2301      	movne	r3, #1
    12d2:	2300      	moveq	r3, #0
    12d4:	e7ca      	b.n	126c <cbvprintf+0x3c4>
			unsupported = true;
    12d6:	2301      	movs	r3, #1
    12d8:	e7c8      	b.n	126c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    12da:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    12de:	2a00      	cmp	r2, #0
			width = conv->width_value;
    12e0:	bfb4      	ite	lt
    12e2:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    12e6:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    12ea:	e690      	b.n	100e <cbvprintf+0x166>
		} else if (conv->prec_present) {
    12ec:	0799      	lsls	r1, r3, #30
    12ee:	f57f ae9d 	bpl.w	102c <cbvprintf+0x184>
			precision = conv->prec_value;
    12f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    12f6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    12fa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    12fc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    1300:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1304:	f003 0207 	and.w	r2, r3, #7
    1308:	2a04      	cmp	r2, #4
    130a:	d109      	bne.n	1320 <cbvprintf+0x478>
		    && !conv->prec_present) {
    130c:	078a      	lsls	r2, r1, #30
    130e:	d407      	bmi.n	1320 <cbvprintf+0x478>
			if (conv->specifier_a) {
    1310:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    1314:	2a00      	cmp	r2, #0
    1316:	bfb4      	ite	lt
    1318:	f04f 080d 	movlt.w	r8, #13
    131c:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    1320:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1324:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1326:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    132a:	d137      	bne.n	139c <cbvprintf+0x4f4>
			switch (length_mod) {
    132c:	1ecb      	subs	r3, r1, #3
    132e:	2b04      	cmp	r3, #4
    1330:	d821      	bhi.n	1376 <cbvprintf+0x4ce>
    1332:	e8df f003 	tbb	[pc, r3]
    1336:	0903      	.short	0x0903
    1338:	2009      	.short	0x2009
    133a:	20          	.byte	0x20
    133b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    133c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1340:	17da      	asrs	r2, r3, #31
    1342:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    1346:	e006      	b.n	1356 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    1348:	3407      	adds	r4, #7
    134a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    134e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1352:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    1356:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    135a:	07bb      	lsls	r3, r7, #30
    135c:	d056      	beq.n	140c <cbvprintf+0x564>
			OUTS(sp, fp);
    135e:	9b02      	ldr	r3, [sp, #8]
    1360:	462a      	mov	r2, r5
    1362:	4651      	mov	r1, sl
    1364:	4648      	mov	r0, r9
    1366:	f004 f922 	bl	55ae <outs>
    136a:	2800      	cmp	r0, #0
    136c:	f2c0 8397 	blt.w	1a9e <cbvprintf+0xbf6>
    1370:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    1372:	9d02      	ldr	r5, [sp, #8]
    1374:	e5a0      	b.n	eb8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1376:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    137a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    137c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1380:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1384:	d105      	bne.n	1392 <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    1386:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    138a:	930c      	str	r3, [sp, #48]	; 0x30
    138c:	2300      	movs	r3, #0
    138e:	930d      	str	r3, [sp, #52]	; 0x34
    1390:	e7e1      	b.n	1356 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    1392:	2902      	cmp	r1, #2
    1394:	d1df      	bne.n	1356 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    1396:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    139a:	e7d1      	b.n	1340 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    139c:	2b02      	cmp	r3, #2
    139e:	d123      	bne.n	13e8 <cbvprintf+0x540>
			switch (length_mod) {
    13a0:	1ecb      	subs	r3, r1, #3
    13a2:	2b04      	cmp	r3, #4
    13a4:	d813      	bhi.n	13ce <cbvprintf+0x526>
    13a6:	e8df f003 	tbb	[pc, r3]
    13aa:	0a03      	.short	0x0a03
    13ac:	120a      	.short	0x120a
    13ae:	12          	.byte	0x12
    13af:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    13b0:	6822      	ldr	r2, [r4, #0]
    13b2:	920c      	str	r2, [sp, #48]	; 0x30
    13b4:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    13b6:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    13b8:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    13ba:	4604      	mov	r4, r0
    13bc:	e7cb      	b.n	1356 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    13be:	1de0      	adds	r0, r4, #7
    13c0:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    13c4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    13c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    13cc:	e7f5      	b.n	13ba <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    13ce:	f854 3b04 	ldr.w	r3, [r4], #4
    13d2:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    13d4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    13d6:	f04f 0300 	mov.w	r3, #0
    13da:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    13dc:	d0d3      	beq.n	1386 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    13de:	2902      	cmp	r1, #2
    13e0:	d1b9      	bne.n	1356 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    13e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    13e6:	e7d0      	b.n	138a <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    13e8:	2b04      	cmp	r3, #4
    13ea:	d109      	bne.n	1400 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    13ec:	1de3      	adds	r3, r4, #7
    13ee:	f023 0307 	bic.w	r3, r3, #7
    13f2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    13f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    13fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    13fe:	e7aa      	b.n	1356 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1400:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1402:	bf04      	itt	eq
    1404:	f854 3b04 	ldreq.w	r3, [r4], #4
    1408:	930c      	streq	r3, [sp, #48]	; 0x30
    140a:	e7a4      	b.n	1356 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    140c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    1410:	2a78      	cmp	r2, #120	; 0x78
    1412:	d8ae      	bhi.n	1372 <cbvprintf+0x4ca>
    1414:	2a57      	cmp	r2, #87	; 0x57
    1416:	f200 808c 	bhi.w	1532 <cbvprintf+0x68a>
    141a:	2a25      	cmp	r2, #37	; 0x25
    141c:	f000 80d4 	beq.w	15c8 <cbvprintf+0x720>
    1420:	2a24      	cmp	r2, #36	; 0x24
    1422:	d9a6      	bls.n	1372 <cbvprintf+0x4ca>
    1424:	2a41      	cmp	r2, #65	; 0x41
    1426:	d003      	beq.n	1430 <cbvprintf+0x588>
    1428:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    142c:	2b02      	cmp	r3, #2
    142e:	d8a0      	bhi.n	1372 <cbvprintf+0x4ca>
	} u = {
    1430:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    1434:	2b00      	cmp	r3, #0
    1436:	f2c0 81be 	blt.w	17b6 <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    143a:	0738      	lsls	r0, r7, #28
    143c:	f100 81bd 	bmi.w	17ba <cbvprintf+0x912>
		*sign = ' ';
    1440:	f017 0710 	ands.w	r7, r7, #16
    1444:	bf18      	it	ne
    1446:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1448:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    144c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1450:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    1454:	2d00      	cmp	r5, #0
    1456:	f040 81b2 	bne.w	17be <cbvprintf+0x916>
    145a:	ea51 0003 	orrs.w	r0, r1, r3
    145e:	bf14      	ite	ne
    1460:	2001      	movne	r0, #1
    1462:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    1464:	02db      	lsls	r3, r3, #11
    1466:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    146a:	02c9      	lsls	r1, r1, #11
		c = 'f';
    146c:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    146e:	ea45 0e01 	orr.w	lr, r5, r1
    1472:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    1476:	bf08      	it	eq
    1478:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    147a:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    147e:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    1482:	f000 8206 	beq.w	1892 <cbvprintf+0x9ea>
		if (is_subnormal) {
    1486:	2800      	cmp	r0, #0
    1488:	f040 81ce 	bne.w	1828 <cbvprintf+0x980>
		fract |= BIT_63;
    148c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1490:	f04f 0c00 	mov.w	ip, #0
    1494:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1498:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    149c:	9109      	str	r1, [sp, #36]	; 0x24
    149e:	4663      	mov	r3, ip
		fract *= 5U;
    14a0:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    14a4:	f115 0f02 	cmn.w	r5, #2
    14a8:	f2c0 81c5 	blt.w	1836 <cbvprintf+0x98e>
    14ac:	f1bc 0f00 	cmp.w	ip, #0
    14b0:	d001      	beq.n	14b6 <cbvprintf+0x60e>
    14b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    14b6:	2d00      	cmp	r5, #0
		fract += 2;
    14b8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    14bc:	f300 81d0 	bgt.w	1860 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    14c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    14c2:	9908      	ldr	r1, [sp, #32]
    14c4:	f1c5 0c04 	rsb	ip, r5, #4
    14c8:	351c      	adds	r5, #28
    14ca:	fa00 f505 	lsl.w	r5, r0, r5
    14ce:	f1ac 0e20 	sub.w	lr, ip, #32
    14d2:	fa21 f10c 	lsr.w	r1, r1, ip
    14d6:	fa20 fe0e 	lsr.w	lr, r0, lr
    14da:	4329      	orrs	r1, r5
    14dc:	ea41 010e 	orr.w	r1, r1, lr
    14e0:	fa20 f00c 	lsr.w	r0, r0, ip
    14e4:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    14e8:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    14ec:	2947      	cmp	r1, #71	; 0x47
    14ee:	f040 81d7 	bne.w	18a0 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    14f2:	1cdd      	adds	r5, r3, #3
    14f4:	db02      	blt.n	14fc <cbvprintf+0x654>
    14f6:	4598      	cmp	r8, r3
    14f8:	f280 81ce 	bge.w	1898 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    14fc:	3a02      	subs	r2, #2
			if (precision > 0) {
    14fe:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    1502:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    1504:	dd01      	ble.n	150a <cbvprintf+0x662>
				precision--;
    1506:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    150a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    150e:	0688      	lsls	r0, r1, #26
    1510:	f100 81c6 	bmi.w	18a0 <cbvprintf+0x9f8>
    1514:	f1b8 0f00 	cmp.w	r8, #0
    1518:	bfd4      	ite	le
    151a:	2100      	movle	r1, #0
    151c:	2101      	movgt	r1, #1
	if (c == 'f') {
    151e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    1520:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    1522:	f040 81bf 	bne.w	18a4 <cbvprintf+0x9fc>
		if (decimals < 0) {
    1526:	eb18 0503 	adds.w	r5, r8, r3
    152a:	f140 81bd 	bpl.w	18a8 <cbvprintf+0xa00>
			decimals = 0;
    152e:	2500      	movs	r5, #0
    1530:	e1bd      	b.n	18ae <cbvprintf+0xa06>
		switch (conv->specifier) {
    1532:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1536:	2b20      	cmp	r3, #32
    1538:	f63f af1b 	bhi.w	1372 <cbvprintf+0x4ca>
    153c:	a001      	add	r0, pc, #4	; (adr r0, 1544 <cbvprintf+0x69c>)
    153e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    1542:	bf00      	nop
    1544:	00001759 	.word	0x00001759
    1548:	00001373 	.word	0x00001373
    154c:	00001373 	.word	0x00001373
    1550:	00001373 	.word	0x00001373
    1554:	00001373 	.word	0x00001373
    1558:	00001373 	.word	0x00001373
    155c:	00001373 	.word	0x00001373
    1560:	00001373 	.word	0x00001373
    1564:	00001373 	.word	0x00001373
    1568:	00001431 	.word	0x00001431
    156c:	00001373 	.word	0x00001373
    1570:	000015f5 	.word	0x000015f5
    1574:	000016f9 	.word	0x000016f9
    1578:	00001431 	.word	0x00001431
    157c:	00001431 	.word	0x00001431
    1580:	00001431 	.word	0x00001431
    1584:	00001373 	.word	0x00001373
    1588:	000016f9 	.word	0x000016f9
    158c:	00001373 	.word	0x00001373
    1590:	00001373 	.word	0x00001373
    1594:	00001373 	.word	0x00001373
    1598:	00001373 	.word	0x00001373
    159c:	0000178f 	.word	0x0000178f
    15a0:	00001759 	.word	0x00001759
    15a4:	0000175d 	.word	0x0000175d
    15a8:	00001373 	.word	0x00001373
    15ac:	00001373 	.word	0x00001373
    15b0:	000015cf 	.word	0x000015cf
    15b4:	00001373 	.word	0x00001373
    15b8:	00001759 	.word	0x00001759
    15bc:	00001373 	.word	0x00001373
    15c0:	00001373 	.word	0x00001373
    15c4:	00001759 	.word	0x00001759
			OUTC('%');
    15c8:	4651      	mov	r1, sl
    15ca:	4610      	mov	r0, r2
    15cc:	e47e      	b.n	ecc <cbvprintf+0x24>
			if (precision >= 0) {
    15ce:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    15d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    15d4:	db09      	blt.n	15ea <cbvprintf+0x742>
				len = strnlen(bps, precision);
    15d6:	4641      	mov	r1, r8
    15d8:	4610      	mov	r0, r2
    15da:	9203      	str	r2, [sp, #12]
    15dc:	f004 f825 	bl	562a <strnlen>
				len = strlen(bps);
    15e0:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    15e2:	2700      	movs	r7, #0
			bpe = bps + len;
    15e4:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    15e6:	b962      	cbnz	r2, 1602 <cbvprintf+0x75a>
    15e8:	e6c3      	b.n	1372 <cbvprintf+0x4ca>
				len = strlen(bps);
    15ea:	4610      	mov	r0, r2
    15ec:	9203      	str	r2, [sp, #12]
    15ee:	f004 f815 	bl	561c <strlen>
    15f2:	e7f5      	b.n	15e0 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    15f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    15f6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    15fa:	2700      	movs	r7, #0
			bpe = buf + 1;
    15fc:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    1600:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    1602:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    1604:	b107      	cbz	r7, 1608 <cbvprintf+0x760>
			nj_len += 1U;
    1606:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1608:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    160c:	06c1      	lsls	r1, r0, #27
    160e:	f140 823a 	bpl.w	1a86 <cbvprintf+0xbde>
			nj_len += 2U;
    1612:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    1614:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    1616:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    1618:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    161a:	bf44      	itt	mi
    161c:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    161e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    1620:	f1bb 0f00 	cmp.w	fp, #0
    1624:	dd23      	ble.n	166e <cbvprintf+0x7c6>
			width -= (int)nj_len;
    1626:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    162a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    162e:	0759      	lsls	r1, r3, #29
    1630:	f3c3 0880 	ubfx	r8, r3, #2, #1
    1634:	d41b      	bmi.n	166e <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    1636:	0658      	lsls	r0, r3, #25
    1638:	f140 8234 	bpl.w	1aa4 <cbvprintf+0xbfc>
					if (sign != 0) {
    163c:	2f00      	cmp	r7, #0
    163e:	f000 8234 	beq.w	1aaa <cbvprintf+0xc02>
						OUTC(sign);
    1642:	4651      	mov	r1, sl
    1644:	4638      	mov	r0, r7
    1646:	9203      	str	r2, [sp, #12]
    1648:	47c8      	blx	r9
    164a:	2800      	cmp	r0, #0
    164c:	f2c0 8227 	blt.w	1a9e <cbvprintf+0xbf6>
    1650:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    1652:	4647      	mov	r7, r8
						OUTC(sign);
    1654:	3601      	adds	r6, #1
					pad = '0';
    1656:	f04f 0830 	mov.w	r8, #48	; 0x30
    165a:	445e      	add	r6, fp
    165c:	465b      	mov	r3, fp
				while (width-- > 0) {
    165e:	2b00      	cmp	r3, #0
    1660:	eba6 000b 	sub.w	r0, r6, fp
    1664:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1668:	f300 8211 	bgt.w	1a8e <cbvprintf+0xbe6>
    166c:	4606      	mov	r6, r0
		if (sign != 0) {
    166e:	b147      	cbz	r7, 1682 <cbvprintf+0x7da>
			OUTC(sign);
    1670:	4651      	mov	r1, sl
    1672:	4638      	mov	r0, r7
    1674:	9203      	str	r2, [sp, #12]
    1676:	47c8      	blx	r9
    1678:	2800      	cmp	r0, #0
    167a:	f2c0 8210 	blt.w	1a9e <cbvprintf+0xbf6>
    167e:	9a03      	ldr	r2, [sp, #12]
    1680:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1682:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1686:	0659      	lsls	r1, r3, #25
    1688:	f140 8265 	bpl.w	1b56 <cbvprintf+0xcae>
			if (conv->specifier_a) {
    168c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    1690:	2b00      	cmp	r3, #0
    1692:	eba6 0302 	sub.w	r3, r6, r2
    1696:	9303      	str	r3, [sp, #12]
    1698:	f2c0 820a 	blt.w	1ab0 <cbvprintf+0xc08>
    169c:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    169e:	7838      	ldrb	r0, [r7, #0]
    16a0:	9b03      	ldr	r3, [sp, #12]
    16a2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    16a6:	2a09      	cmp	r2, #9
    16a8:	46b8      	mov	r8, r7
    16aa:	eb03 0607 	add.w	r6, r3, r7
    16ae:	f107 0701 	add.w	r7, r7, #1
    16b2:	f240 8229 	bls.w	1b08 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    16b6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    16ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    16bc:	0693      	lsls	r3, r2, #26
    16be:	d408      	bmi.n	16d2 <cbvprintf+0x82a>
    16c0:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    16c2:	2f00      	cmp	r7, #0
    16c4:	eba6 0307 	sub.w	r3, r6, r7
    16c8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    16cc:	f300 8222 	bgt.w	1b14 <cbvprintf+0xc6c>
    16d0:	461e      	mov	r6, r3
				if (*cp == '.') {
    16d2:	f898 0000 	ldrb.w	r0, [r8]
    16d6:	282e      	cmp	r0, #46	; 0x2e
    16d8:	d10b      	bne.n	16f2 <cbvprintf+0x84a>
					OUTC(*cp++);
    16da:	4651      	mov	r1, sl
    16dc:	47c8      	blx	r9
						OUTC('0');
    16de:	2800      	cmp	r0, #0
    16e0:	f2c0 81dd 	blt.w	1a9e <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    16e4:	2f00      	cmp	r7, #0
						OUTC('0');
    16e6:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    16ea:	f300 821a 	bgt.w	1b22 <cbvprintf+0xc7a>
					OUTC(*cp++);
    16ee:	f108 0801 	add.w	r8, r8, #1
    16f2:	eba6 0608 	sub.w	r6, r6, r8
    16f6:	e21d      	b.n	1b34 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    16f8:	073d      	lsls	r5, r7, #28
    16fa:	d42b      	bmi.n	1754 <cbvprintf+0x8ac>
				sign = ' ';
    16fc:	f017 0710 	ands.w	r7, r7, #16
    1700:	bf18      	it	ne
    1702:	2720      	movne	r7, #32
			sint = value->sint;
    1704:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    1708:	2b00      	cmp	r3, #0
    170a:	da05      	bge.n	1718 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    170c:	4252      	negs	r2, r2
    170e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1712:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    1716:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    1718:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    171c:	9300      	str	r3, [sp, #0]
    171e:	aa0e      	add	r2, sp, #56	; 0x38
    1720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1724:	ab13      	add	r3, sp, #76	; 0x4c
    1726:	f003 fefc 	bl	5522 <encode_uint>
    172a:	4602      	mov	r2, r0
			if (precision >= 0) {
    172c:	f1b8 0f00 	cmp.w	r8, #0
    1730:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    1734:	f6ff af57 	blt.w	15e6 <cbvprintf+0x73e>
				conv->flag_zero = false;
    1738:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    173c:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    173e:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1742:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1744:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    1748:	f67f af4d 	bls.w	15e6 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    174c:	eba8 0303 	sub.w	r3, r8, r3
    1750:	930f      	str	r3, [sp, #60]	; 0x3c
    1752:	e748      	b.n	15e6 <cbvprintf+0x73e>
				sign = '+';
    1754:	272b      	movs	r7, #43	; 0x2b
    1756:	e7d5      	b.n	1704 <cbvprintf+0x85c>
		switch (conv->specifier) {
    1758:	2700      	movs	r7, #0
    175a:	e7dd      	b.n	1718 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    175c:	980c      	ldr	r0, [sp, #48]	; 0x30
    175e:	2800      	cmp	r0, #0
    1760:	f000 818d 	beq.w	1a7e <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1764:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1768:	9300      	str	r3, [sp, #0]
    176a:	aa0e      	add	r2, sp, #56	; 0x38
    176c:	ab13      	add	r3, sp, #76	; 0x4c
    176e:	2100      	movs	r1, #0
    1770:	f003 fed7 	bl	5522 <encode_uint>
				conv->altform_0c = true;
    1774:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1778:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    177c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1780:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1784:	4602      	mov	r2, r0
				conv->altform_0c = true;
    1786:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    178a:	2700      	movs	r7, #0
				goto prec_int_pad0;
    178c:	e7ce      	b.n	172c <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    178e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    1790:	2907      	cmp	r1, #7
    1792:	f63f adee 	bhi.w	1372 <cbvprintf+0x4ca>
    1796:	e8df f001 	tbb	[pc, r1]
    179a:	040c      	.short	0x040c
    179c:	08080c06 	.word	0x08080c06
    17a0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    17a2:	701e      	strb	r6, [r3, #0]
		break;
    17a4:	e5e5      	b.n	1372 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    17a6:	801e      	strh	r6, [r3, #0]
		break;
    17a8:	e5e3      	b.n	1372 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    17aa:	17f2      	asrs	r2, r6, #31
    17ac:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    17b0:	e5df      	b.n	1372 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    17b2:	601e      	str	r6, [r3, #0]
		break;
    17b4:	e5dd      	b.n	1372 <cbvprintf+0x4ca>
		*sign = '-';
    17b6:	272d      	movs	r7, #45	; 0x2d
    17b8:	e646      	b.n	1448 <cbvprintf+0x5a0>
		*sign = '+';
    17ba:	272b      	movs	r7, #43	; 0x2b
    17bc:	e644      	b.n	1448 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    17be:	f240 70ff 	movw	r0, #2047	; 0x7ff
    17c2:	4285      	cmp	r5, r0
    17c4:	d12d      	bne.n	1822 <cbvprintf+0x97a>
		if (fract == 0) {
    17c6:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    17c8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    17cc:	d11b      	bne.n	1806 <cbvprintf+0x95e>
			if (isupper((int)c)) {
    17ce:	2a19      	cmp	r2, #25
    17d0:	d811      	bhi.n	17f6 <cbvprintf+0x94e>
				*buf++ = 'I';
    17d2:	2349      	movs	r3, #73	; 0x49
    17d4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    17d8:	234e      	movs	r3, #78	; 0x4e
    17da:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    17de:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    17e0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    17e4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    17e8:	f36f 1386 	bfc	r3, #6, #1
    17ec:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    17f0:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    17f4:	e704      	b.n	1600 <cbvprintf+0x758>
				*buf++ = 'i';
    17f6:	2369      	movs	r3, #105	; 0x69
    17f8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    17fc:	236e      	movs	r3, #110	; 0x6e
    17fe:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    1802:	2366      	movs	r3, #102	; 0x66
    1804:	e7ec      	b.n	17e0 <cbvprintf+0x938>
			if (isupper((int)c)) {
    1806:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    1808:	bf99      	ittee	ls
    180a:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    180c:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    180e:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    1810:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    1812:	bf94      	ite	ls
    1814:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1818:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    181c:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    1820:	e7de      	b.n	17e0 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1822:	2000      	movs	r0, #0
    1824:	e61e      	b.n	1464 <cbvprintf+0x5bc>
				expo--;
    1826:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1828:	1849      	adds	r1, r1, r1
    182a:	415b      	adcs	r3, r3
    182c:	2b00      	cmp	r3, #0
    182e:	dafa      	bge.n	1826 <cbvprintf+0x97e>
    1830:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1834:	e62a      	b.n	148c <cbvprintf+0x5e4>
			fract >>= 1;
    1836:	0840      	lsrs	r0, r0, #1
    1838:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    183c:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    183e:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1842:	46ac      	mov	ip, r5
			expo++;
    1844:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1848:	d2f5      	bcs.n	1836 <cbvprintf+0x98e>
		fract *= 5U;
    184a:	fb0e f501 	mul.w	r5, lr, r1
    184e:	fba0 010e 	umull	r0, r1, r0, lr
    1852:	4429      	add	r1, r5
		decexp--;
    1854:	3b01      	subs	r3, #1
		expo++;
    1856:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    185a:	f04f 0c01 	mov.w	ip, #1
    185e:	e621      	b.n	14a4 <cbvprintf+0x5fc>
		fract += 2;
    1860:	3102      	adds	r1, #2
    1862:	f140 0000 	adc.w	r0, r0, #0
    1866:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    186a:	a808      	add	r0, sp, #32
    186c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    1870:	f003 fe28 	bl	54c4 <_ldiv5>
		decexp++;
    1874:	9b04      	ldr	r3, [sp, #16]
    1876:	9a03      	ldr	r2, [sp, #12]
    1878:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    187c:	3d01      	subs	r5, #1
		decexp++;
    187e:	3301      	adds	r3, #1
			fract <<= 1;
    1880:	1849      	adds	r1, r1, r1
    1882:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    1884:	2800      	cmp	r0, #0
			expo--;
    1886:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    188a:	daf9      	bge.n	1880 <cbvprintf+0x9d8>
    188c:	e9cd 1008 	strd	r1, r0, [sp, #32]
    1890:	e611      	b.n	14b6 <cbvprintf+0x60e>
    1892:	2300      	movs	r3, #0
    1894:	461d      	mov	r5, r3
    1896:	e613      	b.n	14c0 <cbvprintf+0x618>
			precision -= decexp;
    1898:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    189c:	2266      	movs	r2, #102	; 0x66
    189e:	e634      	b.n	150a <cbvprintf+0x662>
	bool prune_zero = false;
    18a0:	2100      	movs	r1, #0
    18a2:	e63c      	b.n	151e <cbvprintf+0x676>
		decimals = precision + 1;
    18a4:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    18a8:	2d10      	cmp	r5, #16
    18aa:	bfa8      	it	ge
    18ac:	2510      	movge	r5, #16
    18ae:	2110      	movs	r1, #16
    18b0:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    18b2:	2000      	movs	r0, #0
    18b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    18b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    18bc:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    18c0:	b9a5      	cbnz	r5, 18ec <cbvprintf+0xa44>
	fract += round;
    18c2:	9d08      	ldr	r5, [sp, #32]
    18c4:	1949      	adds	r1, r1, r5
    18c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    18c8:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    18cc:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    18d0:	d21b      	bcs.n	190a <cbvprintf+0xa62>
	fract += round;
    18d2:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    18d6:	2a66      	cmp	r2, #102	; 0x66
    18d8:	f040 8099 	bne.w	1a0e <cbvprintf+0xb66>
		if (decexp > 0) {
    18dc:	2b00      	cmp	r3, #0
    18de:	dc23      	bgt.n	1928 <cbvprintf+0xa80>
			*buf++ = '0';
    18e0:	2130      	movs	r1, #48	; 0x30
    18e2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    18e6:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    18ea:	e02f      	b.n	194c <cbvprintf+0xaa4>
	*v >>= 1;
    18ec:	0849      	lsrs	r1, r1, #1
    18ee:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    18f2:	0840      	lsrs	r0, r0, #1
    18f4:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    18f8:	a80a      	add	r0, sp, #40	; 0x28
    18fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    18fe:	3d01      	subs	r5, #1
    1900:	f003 fde0 	bl	54c4 <_ldiv5>
    1904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1908:	e7d8      	b.n	18bc <cbvprintf+0xa14>
	*v >>= 1;
    190a:	0849      	lsrs	r1, r1, #1
    190c:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    1910:	a808      	add	r0, sp, #32
	*v >>= 1;
    1912:	086d      	lsrs	r5, r5, #1
    1914:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1918:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    191c:	f003 fdd2 	bl	54c4 <_ldiv5>
		decexp++;
    1920:	9b05      	ldr	r3, [sp, #20]
    1922:	9a04      	ldr	r2, [sp, #16]
    1924:	3301      	adds	r3, #1
    1926:	e7d6      	b.n	18d6 <cbvprintf+0xa2e>
	char *buf = bps;
    1928:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    192a:	9907      	ldr	r1, [sp, #28]
    192c:	2900      	cmp	r1, #0
    192e:	dd0b      	ble.n	1948 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    1930:	a907      	add	r1, sp, #28
    1932:	a808      	add	r0, sp, #32
    1934:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1938:	f003 fddc 	bl	54f4 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    193c:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    193e:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    1942:	3b01      	subs	r3, #1
    1944:	9a04      	ldr	r2, [sp, #16]
    1946:	d1f0      	bne.n	192a <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    1948:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    194a:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    194c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1950:	0689      	lsls	r1, r1, #26
    1952:	d402      	bmi.n	195a <cbvprintf+0xab2>
    1954:	f1b8 0f00 	cmp.w	r8, #0
    1958:	dd1d      	ble.n	1996 <cbvprintf+0xaee>
			*buf++ = '.';
    195a:	212e      	movs	r1, #46	; 0x2e
    195c:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    1960:	b19b      	cbz	r3, 198a <cbvprintf+0xae2>
    1962:	f1b8 0f00 	cmp.w	r8, #0
    1966:	dd16      	ble.n	1996 <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    1968:	4259      	negs	r1, r3
    196a:	4541      	cmp	r1, r8
    196c:	bfa8      	it	ge
    196e:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    1970:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    1974:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    1976:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    1978:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    197c:	bfd4      	ite	le
    197e:	2100      	movle	r1, #0
    1980:	2101      	movgt	r1, #1
    1982:	f361 1045 	bfi	r0, r1, #5, #1
    1986:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    198a:	f1b8 0f00 	cmp.w	r8, #0
    198e:	dd02      	ble.n	1996 <cbvprintf+0xaee>
    1990:	9907      	ldr	r1, [sp, #28]
    1992:	2900      	cmp	r1, #0
    1994:	dc56      	bgt.n	1a44 <cbvprintf+0xb9c>
	if (prune_zero) {
    1996:	9903      	ldr	r1, [sp, #12]
    1998:	2900      	cmp	r1, #0
    199a:	d163      	bne.n	1a64 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    199c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    19a0:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    19a4:	2945      	cmp	r1, #69	; 0x45
    19a6:	d121      	bne.n	19ec <cbvprintf+0xb44>
		if (decexp < 0) {
    19a8:	2b00      	cmp	r3, #0
		*buf++ = c;
    19aa:	4629      	mov	r1, r5
			decexp = -decexp;
    19ac:	bfb8      	it	lt
    19ae:	425b      	neglt	r3, r3
		*buf++ = c;
    19b0:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    19b4:	bfb4      	ite	lt
    19b6:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    19b8:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    19ba:	2b63      	cmp	r3, #99	; 0x63
    19bc:	706a      	strb	r2, [r5, #1]
    19be:	dd09      	ble.n	19d4 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    19c0:	2064      	movs	r0, #100	; 0x64
    19c2:	fb93 f2f0 	sdiv	r2, r3, r0
    19c6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    19ca:	1ce9      	adds	r1, r5, #3
    19cc:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    19d0:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    19d4:	200a      	movs	r0, #10
    19d6:	460d      	mov	r5, r1
    19d8:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    19dc:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    19e0:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    19e4:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    19e6:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    19ea:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    19ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19ee:	2b00      	cmp	r3, #0
    19f0:	dc43      	bgt.n	1a7a <cbvprintf+0xbd2>
    19f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    19f4:	2b00      	cmp	r3, #0
    19f6:	bfd4      	ite	le
    19f8:	2300      	movle	r3, #0
    19fa:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    19fc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1a00:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1a04:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1a06:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    1a0a:	702b      	strb	r3, [r5, #0]
	return bps;
    1a0c:	e5f8      	b.n	1600 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    1a0e:	a907      	add	r1, sp, #28
    1a10:	a808      	add	r0, sp, #32
    1a12:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a16:	f003 fd6d 	bl	54f4 <_get_digit>
		if (*buf++ != '0') {
    1a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1a1e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    1a22:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    1a26:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1a28:	bf18      	it	ne
    1a2a:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1a2e:	0688      	lsls	r0, r1, #26
    1a30:	d402      	bmi.n	1a38 <cbvprintf+0xb90>
    1a32:	f1b8 0f00 	cmp.w	r8, #0
    1a36:	dd12      	ble.n	1a5e <cbvprintf+0xbb6>
			*buf++ = '.';
    1a38:	212e      	movs	r1, #46	; 0x2e
    1a3a:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    1a3e:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    1a42:	e7a2      	b.n	198a <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    1a44:	a907      	add	r1, sp, #28
    1a46:	a808      	add	r0, sp, #32
    1a48:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a4c:	f003 fd52 	bl	54f4 <_get_digit>
		precision--;
    1a50:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    1a58:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    1a5c:	e795      	b.n	198a <cbvprintf+0xae2>
		if (*buf++ != '0') {
    1a5e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1a62:	e798      	b.n	1996 <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    1a64:	2100      	movs	r1, #0
    1a66:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    1a68:	4628      	mov	r0, r5
    1a6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1a6e:	2930      	cmp	r1, #48	; 0x30
    1a70:	d0fa      	beq.n	1a68 <cbvprintf+0xbc0>
		if (*buf != '.') {
    1a72:	292e      	cmp	r1, #46	; 0x2e
    1a74:	bf18      	it	ne
    1a76:	4605      	movne	r5, r0
    1a78:	e792      	b.n	19a0 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    1a7a:	2301      	movs	r3, #1
    1a7c:	e7be      	b.n	19fc <cbvprintf+0xb54>
			bpe = bps + 5;
    1a7e:	4d4b      	ldr	r5, [pc, #300]	; (1bac <cbvprintf+0xd04>)
		char sign = 0;
    1a80:	4607      	mov	r7, r0
			bps = "(nil)";
    1a82:	1f6a      	subs	r2, r5, #5
    1a84:	e5bd      	b.n	1602 <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    1a86:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    1a88:	bf48      	it	mi
    1a8a:	3301      	addmi	r3, #1
    1a8c:	e5c2      	b.n	1614 <cbvprintf+0x76c>
					OUTC(pad);
    1a8e:	4651      	mov	r1, sl
    1a90:	4640      	mov	r0, r8
    1a92:	9203      	str	r2, [sp, #12]
    1a94:	47c8      	blx	r9
    1a96:	2800      	cmp	r0, #0
    1a98:	9a03      	ldr	r2, [sp, #12]
    1a9a:	f6bf addf 	bge.w	165c <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    1a9e:	b01b      	add	sp, #108	; 0x6c
    1aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1aa4:	f04f 0820 	mov.w	r8, #32
    1aa8:	e5d7      	b.n	165a <cbvprintf+0x7b2>
					pad = '0';
    1aaa:	f04f 0830 	mov.w	r8, #48	; 0x30
    1aae:	e5d4      	b.n	165a <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    1ab0:	4690      	mov	r8, r2
    1ab2:	9b03      	ldr	r3, [sp, #12]
    1ab4:	4647      	mov	r7, r8
    1ab6:	4443      	add	r3, r8
				while (*cp != 'p') {
    1ab8:	f818 0b01 	ldrb.w	r0, [r8], #1
    1abc:	2870      	cmp	r0, #112	; 0x70
    1abe:	d11e      	bne.n	1afe <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    1ac0:	461e      	mov	r6, r3
    1ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1ac4:	eb03 0806 	add.w	r8, r3, r6
    1ac8:	eba8 0306 	sub.w	r3, r8, r6
    1acc:	2b00      	cmp	r3, #0
    1ace:	dc3b      	bgt.n	1b48 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    1ad0:	462b      	mov	r3, r5
    1ad2:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    1ad4:	4651      	mov	r1, sl
    1ad6:	4648      	mov	r0, r9
    1ad8:	f003 fd69 	bl	55ae <outs>
    1adc:	2800      	cmp	r0, #0
    1ade:	dbde      	blt.n	1a9e <cbvprintf+0xbf6>
    1ae0:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    1ae2:	4606      	mov	r6, r0
    1ae4:	4483      	add	fp, r0
		while (width > 0) {
    1ae6:	ebab 0306 	sub.w	r3, fp, r6
    1aea:	2b00      	cmp	r3, #0
    1aec:	f77f ac41 	ble.w	1372 <cbvprintf+0x4ca>
			OUTC(' ');
    1af0:	4651      	mov	r1, sl
    1af2:	2020      	movs	r0, #32
    1af4:	47c8      	blx	r9
    1af6:	2800      	cmp	r0, #0
    1af8:	dbd1      	blt.n	1a9e <cbvprintf+0xbf6>
    1afa:	3601      	adds	r6, #1
			--width;
    1afc:	e7f3      	b.n	1ae6 <cbvprintf+0xc3e>
					OUTC(*cp++);
    1afe:	4651      	mov	r1, sl
    1b00:	47c8      	blx	r9
    1b02:	2800      	cmp	r0, #0
    1b04:	dad5      	bge.n	1ab2 <cbvprintf+0xc0a>
    1b06:	e7ca      	b.n	1a9e <cbvprintf+0xbf6>
					OUTC(*cp++);
    1b08:	4651      	mov	r1, sl
    1b0a:	47c8      	blx	r9
    1b0c:	2800      	cmp	r0, #0
    1b0e:	f6bf adc6 	bge.w	169e <cbvprintf+0x7f6>
    1b12:	e7c4      	b.n	1a9e <cbvprintf+0xbf6>
						OUTC('0');
    1b14:	4651      	mov	r1, sl
    1b16:	2030      	movs	r0, #48	; 0x30
    1b18:	47c8      	blx	r9
    1b1a:	2800      	cmp	r0, #0
    1b1c:	f6bf add1 	bge.w	16c2 <cbvprintf+0x81a>
    1b20:	e7bd      	b.n	1a9e <cbvprintf+0xbf6>
						OUTC('0');
    1b22:	4651      	mov	r1, sl
    1b24:	2030      	movs	r0, #48	; 0x30
    1b26:	47c8      	blx	r9
    1b28:	3f01      	subs	r7, #1
    1b2a:	e5d8      	b.n	16de <cbvprintf+0x836>
					OUTC(*cp++);
    1b2c:	4651      	mov	r1, sl
    1b2e:	47c8      	blx	r9
    1b30:	2800      	cmp	r0, #0
    1b32:	dbb4      	blt.n	1a9e <cbvprintf+0xbf6>
    1b34:	4647      	mov	r7, r8
    1b36:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    1b3a:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1b3e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1b42:	2a09      	cmp	r2, #9
    1b44:	d9f2      	bls.n	1b2c <cbvprintf+0xc84>
    1b46:	e7bb      	b.n	1ac0 <cbvprintf+0xc18>
				OUTC('0');
    1b48:	4651      	mov	r1, sl
    1b4a:	2030      	movs	r0, #48	; 0x30
    1b4c:	47c8      	blx	r9
    1b4e:	2800      	cmp	r0, #0
    1b50:	dba5      	blt.n	1a9e <cbvprintf+0xbf6>
    1b52:	3601      	adds	r6, #1
    1b54:	e7b8      	b.n	1ac8 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    1b56:	06d8      	lsls	r0, r3, #27
    1b58:	d401      	bmi.n	1b5e <cbvprintf+0xcb6>
    1b5a:	0719      	lsls	r1, r3, #28
    1b5c:	d507      	bpl.n	1b6e <cbvprintf+0xcc6>
				OUTC('0');
    1b5e:	4651      	mov	r1, sl
    1b60:	2030      	movs	r0, #48	; 0x30
    1b62:	9203      	str	r2, [sp, #12]
    1b64:	47c8      	blx	r9
    1b66:	2800      	cmp	r0, #0
    1b68:	db99      	blt.n	1a9e <cbvprintf+0xbf6>
    1b6a:	9a03      	ldr	r2, [sp, #12]
    1b6c:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1b6e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1b72:	06db      	lsls	r3, r3, #27
    1b74:	d508      	bpl.n	1b88 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    1b76:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1b7a:	9203      	str	r2, [sp, #12]
    1b7c:	4651      	mov	r1, sl
    1b7e:	47c8      	blx	r9
    1b80:	2800      	cmp	r0, #0
    1b82:	db8c      	blt.n	1a9e <cbvprintf+0xbf6>
    1b84:	9a03      	ldr	r2, [sp, #12]
    1b86:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1b88:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1b8a:	4437      	add	r7, r6
    1b8c:	1bbb      	subs	r3, r7, r6
    1b8e:	2b00      	cmp	r3, #0
    1b90:	dc01      	bgt.n	1b96 <cbvprintf+0xcee>
			OUTS(bps, bpe);
    1b92:	462b      	mov	r3, r5
    1b94:	e79e      	b.n	1ad4 <cbvprintf+0xc2c>
				OUTC('0');
    1b96:	4651      	mov	r1, sl
    1b98:	2030      	movs	r0, #48	; 0x30
    1b9a:	9203      	str	r2, [sp, #12]
    1b9c:	47c8      	blx	r9
    1b9e:	2800      	cmp	r0, #0
    1ba0:	f6ff af7d 	blt.w	1a9e <cbvprintf+0xbf6>
    1ba4:	9a03      	ldr	r2, [sp, #12]
    1ba6:	3601      	adds	r6, #1
    1ba8:	e7f0      	b.n	1b8c <cbvprintf+0xce4>
    1baa:	bf00      	nop
    1bac:	00006d52 	.word	0x00006d52

00001bb0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bb2:	4605      	mov	r5, r0
    1bb4:	f04f 0320 	mov.w	r3, #32
    1bb8:	f3ef 8611 	mrs	r6, BASEPRI
    1bbc:	f383 8812 	msr	BASEPRI_MAX, r3
    1bc0:	f3bf 8f6f 	isb	sy
	return list->head;
    1bc4:	4b09      	ldr	r3, [pc, #36]	; (1bec <pm_state_notify+0x3c>)
    1bc6:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1bc8:	b15c      	cbz	r4, 1be2 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    1bca:	4f09      	ldr	r7, [pc, #36]	; (1bf0 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    1bcc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1bd0:	2d00      	cmp	r5, #0
    1bd2:	bf08      	it	eq
    1bd4:	4613      	moveq	r3, r2
		if (callback) {
    1bd6:	b10b      	cbz	r3, 1bdc <pm_state_notify+0x2c>
			callback(z_power_state.state);
    1bd8:	7838      	ldrb	r0, [r7, #0]
    1bda:	4798      	blx	r3
	return node->next;
    1bdc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1bde:	2c00      	cmp	r4, #0
    1be0:	d1f4      	bne.n	1bcc <pm_state_notify+0x1c>
	__asm__ volatile(
    1be2:	f386 8811 	msr	BASEPRI, r6
    1be6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bec:	200003a0 	.word	0x200003a0
    1bf0:	200003a8 	.word	0x200003a8

00001bf4 <pm_system_resume>:

void pm_system_resume(void)
{
    1bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    1bf6:	4b0f      	ldr	r3, [pc, #60]	; (1c34 <pm_system_resume+0x40>)
    1bf8:	681a      	ldr	r2, [r3, #0]
    1bfa:	b9ba      	cbnz	r2, 1c2c <pm_system_resume+0x38>
		post_ops_done = 1;
    1bfc:	2201      	movs	r2, #1
    1bfe:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    1c00:	4a0d      	ldr	r2, [pc, #52]	; (1c38 <pm_system_resume+0x44>)
    1c02:	ca07      	ldmia	r2, {r0, r1, r2}
    1c04:	ab01      	add	r3, sp, #4
    1c06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1c0a:	4a0c      	ldr	r2, [pc, #48]	; (1c3c <pm_system_resume+0x48>)
    1c0c:	b14a      	cbz	r2, 1c22 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    1c0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1c12:	f003 fd49 	bl	56a8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1c16:	2000      	movs	r0, #0
	}
}
    1c18:	b005      	add	sp, #20
    1c1a:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    1c1e:	f7ff bfc7 	b.w	1bb0 <pm_state_notify>
    1c22:	f382 8811 	msr	BASEPRI, r2
    1c26:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1c2a:	e7f4      	b.n	1c16 <pm_system_resume+0x22>
}
    1c2c:	b005      	add	sp, #20
    1c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c32:	bf00      	nop
    1c34:	20000004 	.word	0x20000004
    1c38:	200003a8 	.word	0x200003a8
    1c3c:	000056a9 	.word	0x000056a9

00001c40 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    1c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c42:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    1c44:	466e      	mov	r6, sp
    1c46:	4601      	mov	r1, r0
{
    1c48:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    1c4a:	4630      	mov	r0, r6
    1c4c:	f003 fcc6 	bl	55dc <pm_policy_next_state>
    1c50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1c54:	4c17      	ldr	r4, [pc, #92]	; (1cb4 <pm_system_suspend+0x74>)
    1c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    1c5a:	7820      	ldrb	r0, [r4, #0]
    1c5c:	4627      	mov	r7, r4
    1c5e:	b338      	cbz	r0, 1cb0 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    1c60:	4b15      	ldr	r3, [pc, #84]	; (1cb8 <pm_system_suspend+0x78>)
    1c62:	2100      	movs	r1, #0
    1c64:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    1c66:	1c6b      	adds	r3, r5, #1
    1c68:	d00d      	beq.n	1c86 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1c6a:	4814      	ldr	r0, [pc, #80]	; (1cbc <pm_system_suspend+0x7c>)
    1c6c:	4616      	mov	r6, r2
    1c6e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1c72:	4a13      	ldr	r2, [pc, #76]	; (1cc0 <pm_system_suspend+0x80>)
    1c74:	2300      	movs	r3, #0
    1c76:	fbe6 010c 	umlal	r0, r1, r6, ip
    1c7a:	f7fe fdff 	bl	87c <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1c7e:	2101      	movs	r1, #1
    1c80:	1a28      	subs	r0, r5, r0
    1c82:	f004 fc59 	bl	6538 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1c86:	f002 fea5 	bl	49d4 <k_sched_lock>
	pm_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    1c8a:	2001      	movs	r0, #1
    1c8c:	f7ff ff90 	bl	1bb0 <pm_state_notify>
	pm_state_set(z_power_state);
    1c90:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    1c94:	ab05      	add	r3, sp, #20
    1c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1c9a:	4a0a      	ldr	r2, [pc, #40]	; (1cc4 <pm_system_suspend+0x84>)
    1c9c:	b11a      	cbz	r2, 1ca6 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    1c9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1ca2:	f003 fcee 	bl	5682 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_state.state);
	pm_system_resume();
    1ca6:	f7ff ffa5 	bl	1bf4 <pm_system_resume>
	k_sched_unlock();
    1caa:	f003 f819 	bl	4ce0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    1cae:	7820      	ldrb	r0, [r4, #0]
}
    1cb0:	b009      	add	sp, #36	; 0x24
    1cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cb4:	200003a8 	.word	0x200003a8
    1cb8:	20000004 	.word	0x20000004
    1cbc:	000f423f 	.word	0x000f423f
    1cc0:	000f4240 	.word	0x000f4240
    1cc4:	00005683 	.word	0x00005683

00001cc8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1cc8:	4901      	ldr	r1, [pc, #4]	; (1cd0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1cca:	2210      	movs	r2, #16
	str	r2, [r1]
    1ccc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1cce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1cd0:	e000ed10 	.word	0xe000ed10

00001cd4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1cd4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1cd6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1cd8:	f380 8811 	msr	BASEPRI, r0
	isb
    1cdc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1ce0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1ce4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ce6:	b662      	cpsie	i
	isb
    1ce8:	f3bf 8f6f 	isb	sy

	bx	lr
    1cec:	4770      	bx	lr
    1cee:	bf00      	nop

00001cf0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1cf0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1cf2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1cf4:	f381 8811 	msr	BASEPRI, r1

	wfe
    1cf8:	bf20      	wfe

	msr	BASEPRI, r0
    1cfa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1cfe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1d00:	4770      	bx	lr
    1d02:	bf00      	nop

00001d04 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1d04:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1d06:	2b00      	cmp	r3, #0
    1d08:	db08      	blt.n	1d1c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d0a:	2201      	movs	r2, #1
    1d0c:	f000 001f 	and.w	r0, r0, #31
    1d10:	fa02 f000 	lsl.w	r0, r2, r0
    1d14:	095b      	lsrs	r3, r3, #5
    1d16:	4a02      	ldr	r2, [pc, #8]	; (1d20 <arch_irq_enable+0x1c>)
    1d18:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1d1c:	4770      	bx	lr
    1d1e:	bf00      	nop
    1d20:	e000e100 	.word	0xe000e100

00001d24 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1d24:	4b05      	ldr	r3, [pc, #20]	; (1d3c <arch_irq_is_enabled+0x18>)
    1d26:	0942      	lsrs	r2, r0, #5
    1d28:	f000 001f 	and.w	r0, r0, #31
    1d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1d30:	2301      	movs	r3, #1
    1d32:	fa03 f000 	lsl.w	r0, r3, r0
}
    1d36:	4010      	ands	r0, r2
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	e000e100 	.word	0xe000e100

00001d40 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1d40:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1d42:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d44:	bfa8      	it	ge
    1d46:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1d4a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d4e:	bfb8      	it	lt
    1d50:	4b06      	ldrlt	r3, [pc, #24]	; (1d6c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d52:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1d56:	bfac      	ite	ge
    1d58:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d5c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d60:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d62:	bfb4      	ite	lt
    1d64:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d66:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1d6a:	4770      	bx	lr
    1d6c:	e000ed14 	.word	0xe000ed14

00001d70 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1d70:	bf30      	wfi
    b z_SysNmiOnReset
    1d72:	f7ff bffd 	b.w	1d70 <z_SysNmiOnReset>
    1d76:	bf00      	nop

00001d78 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1d78:	4a0f      	ldr	r2, [pc, #60]	; (1db8 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1d7a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1d7c:	4b0f      	ldr	r3, [pc, #60]	; (1dbc <z_arm_prep_c+0x44>)
    1d7e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1d82:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1d84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d88:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1d90:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1d98:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1d9c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1da0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    1da4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1da8:	f002 fad4 	bl	4354 <z_bss_zero>
	z_data_copy();
    1dac:	f003 f8dc 	bl	4f68 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1db0:	f000 f9ca 	bl	2148 <z_arm_interrupt_init>
	z_cstart();
    1db4:	f002 fad8 	bl	4368 <z_cstart>
    1db8:	00000000 	.word	0x00000000
    1dbc:	e000ed00 	.word	0xe000ed00

00001dc0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1dc0:	4a09      	ldr	r2, [pc, #36]	; (1de8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1dc2:	490a      	ldr	r1, [pc, #40]	; (1dec <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1dc4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1dc6:	6809      	ldr	r1, [r1, #0]
    1dc8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1dca:	4909      	ldr	r1, [pc, #36]	; (1df0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1dcc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1dce:	684b      	ldr	r3, [r1, #4]
    1dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1dd4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1dd6:	2300      	movs	r3, #0
    1dd8:	f383 8811 	msr	BASEPRI, r3
    1ddc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1de0:	6893      	ldr	r3, [r2, #8]
}
    1de2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1de4:	4770      	bx	lr
    1de6:	bf00      	nop
    1de8:	2000060c 	.word	0x2000060c
    1dec:	00006b50 	.word	0x00006b50
    1df0:	e000ed00 	.word	0xe000ed00

00001df4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1df4:	4912      	ldr	r1, [pc, #72]	; (1e40 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1df6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1df8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1dfc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1dfe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1e02:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e06:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1e08:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1e0c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1e10:	4f0c      	ldr	r7, [pc, #48]	; (1e44 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1e12:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1e16:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1e18:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1e1a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1e1c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1e1e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1e20:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1e22:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1e26:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1e28:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1e2a:	f000 f9cf 	bl	21cc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1e2e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1e32:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1e36:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1e3a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1e3e:	4770      	bx	lr
    ldr r1, =_kernel
    1e40:	2000060c 	.word	0x2000060c
    ldr v4, =_SCS_ICSR
    1e44:	e000ed04 	.word	0xe000ed04

00001e48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1e48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1e4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1e4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1e52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1e56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1e58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1e5c:	2902      	cmp	r1, #2
    beq _oops
    1e5e:	d0ff      	beq.n	1e60 <_oops>

00001e60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1e60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1e62:	f003 fbc2 	bl	55ea <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1e66:	bd01      	pop	{r0, pc}

00001e68 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1e68:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1e6c:	9b00      	ldr	r3, [sp, #0]
    1e6e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1e72:	490a      	ldr	r1, [pc, #40]	; (1e9c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1e74:	9b01      	ldr	r3, [sp, #4]
    1e76:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1e7a:	9b02      	ldr	r3, [sp, #8]
    1e7c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1e80:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1e88:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1e8c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1e90:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1e92:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1e94:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1e96:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop
    1e9c:	000054b1 	.word	0x000054b1

00001ea0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1ea0:	4a09      	ldr	r2, [pc, #36]	; (1ec8 <z_check_thread_stack_fail+0x28>)
{
    1ea2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1ea4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1ea6:	b170      	cbz	r0, 1ec6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1ea8:	f113 0f16 	cmn.w	r3, #22
    1eac:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1eae:	d005      	beq.n	1ebc <z_check_thread_stack_fail+0x1c>
    1eb0:	f1a0 0220 	sub.w	r2, r0, #32
    1eb4:	429a      	cmp	r2, r3
    1eb6:	d805      	bhi.n	1ec4 <z_check_thread_stack_fail+0x24>
    1eb8:	4283      	cmp	r3, r0
    1eba:	d203      	bcs.n	1ec4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1ebc:	4281      	cmp	r1, r0
    1ebe:	bf28      	it	cs
    1ec0:	2000      	movcs	r0, #0
    1ec2:	4770      	bx	lr
    1ec4:	2000      	movs	r0, #0
}
    1ec6:	4770      	bx	lr
    1ec8:	2000060c 	.word	0x2000060c

00001ecc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1ecc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1ece:	4b09      	ldr	r3, [pc, #36]	; (1ef4 <arch_switch_to_main_thread+0x28>)
    1ed0:	6098      	str	r0, [r3, #8]
{
    1ed2:	460d      	mov	r5, r1
    1ed4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1ed6:	f000 f979 	bl	21cc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1eda:	4620      	mov	r0, r4
    1edc:	f385 8809 	msr	PSP, r5
    1ee0:	2100      	movs	r1, #0
    1ee2:	b663      	cpsie	if
    1ee4:	f381 8811 	msr	BASEPRI, r1
    1ee8:	f3bf 8f6f 	isb	sy
    1eec:	2200      	movs	r2, #0
    1eee:	2300      	movs	r3, #0
    1ef0:	f003 fade 	bl	54b0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1ef4:	2000060c 	.word	0x2000060c

00001ef8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1ef8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1efa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1efc:	4a0b      	ldr	r2, [pc, #44]	; (1f2c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1efe:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1f00:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1f02:	bf1e      	ittt	ne
	movne	r1, #0
    1f04:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1f06:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1f08:	f004 f9d0 	blne	62ac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1f0c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1f0e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1f12:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1f16:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1f1a:	4905      	ldr	r1, [pc, #20]	; (1f30 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1f1c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1f1e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1f20:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1f22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1f26:	4903      	ldr	r1, [pc, #12]	; (1f34 <_isr_wrapper+0x3c>)
	bx r1
    1f28:	4708      	bx	r1
    1f2a:	0000      	.short	0x0000
	ldr r2, =_kernel
    1f2c:	2000060c 	.word	0x2000060c
	ldr r1, =_sw_isr_table
    1f30:	00006788 	.word	0x00006788
	ldr r1, =z_arm_int_exit
    1f34:	00001f39 	.word	0x00001f39

00001f38 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1f38:	4b04      	ldr	r3, [pc, #16]	; (1f4c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1f3a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1f3c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1f3e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1f40:	d003      	beq.n	1f4a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1f42:	4903      	ldr	r1, [pc, #12]	; (1f50 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1f48:	600a      	str	r2, [r1, #0]

00001f4a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1f4a:	4770      	bx	lr
	ldr r3, =_kernel
    1f4c:	2000060c 	.word	0x2000060c
	ldr r1, =_SCS_ICSR
    1f50:	e000ed04 	.word	0xe000ed04

00001f54 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1f54:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1f56:	4b19      	ldr	r3, [pc, #100]	; (1fbc <mem_manage_fault+0x68>)
{
    1f58:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1f60:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1f62:	0790      	lsls	r0, r2, #30
    1f64:	d519      	bpl.n	1f9a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1f66:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f6a:	0612      	lsls	r2, r2, #24
    1f6c:	d515      	bpl.n	1f9a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1f6e:	b119      	cbz	r1, 1f78 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1f76:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f7e:	06d1      	lsls	r1, r2, #27
    1f80:	d40e      	bmi.n	1fa0 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f84:	079a      	lsls	r2, r3, #30
    1f86:	d40b      	bmi.n	1fa0 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f88:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1f8a:	4a0c      	ldr	r2, [pc, #48]	; (1fbc <mem_manage_fault+0x68>)
    1f8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f8e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f92:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1f94:	2300      	movs	r3, #0
    1f96:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1f98:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1f9a:	f06f 0015 	mvn.w	r0, #21
    1f9e:	e7eb      	b.n	1f78 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1fa0:	4b06      	ldr	r3, [pc, #24]	; (1fbc <mem_manage_fault+0x68>)
    1fa2:	685b      	ldr	r3, [r3, #4]
    1fa4:	051b      	lsls	r3, r3, #20
    1fa6:	d5ef      	bpl.n	1f88 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1fa8:	4629      	mov	r1, r5
    1faa:	f7ff ff79 	bl	1ea0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1fae:	2800      	cmp	r0, #0
    1fb0:	d0ea      	beq.n	1f88 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1fb2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1fb6:	2002      	movs	r0, #2
    1fb8:	e7e7      	b.n	1f8a <mem_manage_fault+0x36>
    1fba:	bf00      	nop
    1fbc:	e000ed00 	.word	0xe000ed00

00001fc0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1fc0:	4b0d      	ldr	r3, [pc, #52]	; (1ff8 <bus_fault.constprop.0+0x38>)
    1fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fc8:	0592      	lsls	r2, r2, #22
    1fca:	d508      	bpl.n	1fde <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fd0:	0412      	lsls	r2, r2, #16
    1fd2:	d504      	bpl.n	1fde <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1fd4:	b118      	cbz	r0, 1fde <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1fdc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1fde:	4b06      	ldr	r3, [pc, #24]	; (1ff8 <bus_fault.constprop.0+0x38>)
    1fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fe4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1fe6:	bf58      	it	pl
    1fe8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1fec:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1fee:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1ff2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1ff4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1ff6:	4770      	bx	lr
    1ff8:	e000ed00 	.word	0xe000ed00

00001ffc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1ffc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ffe:	4b48      	ldr	r3, [pc, #288]	; (2120 <z_arm_fault+0x124>)
    2000:	685b      	ldr	r3, [r3, #4]
{
    2002:	b08a      	sub	sp, #40	; 0x28
    2004:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2006:	f3c3 0308 	ubfx	r3, r3, #0, #9
    200a:	2600      	movs	r6, #0
    200c:	f386 8811 	msr	BASEPRI, r6
    2010:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2014:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    2018:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    201c:	d111      	bne.n	2042 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    201e:	f002 010c 	and.w	r1, r2, #12
    2022:	2908      	cmp	r1, #8
    2024:	d00d      	beq.n	2042 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2026:	0711      	lsls	r1, r2, #28
    2028:	d401      	bmi.n	202e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    202a:	4605      	mov	r5, r0
			*nested_exc = true;
    202c:	2601      	movs	r6, #1
	*recoverable = false;
    202e:	2200      	movs	r2, #0
	switch (fault) {
    2030:	3b03      	subs	r3, #3
	*recoverable = false;
    2032:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2036:	2b03      	cmp	r3, #3
    2038:	d86b      	bhi.n	2112 <z_arm_fault+0x116>
    203a:	e8df f003 	tbb	[pc, r3]
    203e:	5504      	.short	0x5504
    2040:	5d59      	.short	0x5d59
		return NULL;
    2042:	4635      	mov	r5, r6
    2044:	e7f3      	b.n	202e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2046:	4b36      	ldr	r3, [pc, #216]	; (2120 <z_arm_fault+0x124>)
    2048:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    204a:	f014 0402 	ands.w	r4, r4, #2
    204e:	d160      	bne.n	2112 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2052:	2a00      	cmp	r2, #0
    2054:	db15      	blt.n	2082 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2058:	0052      	lsls	r2, r2, #1
    205a:	d512      	bpl.n	2082 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    205c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    205e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    2062:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2066:	4291      	cmp	r1, r2
    2068:	d00a      	beq.n	2080 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    206a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    206e:	b30a      	cbz	r2, 20b4 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    2070:	f10d 0207 	add.w	r2, sp, #7
    2074:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2076:	4628      	mov	r0, r5
    2078:	f7ff ff6c 	bl	1f54 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    207c:	4604      	mov	r4, r0
		break;
    207e:	e000      	b.n	2082 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    2080:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2082:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2086:	b99b      	cbnz	r3, 20b0 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2088:	2220      	movs	r2, #32
    208a:	4629      	mov	r1, r5
    208c:	a802      	add	r0, sp, #8
    208e:	f003 fae1 	bl	5654 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2092:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2094:	2e00      	cmp	r6, #0
    2096:	d03e      	beq.n	2116 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2098:	f3c3 0208 	ubfx	r2, r3, #0, #9
    209c:	b922      	cbnz	r2, 20a8 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    209e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    20a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    20a6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    20a8:	a902      	add	r1, sp, #8
    20aa:	4620      	mov	r0, r4
    20ac:	f003 fa9b 	bl	55e6 <z_arm_fatal_error>
}
    20b0:	b00a      	add	sp, #40	; 0x28
    20b2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    20b4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    20b8:	b12a      	cbz	r2, 20c6 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    20ba:	f10d 0107 	add.w	r1, sp, #7
    20be:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    20c0:	f7ff ff7e 	bl	1fc0 <bus_fault.constprop.0>
    20c4:	e7da      	b.n	207c <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    20c6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    20c8:	b292      	uxth	r2, r2
    20ca:	2a00      	cmp	r2, #0
    20cc:	d0d9      	beq.n	2082 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    20ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    20d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    20d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    20d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    20d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    20d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    20da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20dc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    20e0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    20e4:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    20e6:	e7cc      	b.n	2082 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    20e8:	f10d 0207 	add.w	r2, sp, #7
    20ec:	2100      	movs	r1, #0
    20ee:	e7c2      	b.n	2076 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    20f0:	f10d 0107 	add.w	r1, sp, #7
    20f4:	2000      	movs	r0, #0
    20f6:	e7e3      	b.n	20c0 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    20f8:	4b09      	ldr	r3, [pc, #36]	; (2120 <z_arm_fault+0x124>)
    20fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    20fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    20fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2108:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    210c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2110:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2112:	2400      	movs	r4, #0
    2114:	e7b5      	b.n	2082 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2116:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    211a:	f023 0301 	bic.w	r3, r3, #1
    211e:	e7c2      	b.n	20a6 <z_arm_fault+0xaa>
    2120:	e000ed00 	.word	0xe000ed00

00002124 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2124:	4a02      	ldr	r2, [pc, #8]	; (2130 <z_arm_fault_init+0xc>)
    2126:	6953      	ldr	r3, [r2, #20]
    2128:	f043 0310 	orr.w	r3, r3, #16
    212c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    212e:	4770      	bx	lr
    2130:	e000ed00 	.word	0xe000ed00

00002134 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2134:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2138:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    213c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    213e:	4672      	mov	r2, lr
	bl z_arm_fault
    2140:	f7ff ff5c 	bl	1ffc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2144:	bd01      	pop	{r0, pc}
    2146:	bf00      	nop

00002148 <z_arm_interrupt_init>:
    2148:	4804      	ldr	r0, [pc, #16]	; (215c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    214a:	2300      	movs	r3, #0
    214c:	2120      	movs	r1, #32
    214e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2150:	3301      	adds	r3, #1
    2152:	2b27      	cmp	r3, #39	; 0x27
    2154:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2158:	d1f9      	bne.n	214e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    215a:	4770      	bx	lr
    215c:	e000e100 	.word	0xe000e100

00002160 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2160:	f004 fa0c 	bl	657c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2164:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2166:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    216a:	4808      	ldr	r0, [pc, #32]	; (218c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    216c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2170:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2172:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2176:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    217a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    217c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    217e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2182:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2186:	f7ff fdf7 	bl	1d78 <z_arm_prep_c>
    218a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    218c:	20001020 	.word	0x20001020

00002190 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2190:	4b06      	ldr	r3, [pc, #24]	; (21ac <z_impl_k_thread_abort+0x1c>)
    2192:	689b      	ldr	r3, [r3, #8]
    2194:	4283      	cmp	r3, r0
    2196:	d107      	bne.n	21a8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2198:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    219c:	b123      	cbz	r3, 21a8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    219e:	4a04      	ldr	r2, [pc, #16]	; (21b0 <z_impl_k_thread_abort+0x20>)
    21a0:	6853      	ldr	r3, [r2, #4]
    21a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21a6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    21a8:	f002 be7a 	b.w	4ea0 <z_thread_abort>
    21ac:	2000060c 	.word	0x2000060c
    21b0:	e000ed00 	.word	0xe000ed00

000021b4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    21b4:	4b02      	ldr	r3, [pc, #8]	; (21c0 <z_arm_configure_static_mpu_regions+0xc>)
    21b6:	4a03      	ldr	r2, [pc, #12]	; (21c4 <z_arm_configure_static_mpu_regions+0x10>)
    21b8:	4803      	ldr	r0, [pc, #12]	; (21c8 <z_arm_configure_static_mpu_regions+0x14>)
    21ba:	2101      	movs	r1, #1
    21bc:	f000 b86e 	b.w	229c <arm_core_mpu_configure_static_mpu_regions>
    21c0:	20010000 	.word	0x20010000
    21c4:	20000000 	.word	0x20000000
    21c8:	00006938 	.word	0x00006938

000021cc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    21cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    21d0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    21d2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    21d4:	4a04      	ldr	r2, [pc, #16]	; (21e8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    21d6:	2120      	movs	r1, #32
    21d8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    21dc:	4618      	mov	r0, r3
    21de:	2101      	movs	r1, #1
    21e0:	f000 b866 	b.w	22b0 <arm_core_mpu_configure_dynamic_mpu_regions>
    21e4:	200003b4 	.word	0x200003b4
    21e8:	150b0000 	.word	0x150b0000

000021ec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    21ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    21ee:	4f1f      	ldr	r7, [pc, #124]	; (226c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    21f0:	2600      	movs	r6, #0
    21f2:	428e      	cmp	r6, r1
    21f4:	db01      	blt.n	21fa <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    21f6:	4610      	mov	r0, r2
    21f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    21fa:	6844      	ldr	r4, [r0, #4]
    21fc:	b39c      	cbz	r4, 2266 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    21fe:	b153      	cbz	r3, 2216 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2200:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2204:	ea14 0f0c 	tst.w	r4, ip
    2208:	d118      	bne.n	223c <mpu_configure_regions+0x50>
		&&
    220a:	2c1f      	cmp	r4, #31
    220c:	d916      	bls.n	223c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    220e:	6805      	ldr	r5, [r0, #0]
		&&
    2210:	ea1c 0f05 	tst.w	ip, r5
    2214:	d112      	bne.n	223c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2216:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2218:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    221a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    221e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2220:	d90f      	bls.n	2242 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    2222:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2226:	d80e      	bhi.n	2246 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2228:	3c01      	subs	r4, #1
    222a:	fab4 f484 	clz	r4, r4
    222e:	f1c4 041f 	rsb	r4, r4, #31
    2232:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2234:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2236:	ea4c 0404 	orr.w	r4, ip, r4
    223a:	d906      	bls.n	224a <mpu_configure_regions+0x5e>
			return -EINVAL;
    223c:	f06f 0215 	mvn.w	r2, #21
    2240:	e7d9      	b.n	21f6 <mpu_configure_regions+0xa>
		return REGION_32B;
    2242:	2408      	movs	r4, #8
    2244:	e7f6      	b.n	2234 <mpu_configure_regions+0x48>
		return REGION_4G;
    2246:	243e      	movs	r4, #62	; 0x3e
    2248:	e7f4      	b.n	2234 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    224a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    224e:	4315      	orrs	r5, r2
    2250:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2254:	f044 0401 	orr.w	r4, r4, #1
    2258:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    225c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    2260:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2262:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2266:	3601      	adds	r6, #1
    2268:	300c      	adds	r0, #12
    226a:	e7c2      	b.n	21f2 <mpu_configure_regions+0x6>
    226c:	e000ed00 	.word	0xe000ed00

00002270 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2270:	4b04      	ldr	r3, [pc, #16]	; (2284 <arm_core_mpu_enable+0x14>)
    2272:	2205      	movs	r2, #5
    2274:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    227c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2280:	4770      	bx	lr
    2282:	bf00      	nop
    2284:	e000ed00 	.word	0xe000ed00

00002288 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2288:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    228c:	4b02      	ldr	r3, [pc, #8]	; (2298 <arm_core_mpu_disable+0x10>)
    228e:	2200      	movs	r2, #0
    2290:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	e000ed00 	.word	0xe000ed00

0000229c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    229c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    229e:	4c03      	ldr	r4, [pc, #12]	; (22ac <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    22a0:	2301      	movs	r3, #1
    22a2:	7822      	ldrb	r2, [r4, #0]
    22a4:	f7ff ffa2 	bl	21ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22a8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    22aa:	bd10      	pop	{r4, pc}
    22ac:	2000064c 	.word	0x2000064c

000022b0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    22b0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    22b2:	4a09      	ldr	r2, [pc, #36]	; (22d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    22b4:	2300      	movs	r3, #0
    22b6:	7812      	ldrb	r2, [r2, #0]
    22b8:	f7ff ff98 	bl	21ec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    22bc:	f110 0f16 	cmn.w	r0, #22
    22c0:	d002      	beq.n	22c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    22c2:	4a06      	ldr	r2, [pc, #24]	; (22dc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    22c4:	2807      	cmp	r0, #7
    22c6:	dd00      	ble.n	22ca <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    22c8:	bd08      	pop	{r3, pc}
    22ca:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    22ce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    22d2:	3001      	adds	r0, #1
    22d4:	e7f6      	b.n	22c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    22d6:	bf00      	nop
    22d8:	2000064c 	.word	0x2000064c
    22dc:	e000ed00 	.word	0xe000ed00

000022e0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    22e0:	4914      	ldr	r1, [pc, #80]	; (2334 <z_arm_mpu_init+0x54>)
    22e2:	6808      	ldr	r0, [r1, #0]
    22e4:	2808      	cmp	r0, #8
{
    22e6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    22e8:	d821      	bhi.n	232e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    22ea:	f7ff ffcd 	bl	2288 <arm_core_mpu_disable>
    22ee:	4c12      	ldr	r4, [pc, #72]	; (2338 <z_arm_mpu_init+0x58>)
    22f0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    22f2:	2200      	movs	r2, #0
    22f4:	4290      	cmp	r0, r2
    22f6:	f101 010c 	add.w	r1, r1, #12
    22fa:	d105      	bne.n	2308 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    22fc:	4b0f      	ldr	r3, [pc, #60]	; (233c <z_arm_mpu_init+0x5c>)
    22fe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2300:	f7ff ffb6 	bl	2270 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2304:	2000      	movs	r0, #0
}
    2306:	bd10      	pop	{r4, pc}
    2308:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    230c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2310:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2314:	4313      	orrs	r3, r2
    2316:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    231a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    231e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2322:	f043 0301 	orr.w	r3, r3, #1
    2326:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    232a:	3201      	adds	r2, #1
    232c:	e7e2      	b.n	22f4 <z_arm_mpu_init+0x14>
		return -1;
    232e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2332:	e7e8      	b.n	2306 <z_arm_mpu_init+0x26>
    2334:	00006944 	.word	0x00006944
    2338:	e000ed00 	.word	0xe000ed00
    233c:	2000064c 	.word	0x2000064c

00002340 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2340:	4b01      	ldr	r3, [pc, #4]	; (2348 <__stdout_hook_install+0x8>)
    2342:	6018      	str	r0, [r3, #0]
}
    2344:	4770      	bx	lr
    2346:	bf00      	nop
    2348:	20000008 	.word	0x20000008

0000234c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    234c:	f04f 0220 	mov.w	r2, #32
    2350:	f3ef 8311 	mrs	r3, BASEPRI
    2354:	f382 8812 	msr	BASEPRI_MAX, r2
    2358:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    235c:	4a04      	ldr	r2, [pc, #16]	; (2370 <nordicsemi_nrf52_init+0x24>)
    235e:	2101      	movs	r1, #1
    2360:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2364:	f383 8811 	msr	BASEPRI, r3
    2368:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    236c:	2000      	movs	r0, #0
    236e:	4770      	bx	lr
    2370:	4001e000 	.word	0x4001e000

00002374 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2374:	b120      	cbz	r0, 2380 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2376:	4b03      	ldr	r3, [pc, #12]	; (2384 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2378:	0180      	lsls	r0, r0, #6
    237a:	f043 0301 	orr.w	r3, r3, #1
    237e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2380:	4770      	bx	lr
    2382:	bf00      	nop
    2384:	00006930 	.word	0x00006930

00002388 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    2388:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    238a:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    238c:	6820      	ldr	r0, [r4, #0]
    238e:	f001 ff71 	bl	4274 <z_impl_device_get_binding>
	if (!gpio) {
    2392:	b930      	cbnz	r0, 23a2 <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    2394:	480d      	ldr	r0, [pc, #52]	; (23cc <pwr_ctrl_init+0x44>)
    2396:	6821      	ldr	r1, [r4, #0]
    2398:	f002 ff81 	bl	529e <printk>
		return -ENODEV;
    239c:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    23a0:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    23a2:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    23a4:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    23a6:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    23a8:	b2c9      	uxtb	r1, r1
    23aa:	2301      	movs	r3, #1
    23ac:	fa03 f201 	lsl.w	r2, r3, r1
    23b0:	6823      	ldr	r3, [r4, #0]
    23b2:	ea23 0302 	bic.w	r3, r3, r2
    23b6:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    23b8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    23bc:	682b      	ldr	r3, [r5, #0]
    23be:	4798      	blx	r3
    23c0:	2021      	movs	r0, #33	; 0x21
    23c2:	2100      	movs	r1, #0
    23c4:	f002 fd3c 	bl	4e40 <z_impl_k_sleep>
	return 0;
    23c8:	2000      	movs	r0, #0
    23ca:	e7e9      	b.n	23a0 <pwr_ctrl_init+0x18>
    23cc:	00006d62 	.word	0x00006d62

000023d0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    23d0:	4b08      	ldr	r3, [pc, #32]	; (23f4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    23d2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    23d4:	1ac3      	subs	r3, r0, r3
{
    23d6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23d8:	4907      	ldr	r1, [pc, #28]	; (23f8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    23da:	109b      	asrs	r3, r3, #2
{
    23dc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23de:	4359      	muls	r1, r3
    23e0:	4806      	ldr	r0, [pc, #24]	; (23fc <onoff_stop+0x2c>)
    23e2:	2240      	movs	r2, #64	; 0x40
    23e4:	f003 f987 	bl	56f6 <stop>
	notify(mgr, res);
    23e8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23ea:	4601      	mov	r1, r0
	notify(mgr, res);
    23ec:	4620      	mov	r0, r4
}
    23ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    23f2:	4718      	bx	r3
    23f4:	200003d0 	.word	0x200003d0
    23f8:	b6db6db7 	.word	0xb6db6db7
    23fc:	00006620 	.word	0x00006620

00002400 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2400:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2402:	4c0c      	ldr	r4, [pc, #48]	; (2434 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2404:	4a0c      	ldr	r2, [pc, #48]	; (2438 <onoff_start+0x38>)
    2406:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2408:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    240a:	9300      	str	r3, [sp, #0]
{
    240c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    240e:	460b      	mov	r3, r1
    2410:	490a      	ldr	r1, [pc, #40]	; (243c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2412:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2414:	4361      	muls	r1, r4
{
    2416:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2418:	4809      	ldr	r0, [pc, #36]	; (2440 <onoff_start+0x40>)
    241a:	f003 f998 	bl	574e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    241e:	1e01      	subs	r1, r0, #0
    2420:	da05      	bge.n	242e <onoff_start+0x2e>
		notify(mgr, err);
    2422:	4630      	mov	r0, r6
    2424:	462b      	mov	r3, r5
	}
}
    2426:	b002      	add	sp, #8
    2428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    242c:	4718      	bx	r3
}
    242e:	b002      	add	sp, #8
    2430:	bd70      	pop	{r4, r5, r6, pc}
    2432:	bf00      	nop
    2434:	200003d0 	.word	0x200003d0
    2438:	000057bf 	.word	0x000057bf
    243c:	b6db6db7 	.word	0xb6db6db7
    2440:	00006620 	.word	0x00006620

00002444 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2444:	2200      	movs	r2, #0
{
    2446:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2448:	2101      	movs	r1, #1
{
    244a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    244c:	4610      	mov	r0, r2
    244e:	f7ff fc77 	bl	1d40 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2452:	2000      	movs	r0, #0
    2454:	f7ff fc56 	bl	1d04 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2458:	480f      	ldr	r0, [pc, #60]	; (2498 <clk_init+0x54>)
    245a:	f001 fa29 	bl	38b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    245e:	4b0f      	ldr	r3, [pc, #60]	; (249c <clk_init+0x58>)
    2460:	4298      	cmp	r0, r3
    2462:	d115      	bne.n	2490 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2464:	f003 fe51 	bl	610a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2468:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    246a:	490d      	ldr	r1, [pc, #52]	; (24a0 <clk_init+0x5c>)
    246c:	4630      	mov	r0, r6
    246e:	f002 ff72 	bl	5356 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2472:	2800      	cmp	r0, #0
    2474:	db0b      	blt.n	248e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    2476:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2478:	4909      	ldr	r1, [pc, #36]	; (24a0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    247a:	2501      	movs	r5, #1
    247c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    247e:	f104 001c 	add.w	r0, r4, #28
    2482:	f002 ff68 	bl	5356 <onoff_manager_init>
		if (err < 0) {
    2486:	2800      	cmp	r0, #0
    2488:	db01      	blt.n	248e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    248a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    248c:	2000      	movs	r0, #0
}
    248e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2490:	f06f 0004 	mvn.w	r0, #4
    2494:	e7fb      	b.n	248e <clk_init+0x4a>
    2496:	bf00      	nop
    2498:	000024d9 	.word	0x000024d9
    249c:	0bad0000 	.word	0x0bad0000
    24a0:	00006998 	.word	0x00006998

000024a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    24a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    24a6:	230c      	movs	r3, #12
    24a8:	4809      	ldr	r0, [pc, #36]	; (24d0 <clkstarted_handle.constprop.0+0x2c>)
    24aa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    24ac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    24ae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    24b0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    24b4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    24b6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    24b8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    24ba:	4418      	add	r0, r3
    24bc:	f003 f908 	bl	56d0 <set_on_state>
	if (callback) {
    24c0:	b12d      	cbz	r5, 24ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    24c2:	4632      	mov	r2, r6
    24c4:	462b      	mov	r3, r5
    24c6:	4803      	ldr	r0, [pc, #12]	; (24d4 <clkstarted_handle.constprop.0+0x30>)
}
    24c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    24cc:	4718      	bx	r3
}
    24ce:	bd70      	pop	{r4, r5, r6, pc}
    24d0:	200003d0 	.word	0x200003d0
    24d4:	00006620 	.word	0x00006620

000024d8 <clock_event_handler>:
	switch (event) {
    24d8:	b110      	cbz	r0, 24e0 <clock_event_handler+0x8>
    24da:	2801      	cmp	r0, #1
    24dc:	d004      	beq.n	24e8 <clock_event_handler+0x10>
    24de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    24e0:	4b03      	ldr	r3, [pc, #12]	; (24f0 <clock_event_handler+0x18>)
    24e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    24e4:	075b      	lsls	r3, r3, #29
    24e6:	d101      	bne.n	24ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    24e8:	f7ff bfdc 	b.w	24a4 <clkstarted_handle.constprop.0>
}
    24ec:	4770      	bx	lr
    24ee:	bf00      	nop
    24f0:	200003d0 	.word	0x200003d0

000024f4 <generic_hfclk_start>:
{
    24f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    24f6:	f04f 0320 	mov.w	r3, #32
    24fa:	f3ef 8111 	mrs	r1, BASEPRI
    24fe:	f383 8812 	msr	BASEPRI_MAX, r3
    2502:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2506:	4a12      	ldr	r2, [pc, #72]	; (2550 <generic_hfclk_start+0x5c>)
    2508:	6813      	ldr	r3, [r2, #0]
    250a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    250e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2512:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2514:	d00c      	beq.n	2530 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    251a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    251e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2522:	f013 0301 	ands.w	r3, r3, #1
    2526:	d003      	beq.n	2530 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2528:	480a      	ldr	r0, [pc, #40]	; (2554 <generic_hfclk_start+0x60>)
    252a:	f003 f8d1 	bl	56d0 <set_on_state>
			already_started = true;
    252e:	2301      	movs	r3, #1
	__asm__ volatile(
    2530:	f381 8811 	msr	BASEPRI, r1
    2534:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2538:	b123      	cbz	r3, 2544 <generic_hfclk_start+0x50>
}
    253a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    253e:	2000      	movs	r0, #0
    2540:	f7ff bfb0 	b.w	24a4 <clkstarted_handle.constprop.0>
}
    2544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2548:	2001      	movs	r0, #1
    254a:	f001 b9c1 	b.w	38d0 <nrfx_clock_start>
    254e:	bf00      	nop
    2550:	20000420 	.word	0x20000420
    2554:	20000410 	.word	0x20000410

00002558 <api_blocking_start>:
{
    2558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    255a:	2200      	movs	r2, #0
    255c:	2301      	movs	r3, #1
    255e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2562:	4a09      	ldr	r2, [pc, #36]	; (2588 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2564:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2568:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    256a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    256e:	f003 f91f 	bl	57b0 <api_start>
	if (err < 0) {
    2572:	2800      	cmp	r0, #0
    2574:	db05      	blt.n	2582 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    257a:	2300      	movs	r3, #0
    257c:	4668      	mov	r0, sp
    257e:	f002 f855 	bl	462c <z_impl_k_sem_take>
}
    2582:	b005      	add	sp, #20
    2584:	f85d fb04 	ldr.w	pc, [sp], #4
    2588:	000057d7 	.word	0x000057d7

0000258c <lfclk_start>:
{
    258c:	b510      	push	{r4, lr}
	if (!once) {
    258e:	4c07      	ldr	r4, [pc, #28]	; (25ac <lfclk_start+0x20>)
    2590:	7823      	ldrb	r3, [r4, #0]
    2592:	b92b      	cbnz	r3, 25a0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    2594:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2598:	f003 ffec 	bl	6574 <z_impl_k_busy_wait>
		once = true;
    259c:	2301      	movs	r3, #1
    259e:	7023      	strb	r3, [r4, #0]
}
    25a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    25a4:	2000      	movs	r0, #0
    25a6:	f001 b993 	b.w	38d0 <nrfx_clock_start>
    25aa:	bf00      	nop
    25ac:	2000064d 	.word	0x2000064d

000025b0 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25b0:	4b09      	ldr	r3, [pc, #36]	; (25d8 <generic_hfclk_stop+0x28>)
    25b2:	f3bf 8f5b 	dmb	ish
    25b6:	e853 2f00 	ldrex	r2, [r3]
    25ba:	f022 0102 	bic.w	r1, r2, #2
    25be:	e843 1000 	strex	r0, r1, [r3]
    25c2:	2800      	cmp	r0, #0
    25c4:	d1f7      	bne.n	25b6 <generic_hfclk_stop+0x6>
    25c6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    25ca:	07d3      	lsls	r3, r2, #31
    25cc:	d402      	bmi.n	25d4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    25ce:	2001      	movs	r0, #1
    25d0:	f001 b9c6 	b.w	3960 <nrfx_clock_stop>
}
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop
    25d8:	20000420 	.word	0x20000420

000025dc <z_nrf_clock_control_lf_on>:
{
    25dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    25e0:	4939      	ldr	r1, [pc, #228]	; (26c8 <z_nrf_clock_control_lf_on+0xec>)
    25e2:	f3bf 8f5b 	dmb	ish
    25e6:	4607      	mov	r7, r0
    25e8:	2201      	movs	r2, #1
    25ea:	e851 3f00 	ldrex	r3, [r1]
    25ee:	e841 2000 	strex	r0, r2, [r1]
    25f2:	2800      	cmp	r0, #0
    25f4:	d1f9      	bne.n	25ea <z_nrf_clock_control_lf_on+0xe>
    25f6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    25fa:	b933      	cbnz	r3, 260a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    25fc:	4933      	ldr	r1, [pc, #204]	; (26cc <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    25fe:	4834      	ldr	r0, [pc, #208]	; (26d0 <z_nrf_clock_control_lf_on+0xf4>)
    2600:	604b      	str	r3, [r1, #4]
    2602:	60cb      	str	r3, [r1, #12]
    2604:	608a      	str	r2, [r1, #8]
    2606:	f002 feb9 	bl	537c <onoff_request>
	switch (start_mode) {
    260a:	1e7b      	subs	r3, r7, #1
    260c:	2b01      	cmp	r3, #1
    260e:	d82f      	bhi.n	2670 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2610:	2f01      	cmp	r7, #1
    2612:	d107      	bne.n	2624 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2618:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    261c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2620:	2b01      	cmp	r3, #1
    2622:	d025      	beq.n	2670 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2624:	f003 fe37 	bl	6296 <k_is_in_isr>
    2628:	4604      	mov	r4, r0
    262a:	b918      	cbnz	r0, 2634 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    262c:	4b29      	ldr	r3, [pc, #164]	; (26d4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	2b00      	cmp	r3, #0
    2632:	d141      	bne.n	26b8 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2634:	f04f 0320 	mov.w	r3, #32
    2638:	f3ef 8611 	mrs	r6, BASEPRI
    263c:	f383 8812 	msr	BASEPRI_MAX, r3
    2640:	f3bf 8f6f 	isb	sy
    2644:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2646:	f8df 8090 	ldr.w	r8, [pc, #144]	; 26d8 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    264a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    264e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2652:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2656:	03d2      	lsls	r2, r2, #15
    2658:	d50c      	bpl.n	2674 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    265a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    265e:	2b01      	cmp	r3, #1
    2660:	d001      	beq.n	2666 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2662:	2f01      	cmp	r7, #1
    2664:	d106      	bne.n	2674 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2666:	b30c      	cbz	r4, 26ac <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2668:	f386 8811 	msr	BASEPRI, r6
    266c:	f3bf 8f6f 	isb	sy
}
    2670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2674:	b1ac      	cbz	r4, 26a2 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2676:	4630      	mov	r0, r6
    2678:	f7ff fb3a 	bl	1cf0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    267c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2680:	2b00      	cmp	r3, #0
    2682:	d1e4      	bne.n	264e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2684:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2688:	2a00      	cmp	r2, #0
    268a:	d0e0      	beq.n	264e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    268c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2690:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2694:	2301      	movs	r3, #1
    2696:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    269a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    269e:	60ab      	str	r3, [r5, #8]
}
    26a0:	e7d5      	b.n	264e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    26a2:	2100      	movs	r1, #0
    26a4:	2021      	movs	r0, #33	; 0x21
    26a6:	f002 fbcb 	bl	4e40 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    26aa:	e7e7      	b.n	267c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    26ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26b0:	2202      	movs	r2, #2
    26b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    26b6:	e7db      	b.n	2670 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    26b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26bc:	2202      	movs	r2, #2
    26be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    26c2:	4606      	mov	r6, r0
}
    26c4:	e7bf      	b.n	2646 <z_nrf_clock_control_lf_on+0x6a>
    26c6:	bf00      	nop
    26c8:	20000424 	.word	0x20000424
    26cc:	200003c0 	.word	0x200003c0
    26d0:	200003ec 	.word	0x200003ec
    26d4:	20000a80 	.word	0x20000a80
    26d8:	e000e100 	.word	0xe000e100

000026dc <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    26dc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    26de:	4c04      	ldr	r4, [pc, #16]	; (26f0 <rtt_console_init+0x14>)
    26e0:	4620      	mov	r0, r4
    26e2:	f7fe faed 	bl	cc0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    26e6:	4620      	mov	r0, r4
    26e8:	f7ff fe2a 	bl	2340 <__stdout_hook_install>

	return 0;
}
    26ec:	2000      	movs	r0, #0
    26ee:	bd10      	pop	{r4, pc}
    26f0:	000026f5 	.word	0x000026f5

000026f4 <rtt_console_out>:
{
    26f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26f6:	4e14      	ldr	r6, [pc, #80]	; (2748 <rtt_console_out+0x54>)
	char c = (char)character;
    26f8:	f88d 0007 	strb.w	r0, [sp, #7]
{
    26fc:	4604      	mov	r4, r0
	char c = (char)character;
    26fe:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    2700:	f3ef 8711 	mrs	r7, BASEPRI
    2704:	f04f 0120 	mov.w	r1, #32
    2708:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    270c:	2201      	movs	r2, #1
    270e:	f10d 0107 	add.w	r1, sp, #7
    2712:	2000      	movs	r0, #0
    2714:	f001 fd5e 	bl	41d4 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    2718:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    271c:	b120      	cbz	r0, 2728 <rtt_console_out+0x34>
			host_present = true;
    271e:	2301      	movs	r3, #1
    2720:	7033      	strb	r3, [r6, #0]
}
    2722:	4620      	mov	r0, r4
    2724:	b003      	add	sp, #12
    2726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    2728:	7833      	ldrb	r3, [r6, #0]
    272a:	2b00      	cmp	r3, #0
    272c:	d0f9      	beq.n	2722 <rtt_console_out+0x2e>
			if (max_cnt) {
    272e:	3d01      	subs	r5, #1
    2730:	d008      	beq.n	2744 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    2732:	f003 fdb0 	bl	6296 <k_is_in_isr>
    2736:	2800      	cmp	r0, #0
    2738:	d1e2      	bne.n	2700 <rtt_console_out+0xc>
    273a:	2100      	movs	r1, #0
    273c:	2042      	movs	r0, #66	; 0x42
    273e:	f002 fb7f 	bl	4e40 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    2742:	e7dd      	b.n	2700 <rtt_console_out+0xc>
				host_present = false;
    2744:	7035      	strb	r5, [r6, #0]
    2746:	e7ec      	b.n	2722 <rtt_console_out+0x2e>
    2748:	2000064e 	.word	0x2000064e

0000274c <gpio_nrfx_init>:


#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    274c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    274e:	4b09      	ldr	r3, [pc, #36]	; (2774 <gpio_nrfx_init+0x28>)
    2750:	781a      	ldrb	r2, [r3, #0]
    2752:	b96a      	cbnz	r2, 2770 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2754:	2101      	movs	r1, #1
    2756:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2758:	2006      	movs	r0, #6
    275a:	2105      	movs	r1, #5
    275c:	f7ff faf0 	bl	1d40 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    2760:	2006      	movs	r0, #6
    2762:	f7ff facf 	bl	1d04 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2766:	4b04      	ldr	r3, [pc, #16]	; (2778 <gpio_nrfx_init+0x2c>)
    2768:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    276c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2770:	2000      	movs	r0, #0
    2772:	bd08      	pop	{r3, pc}
    2774:	2000064f 	.word	0x2000064f
    2778:	40006000 	.word	0x40006000

0000277c <gpio_nrfx_pin_interrupt_configure>:
{
    277c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    277e:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2780:	6842      	ldr	r2, [r0, #4]
	return port->data;
    2782:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2784:	7a12      	ldrb	r2, [r2, #8]
    2786:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    278a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
    278e:	460d      	mov	r5, r1
    2790:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    2794:	d10c      	bne.n	27b0 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2796:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    279a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    279e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    27a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    27a6:	07d0      	lsls	r0, r2, #31
    27a8:	d507      	bpl.n	27ba <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    27aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    27ae:	e09a      	b.n	28e6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    27b0:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    27b4:	68f1      	ldr	r1, [r6, #12]
    27b6:	f000 8098 	beq.w	28ea <gpio_nrfx_pin_interrupt_configure+0x16e>
    27ba:	68f2      	ldr	r2, [r6, #12]
    27bc:	2101      	movs	r1, #1
    27be:	40a9      	lsls	r1, r5
    27c0:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    27c2:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    27c4:	60f1      	str	r1, [r6, #12]
    27c6:	2101      	movs	r1, #1
    27c8:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    27ca:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    27ce:	bf0c      	ite	eq
    27d0:	430a      	orreq	r2, r1
    27d2:	438a      	bicne	r2, r1
    27d4:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    27d6:	69b2      	ldr	r2, [r6, #24]
    27d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    27dc:	bf0c      	ite	eq
    27de:	430a      	orreq	r2, r1
    27e0:	438a      	bicne	r2, r1
    27e2:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    27e4:	6932      	ldr	r2, [r6, #16]
    27e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    27ea:	bf0c      	ite	eq
    27ec:	4311      	orreq	r1, r2
    27ee:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    27f2:	4a4a      	ldr	r2, [pc, #296]	; (291c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    27f4:	6131      	str	r1, [r6, #16]
    27f6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    27fa:	2000      	movs	r0, #0
    27fc:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    27fe:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2802:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2806:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    280a:	428c      	cmp	r4, r1
    280c:	d172      	bne.n	28f4 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
    280e:	fa23 f100 	lsr.w	r1, r3, r0
    2812:	07c9      	lsls	r1, r1, #31
    2814:	d56e      	bpl.n	28f4 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2816:	0083      	lsls	r3, r0, #2
    2818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    281c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2820:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2824:	f021 0101 	bic.w	r1, r1, #1
    2828:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    282c:	2301      	movs	r3, #1
    282e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    2830:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    2834:	b2c0      	uxtb	r0, r0
    2836:	f001 f903 	bl	3a40 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    283a:	4620      	mov	r0, r4
    283c:	2100      	movs	r1, #0
    283e:	f002 ffcd 	bl	57dc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2842:	68f0      	ldr	r0, [r6, #12]
    2844:	40e8      	lsrs	r0, r5
    2846:	f010 0001 	ands.w	r0, r0, #1
    284a:	d04c      	beq.n	28e6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    284c:	6970      	ldr	r0, [r6, #20]
    284e:	40e8      	lsrs	r0, r5
    2850:	f010 0201 	ands.w	r2, r0, #1
    2854:	d055      	beq.n	2902 <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
    2856:	69b3      	ldr	r3, [r6, #24]
    2858:	40eb      	lsrs	r3, r5
    285a:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    285c:	bf5f      	itttt	pl
    285e:	6931      	ldrpl	r1, [r6, #16]
    2860:	fa21 f505 	lsrpl.w	r5, r1, r5
    2864:	f005 0501 	andpl.w	r5, r5, #1
    2868:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    286c:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2870:	bf54      	ite	pl
    2872:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2874:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2876:	f001 f903 	bl	3a80 <nrfx_gpiote_channel_alloc>
    287a:	4b29      	ldr	r3, [pc, #164]	; (2920 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
    287c:	4298      	cmp	r0, r3
    287e:	d13d      	bne.n	28fc <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2880:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2884:	0093      	lsls	r3, r2, #2
    2886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    288a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    288e:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2890:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2894:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    2898:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    289c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    28a0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    28a4:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    28a8:	430c      	orrs	r4, r1
    28aa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    28ae:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    28b2:	0093      	lsls	r3, r2, #2
    28b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28b8:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    28bc:	2000      	movs	r0, #0
    28be:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    28c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    28c4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    28c6:	008b      	lsls	r3, r1, #2
    28c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28cc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    28d0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    28d4:	f042 0201 	orr.w	r2, r2, #1
    28d8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    28dc:	4a0f      	ldr	r2, [pc, #60]	; (291c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    28de:	2301      	movs	r3, #1
    28e0:	408b      	lsls	r3, r1
    28e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    28e6:	b003      	add	sp, #12
    28e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    28ea:	2201      	movs	r2, #1
    28ec:	40aa      	lsls	r2, r5
    28ee:	ea21 0102 	bic.w	r1, r1, r2
    28f2:	e766      	b.n	27c2 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    28f4:	3001      	adds	r0, #1
    28f6:	2808      	cmp	r0, #8
    28f8:	d181      	bne.n	27fe <gpio_nrfx_pin_interrupt_configure+0x82>
    28fa:	e79e      	b.n	283a <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
    28fc:	f06f 0012 	mvn.w	r0, #18
    2900:	e7f1      	b.n	28e6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2902:	6931      	ldr	r1, [r6, #16]
    2904:	40e9      	lsrs	r1, r5
    2906:	f001 0101 	and.w	r1, r1, #1
    290a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    290e:	4620      	mov	r0, r4
    2910:	b2c9      	uxtb	r1, r1
    2912:	f002 ff63 	bl	57dc <nrf_gpio_cfg_sense_set>
	int res = 0;
    2916:	4610      	mov	r0, r2
    2918:	e7e5      	b.n	28e6 <gpio_nrfx_pin_interrupt_configure+0x16a>
    291a:	bf00      	nop
    291c:	40006000 	.word	0x40006000
    2920:	0bad0000 	.word	0x0bad0000

00002924 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2924:	4b2a      	ldr	r3, [pc, #168]	; (29d0 <gpio_nrfx_config+0xac>)
{
    2926:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    2928:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    292a:	482a      	ldr	r0, [pc, #168]	; (29d4 <gpio_nrfx_config+0xb0>)
    292c:	4013      	ands	r3, r2
    292e:	4283      	cmp	r3, r0
    2930:	d03e      	beq.n	29b0 <gpio_nrfx_config+0x8c>
    2932:	d80d      	bhi.n	2950 <gpio_nrfx_config+0x2c>
    2934:	2b06      	cmp	r3, #6
    2936:	d015      	beq.n	2964 <gpio_nrfx_config+0x40>
    2938:	d805      	bhi.n	2946 <gpio_nrfx_config+0x22>
    293a:	b19b      	cbz	r3, 2964 <gpio_nrfx_config+0x40>
    293c:	2b02      	cmp	r3, #2
    293e:	d039      	beq.n	29b4 <gpio_nrfx_config+0x90>
    2940:	f06f 0015 	mvn.w	r0, #21
    2944:	e033      	b.n	29ae <gpio_nrfx_config+0x8a>
    2946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    294a:	d1f9      	bne.n	2940 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    294c:	2301      	movs	r3, #1
    294e:	e009      	b.n	2964 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2950:	4821      	ldr	r0, [pc, #132]	; (29d8 <gpio_nrfx_config+0xb4>)
    2952:	4283      	cmp	r3, r0
    2954:	d030      	beq.n	29b8 <gpio_nrfx_config+0x94>
    2956:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    295a:	d02f      	beq.n	29bc <gpio_nrfx_config+0x98>
    295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2960:	d1ee      	bne.n	2940 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2962:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2964:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    2966:	bf54      	ite	pl
    2968:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    296c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    296e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2972:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    2976:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    297a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    297e:	d007      	beq.n	2990 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2980:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2984:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2986:	d01b      	beq.n	29c0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2988:	2201      	movs	r2, #1
    298a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    298c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2990:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    2994:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2998:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    299c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    29a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    29a4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    29a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    29ac:	2000      	movs	r0, #0
}
    29ae:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    29b0:	2307      	movs	r3, #7
    29b2:	e7d7      	b.n	2964 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    29b4:	2304      	movs	r3, #4
    29b6:	e7d5      	b.n	2964 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    29b8:	2305      	movs	r3, #5
    29ba:	e7d3      	b.n	2964 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    29bc:	2303      	movs	r3, #3
    29be:	e7d1      	b.n	2964 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    29c0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    29c2:	bf42      	ittt	mi
    29c4:	2201      	movmi	r2, #1
    29c6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    29c8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    29cc:	e7e0      	b.n	2990 <gpio_nrfx_config+0x6c>
    29ce:	bf00      	nop
    29d0:	00f00006 	.word	0x00f00006
    29d4:	00100006 	.word	0x00100006
    29d8:	00400002 	.word	0x00400002

000029dc <gpiote_event_handler>:
{
    29dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29e0:	4b41      	ldr	r3, [pc, #260]	; (2ae8 <gpiote_event_handler+0x10c>)
    29e2:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
    29e6:	2d00      	cmp	r5, #0
    29e8:	d059      	beq.n	2a9e <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    29ea:	4b40      	ldr	r3, [pc, #256]	; (2aec <gpiote_event_handler+0x110>)
    return p_reg->IN;
    29ec:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
    29f0:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    29f4:	68df      	ldr	r7, [r3, #12]
    29f6:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    29fa:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    29fc:	430a      	orrs	r2, r1
    29fe:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2a02:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2a04:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
    2a08:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
    2a0a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    2a0c:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
    2a10:	bb82      	cbnz	r2, 2a74 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a12:	4b35      	ldr	r3, [pc, #212]	; (2ae8 <gpiote_event_handler+0x10c>)
    2a14:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    2a18:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2a1c:	4a34      	ldr	r2, [pc, #208]	; (2af0 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
    2a1e:	4832      	ldr	r0, [pc, #200]	; (2ae8 <gpiote_event_handler+0x10c>)
    2a20:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2a22:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a24:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2a26:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    2a2a:	fa06 fc03 	lsl.w	ip, r6, r3
    2a2e:	ea1c 0f01 	tst.w	ip, r1
    2a32:	d00c      	beq.n	2a4e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a34:	6811      	ldr	r1, [r2, #0]
    2a36:	b151      	cbz	r1, 2a4e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a38:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2a3c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a40:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a42:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2a46:	fa06 f101 	lsl.w	r1, r6, r1
    2a4a:	430c      	orrs	r4, r1
    2a4c:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2a4e:	3301      	adds	r3, #1
    2a50:	2b08      	cmp	r3, #8
    2a52:	f102 0204 	add.w	r2, r2, #4
    2a56:	d1e6      	bne.n	2a26 <gpiote_event_handler+0x4a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_FIRE_CALLBACKS)
    2a58:	bb1c      	cbnz	r4, 2aa2 <gpiote_event_handler+0xc6>
	if (port_event) {
    2a5a:	b14d      	cbz	r5, 2a70 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
    2a5c:	4e23      	ldr	r6, [pc, #140]	; (2aec <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
    2a5e:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
    2a62:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2a64:	430b      	orrs	r3, r1
    2a66:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
    2a6a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    2a6c:	2500      	movs	r5, #0
	while (level_pins) {
    2a6e:	bb4a      	cbnz	r2, 2ac4 <gpiote_event_handler+0xe8>
}
    2a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
    2a74:	4216      	tst	r6, r2
    2a76:	d00e      	beq.n	2a96 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    2a78:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a7a:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2a7e:	bf08      	it	eq
    2a80:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2a84:	f04f 0100 	mov.w	r1, #0
    2a88:	bf08      	it	eq
    2a8a:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    2a8e:	f002 fea5 	bl	57dc <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    2a92:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    2a96:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    2a9a:	0076      	lsls	r6, r6, #1
    2a9c:	e7b8      	b.n	2a10 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2a9e:	462c      	mov	r4, r5
    2aa0:	e7bc      	b.n	2a1c <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    2aa2:	4b12      	ldr	r3, [pc, #72]	; (2aec <gpiote_event_handler+0x110>)
    2aa4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2aa6:	2900      	cmp	r1, #0
    2aa8:	d0d7      	beq.n	2a5a <gpiote_event_handler+0x7e>
    2aaa:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2aac:	4f11      	ldr	r7, [pc, #68]	; (2af4 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
    2aae:	688a      	ldr	r2, [r1, #8]
    2ab0:	4022      	ands	r2, r4
    2ab2:	d002      	beq.n	2aba <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
    2ab4:	684b      	ldr	r3, [r1, #4]
    2ab6:	4638      	mov	r0, r7
    2ab8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2aba:	2e00      	cmp	r6, #0
    2abc:	d0cd      	beq.n	2a5a <gpiote_event_handler+0x7e>
    2abe:	4631      	mov	r1, r6
    2ac0:	6836      	ldr	r6, [r6, #0]
    2ac2:	e7f4      	b.n	2aae <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    2ac4:	4214      	tst	r4, r2
    2ac6:	d00c      	beq.n	2ae2 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2ac8:	6931      	ldr	r1, [r6, #16]
    2aca:	40e9      	lsrs	r1, r5
    2acc:	f001 0101 	and.w	r1, r1, #1
    2ad0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2ad4:	b2c9      	uxtb	r1, r1
    2ad6:	f005 001f 	and.w	r0, r5, #31
    2ada:	f002 fe7f 	bl	57dc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2ade:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
    2ae2:	3501      	adds	r5, #1
		bit <<= 1;
    2ae4:	0064      	lsls	r4, r4, #1
    2ae6:	e7c2      	b.n	2a6e <gpiote_event_handler+0x92>
    2ae8:	40006000 	.word	0x40006000
    2aec:	20000428 	.word	0x20000428
    2af0:	40006100 	.word	0x40006100
    2af4:	00006668 	.word	0x00006668

00002af8 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    2af8:	b508      	push	{r3, lr}
	return dev->config;
    2afa:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2afc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    2b00:	f001 faea 	bl	40d8 <nrfx_twi_twim_bus_recover>
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2b04:	4b03      	ldr	r3, [pc, #12]	; (2b14 <i2c_nrfx_twim_recover_bus+0x1c>)
    2b06:	4298      	cmp	r0, r3
}
    2b08:	bf14      	ite	ne
    2b0a:	f06f 000f 	mvnne.w	r0, #15
    2b0e:	2000      	moveq	r0, #0
    2b10:	bd08      	pop	{r3, pc}
    2b12:	bf00      	nop
    2b14:	0bad0000 	.word	0x0bad0000

00002b18 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    2b18:	b510      	push	{r4, lr}
    2b1a:	4604      	mov	r4, r0
    2b1c:	2200      	movs	r2, #0
    2b1e:	2101      	movs	r1, #1
    2b20:	2003      	movs	r0, #3
    2b22:	f7ff f90d 	bl	1d40 <z_arm_irq_priority_set>
	return dev->config;
    2b26:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    2b28:	6923      	ldr	r3, [r4, #16]
    2b2a:	4a06      	ldr	r2, [pc, #24]	; (2b44 <twim_0_init+0x2c>)
    2b2c:	f100 0108 	add.w	r1, r0, #8
    2b30:	f001 f8d0 	bl	3cd4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    2b34:	4b04      	ldr	r3, [pc, #16]	; (2b48 <twim_0_init+0x30>)
		return -EBUSY;
    2b36:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
    2b38:	bf14      	ite	ne
    2b3a:	f06f 000f 	mvnne.w	r0, #15
    2b3e:	2000      	moveq	r0, #0
    2b40:	bd10      	pop	{r4, pc}
    2b42:	bf00      	nop
    2b44:	00002b4d 	.word	0x00002b4d
    2b48:	0bad0000 	.word	0x0bad0000

00002b4c <event_handler>:
	switch (p_event->type) {
    2b4c:	7803      	ldrb	r3, [r0, #0]
    2b4e:	2b01      	cmp	r3, #1
    2b50:	d008      	beq.n	2b64 <event_handler+0x18>
    2b52:	2b02      	cmp	r3, #2
    2b54:	d008      	beq.n	2b68 <event_handler+0x1c>
    2b56:	b94b      	cbnz	r3, 2b6c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2b58:	4b05      	ldr	r3, [pc, #20]	; (2b70 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2b5a:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2b5c:	f101 0010 	add.w	r0, r1, #16
    2b60:	f001 bd44 	b.w	45ec <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2b64:	4b03      	ldr	r3, [pc, #12]	; (2b74 <event_handler+0x28>)
    2b66:	e7f8      	b.n	2b5a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <event_handler+0x2c>)
    2b6a:	e7f6      	b.n	2b5a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2b6c:	4b03      	ldr	r3, [pc, #12]	; (2b7c <event_handler+0x30>)
    2b6e:	e7f4      	b.n	2b5a <event_handler+0xe>
    2b70:	0bad0000 	.word	0x0bad0000
    2b74:	0bae0001 	.word	0x0bae0001
    2b78:	0bae0002 	.word	0x0bae0002
    2b7c:	0bad0001 	.word	0x0bad0001

00002b80 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    2b80:	b510      	push	{r4, lr}
    2b82:	4604      	mov	r4, r0
    2b84:	2200      	movs	r2, #0
    2b86:	2101      	movs	r1, #1
    2b88:	2004      	movs	r0, #4
    2b8a:	f7ff f8d9 	bl	1d40 <z_arm_irq_priority_set>
	return dev->config;
    2b8e:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    2b90:	6923      	ldr	r3, [r4, #16]
    2b92:	4a06      	ldr	r2, [pc, #24]	; (2bac <twim_1_init+0x2c>)
    2b94:	f100 0108 	add.w	r1, r0, #8
    2b98:	f001 f89c 	bl	3cd4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    2b9c:	4b04      	ldr	r3, [pc, #16]	; (2bb0 <twim_1_init+0x30>)
		return -EBUSY;
    2b9e:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(1);
    2ba0:	bf14      	ite	ne
    2ba2:	f06f 000f 	mvnne.w	r0, #15
    2ba6:	2000      	moveq	r0, #0
    2ba8:	bd10      	pop	{r4, pc}
    2baa:	bf00      	nop
    2bac:	00002b4d 	.word	0x00002b4d
    2bb0:	0bad0000 	.word	0x0bad0000

00002bb4 <i2c_nrfx_twim_transfer>:
{
    2bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return dev->config;
    2bb8:	6846      	ldr	r6, [r0, #4]
	return dev->data;
    2bba:	6907      	ldr	r7, [r0, #16]
{
    2bbc:	b089      	sub	sp, #36	; 0x24
    2bbe:	461d      	mov	r5, r3
    2bc0:	460c      	mov	r4, r1
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2bc2:	8b33      	ldrh	r3, [r6, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    2bc4:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2bc8:	9300      	str	r3, [sp, #0]
{
    2bca:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    2bcc:	2100      	movs	r1, #0
    2bce:	2214      	movs	r2, #20
    2bd0:	a803      	add	r0, sp, #12
    2bd2:	f002 fd4a 	bl	566a <memset>
    2bd6:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
    2bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2be2:	4638      	mov	r0, r7
    2be4:	f001 fd22 	bl	462c <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    2be8:	f107 0a10 	add.w	sl, r7, #16
    2bec:	2200      	movs	r2, #0
    2bee:	2300      	movs	r3, #0
    2bf0:	4650      	mov	r0, sl
    2bf2:	f001 fd1b 	bl	462c <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    2bf6:	4630      	mov	r0, r6
    2bf8:	f001 f8b2 	bl	3d60 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    2bfc:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    2c00:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    2c02:	45d8      	cmp	r8, fp
    2c04:	d301      	bcc.n	2c0a <i2c_nrfx_twim_transfer+0x56>
    2c06:	2400      	movs	r4, #0
    2c08:	e049      	b.n	2c9e <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2c0a:	7a21      	ldrb	r1, [r4, #8]
    2c0c:	070a      	lsls	r2, r1, #28
    2c0e:	f100 808f 	bmi.w	2d30 <i2c_nrfx_twim_transfer+0x17c>
		bool concat_next = ((i + 1) < num_msgs)
    2c12:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2c16:	45d8      	cmp	r8, fp
    2c18:	6862      	ldr	r2, [r4, #4]
    2c1a:	d20a      	bcs.n	2c32 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2c1c:	078b      	lsls	r3, r1, #30
    2c1e:	d408      	bmi.n	2c32 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    2c20:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    2c22:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    2c26:	f000 0001 	and.w	r0, r0, #1
    2c2a:	f003 0304 	and.w	r3, r3, #4
    2c2e:	4303      	orrs	r3, r0
    2c30:	d016      	beq.n	2c60 <i2c_nrfx_twim_transfer+0xac>
		if (concat_next || (msg_buf_used != 0)) {
    2c32:	b1bd      	cbz	r5, 2c64 <i2c_nrfx_twim_transfer+0xb0>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2c34:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2c36:	f8dd c000 	ldr.w	ip, [sp]
    2c3a:	18a8      	adds	r0, r5, r2
    2c3c:	4560      	cmp	r0, ip
    2c3e:	d87a      	bhi.n	2d36 <i2c_nrfx_twim_transfer+0x182>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2c40:	07c8      	lsls	r0, r1, #31
    2c42:	d406      	bmi.n	2c52 <i2c_nrfx_twim_transfer+0x9e>
				memcpy(msg_buf + msg_buf_used,
    2c44:	6821      	ldr	r1, [r4, #0]
    2c46:	9301      	str	r3, [sp, #4]
    2c48:	eb09 0005 	add.w	r0, r9, r5
    2c4c:	f002 fd02 	bl	5654 <memcpy>
    2c50:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    2c52:	6862      	ldr	r2, [r4, #4]
    2c54:	4415      	add	r5, r2
    2c56:	b2ad      	uxth	r5, r5
		if (concat_next) {
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d037      	beq.n	2ccc <i2c_nrfx_twim_transfer+0x118>
    2c5c:	340c      	adds	r4, #12
    2c5e:	e7d0      	b.n	2c02 <i2c_nrfx_twim_transfer+0x4e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2c60:	2301      	movs	r3, #1
    2c62:	e7e8      	b.n	2c36 <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2c64:	07c9      	lsls	r1, r1, #31
    2c66:	d524      	bpl.n	2cb2 <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2c68:	6823      	ldr	r3, [r4, #0]
    2c6a:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    2c6c:	6863      	ldr	r3, [r4, #4]
    2c6e:	9304      	str	r3, [sp, #16]
    2c70:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2c72:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2c74:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2c78:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2c7c:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2c80:	a903      	add	r1, sp, #12
    2c82:	bf0c      	ite	eq
    2c84:	2220      	moveq	r2, #32
    2c86:	2200      	movne	r2, #0
    2c88:	4630      	mov	r0, r6
    2c8a:	f001 f897 	bl	3dbc <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    2c8e:	4b2e      	ldr	r3, [pc, #184]	; (2d48 <i2c_nrfx_twim_transfer+0x194>)
    2c90:	4298      	cmp	r0, r3
    2c92:	d021      	beq.n	2cd8 <i2c_nrfx_twim_transfer+0x124>
			if (res == NRFX_ERROR_BUSY) {
    2c94:	330b      	adds	r3, #11
    2c96:	4298      	cmp	r0, r3
    2c98:	d053      	beq.n	2d42 <i2c_nrfx_twim_transfer+0x18e>
			ret = -EIO;
    2c9a:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    2c9e:	4630      	mov	r0, r6
    2ca0:	f001 f86e 	bl	3d80 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    2ca4:	4638      	mov	r0, r7
    2ca6:	f001 fca1 	bl	45ec <z_impl_k_sem_give>
}
    2caa:	4620      	mov	r0, r4
    2cac:	b009      	add	sp, #36	; 0x24
    2cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    2cb2:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2cb4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2cbc:	d0d4      	beq.n	2c68 <i2c_nrfx_twim_transfer+0xb4>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    2cbe:	8b73      	ldrh	r3, [r6, #26]
    2cc0:	4293      	cmp	r3, r2
    2cc2:	d33b      	bcc.n	2d3c <i2c_nrfx_twim_transfer+0x188>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    2cc4:	4648      	mov	r0, r9
    2cc6:	f002 fcc5 	bl	5654 <memcpy>
			msg_buf_used = msgs[i].len;
    2cca:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    2ccc:	2d00      	cmp	r5, #0
    2cce:	d0cb      	beq.n	2c68 <i2c_nrfx_twim_transfer+0xb4>
			cur_xfer.p_primary_buf = msg_buf;
    2cd0:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    2cd4:	9504      	str	r5, [sp, #16]
    2cd6:	e7cc      	b.n	2c72 <i2c_nrfx_twim_transfer+0xbe>
	return z_impl_k_sem_take(sem, timeout);
    2cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2cdc:	2300      	movs	r3, #0
    2cde:	4650      	mov	r0, sl
    2ce0:	f001 fca4 	bl	462c <z_impl_k_sem_take>
		if (ret != 0) {
    2ce4:	b138      	cbz	r0, 2cf6 <i2c_nrfx_twim_transfer+0x142>
			nrfx_twim_disable(&dev_config->twim);
    2ce6:	4630      	mov	r0, r6
    2ce8:	f001 f84a 	bl	3d80 <nrfx_twim_disable>
    2cec:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    2cf0:	f001 f9f2 	bl	40d8 <nrfx_twi_twim_bus_recover>
    2cf4:	e7d1      	b.n	2c9a <i2c_nrfx_twim_transfer+0xe6>
		res = dev_data->res;
    2cf6:	6a3b      	ldr	r3, [r7, #32]
		if (res != NRFX_SUCCESS) {
    2cf8:	4a13      	ldr	r2, [pc, #76]	; (2d48 <i2c_nrfx_twim_transfer+0x194>)
    2cfa:	4293      	cmp	r3, r2
    2cfc:	d1cd      	bne.n	2c9a <i2c_nrfx_twim_transfer+0xe6>
		if ((msgs[i].flags & I2C_MSG_READ)
    2cfe:	7a23      	ldrb	r3, [r4, #8]
    2d00:	07db      	lsls	r3, r3, #31
    2d02:	d401      	bmi.n	2d08 <i2c_nrfx_twim_transfer+0x154>
		msg_buf_used = 0;
    2d04:	2500      	movs	r5, #0
    2d06:	e7a9      	b.n	2c5c <i2c_nrfx_twim_transfer+0xa8>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2d08:	9b06      	ldr	r3, [sp, #24]
    2d0a:	4599      	cmp	r9, r3
    2d0c:	d1fa      	bne.n	2d04 <i2c_nrfx_twim_transfer+0x150>
    2d0e:	4623      	mov	r3, r4
    2d10:	e008      	b.n	2d24 <i2c_nrfx_twim_transfer+0x170>
				msg_buf_used -= msgs[j].len;
    2d12:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    2d14:	68d8      	ldr	r0, [r3, #12]
    2d16:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
    2d18:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    2d1a:	fa19 f181 	uxtah	r1, r9, r1
    2d1e:	f002 fc99 	bl	5654 <memcpy>
				j--;
    2d22:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    2d24:	685a      	ldr	r2, [r3, #4]
    2d26:	4295      	cmp	r5, r2
    2d28:	f1a3 030c 	sub.w	r3, r3, #12
    2d2c:	d2f1      	bcs.n	2d12 <i2c_nrfx_twim_transfer+0x15e>
    2d2e:	e7e9      	b.n	2d04 <i2c_nrfx_twim_transfer+0x150>
			ret = -ENOTSUP;
    2d30:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2d34:	e7b3      	b.n	2c9e <i2c_nrfx_twim_transfer+0xea>
				ret = -ENOSPC;
    2d36:	f06f 041b 	mvn.w	r4, #27
    2d3a:	e7b0      	b.n	2c9e <i2c_nrfx_twim_transfer+0xea>
				ret = -EINVAL;
    2d3c:	f06f 0415 	mvn.w	r4, #21
    2d40:	e7ad      	b.n	2c9e <i2c_nrfx_twim_transfer+0xea>
				ret = -EBUSY;
    2d42:	f06f 040f 	mvn.w	r4, #15
    2d46:	e7aa      	b.n	2c9e <i2c_nrfx_twim_transfer+0xea>
    2d48:	0bad0000 	.word	0x0bad0000

00002d4c <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    2d4c:	290d      	cmp	r1, #13
{
    2d4e:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
    2d50:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    2d52:	d120      	bne.n	2d96 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    2d54:	8945      	ldrh	r5, [r0, #10]
			   (data->t_sample - data->t0_out) /
    2d56:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    2d5a:	8983      	ldrh	r3, [r0, #12]
			   (data->t_sample - data->t0_out) /
    2d5c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
			   (data->t1_out - data->t0_out) +
    2d60:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    2d64:	1b5b      	subs	r3, r3, r5
			   (data->t_sample - data->t0_out) /
    2d66:	1ba4      	subs	r4, r4, r6
			   (data->t1_out - data->t0_out) +
    2d68:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    2d6a:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
    2d6c:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    2d70:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
    2d72:	2b00      	cmp	r3, #0
    2d74:	4619      	mov	r1, r3
    2d76:	bfb8      	it	lt
    2d78:	1dd9      	addlt	r1, r3, #7
    2d7a:	10c9      	asrs	r1, r1, #3
    2d7c:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
    2d7e:	4259      	negs	r1, r3
    2d80:	f001 0107 	and.w	r1, r1, #7
    2d84:	f003 0307 	and.w	r3, r3, #7
    2d88:	bf58      	it	pl
    2d8a:	424b      	negpl	r3, r1
    2d8c:	4911      	ldr	r1, [pc, #68]	; (2dd4 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
    2d8e:	434b      	muls	r3, r1
    2d90:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
    2d92:	2000      	movs	r0, #0
}
    2d94:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
    2d96:	2910      	cmp	r1, #16
    2d98:	d119      	bne.n	2dce <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    2d9a:	7a05      	ldrb	r5, [r0, #8]
			   (data->rh_sample - data->h0_t0_out) /
    2d9c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    2da0:	7a43      	ldrb	r3, [r0, #9]
			   (data->rh_sample - data->h0_t0_out) /
    2da2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
			   (data->h1_t0_out - data->h0_t0_out) +
    2da6:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    2daa:	1b5b      	subs	r3, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
    2dac:	1ba4      	subs	r4, r4, r6
			   (data->h1_t0_out - data->h0_t0_out) +
    2dae:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    2db0:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
    2db2:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    2db6:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
    2db8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    2dbc:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
    2dc4:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
    2dc6:	bfb8      	it	lt
    2dc8:	425b      	neglt	r3, r3
    2dca:	4903      	ldr	r1, [pc, #12]	; (2dd8 <hts221_channel_get+0x8c>)
    2dcc:	e7df      	b.n	2d8e <hts221_channel_get+0x42>
		return -ENOTSUP;
    2dce:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2dd2:	e7df      	b.n	2d94 <hts221_channel_get+0x48>
    2dd4:	0001e848 	.word	0x0001e848
    2dd8:	0007a120 	.word	0x0007a120

00002ddc <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
    2ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct hts221_config *cfg = dev->config;
    2de0:	6845      	ldr	r5, [r0, #4]
	struct hts221_data *data = dev->data;
    2de2:	6907      	ldr	r7, [r0, #16]
{
    2de4:	4606      	mov	r6, r0
    2de6:	b08c      	sub	sp, #48	; 0x30
	uint8_t id, idx;

	data->i2c = device_get_binding(cfg->i2c_bus);
    2de8:	6828      	ldr	r0, [r5, #0]
    2dea:	f001 fa43 	bl	4274 <z_impl_device_get_binding>
    2dee:	6038      	str	r0, [r7, #0]
	if (data->i2c == NULL) {
    2df0:	b920      	cbnz	r0, 2dfc <hts221_init+0x20>
	 */
	k_sleep(K_MSEC(3));

	if (hts221_read_conversion_data(dev) < 0) {
		LOG_ERR("Failed to read conversion data.");
		return -EINVAL;
    2df2:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
    2df6:	b00c      	add	sp, #48	; 0x30
    2df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (i2c_reg_read_byte(data->i2c, cfg->i2c_addr,
    2dfc:	220f      	movs	r2, #15
    2dfe:	f88d 2006 	strb.w	r2, [sp, #6]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    2e02:	f10d 0206 	add.w	r2, sp, #6
    2e06:	88ab      	ldrh	r3, [r5, #4]
    2e08:	9206      	str	r2, [sp, #24]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
    2e0a:	2200      	movs	r2, #0
	msg[0].len = num_write;
    2e0c:	2401      	movs	r4, #1
	msg[0].flags = I2C_MSG_WRITE;
    2e0e:	f88d 2020 	strb.w	r2, [sp, #32]

	msg[1].buf = (uint8_t *)read_buf;
    2e12:	f10d 0205 	add.w	r2, sp, #5
	msg[1].len = num_read;
    2e16:	e9cd 2409 	strd	r2, r4, [sp, #36]	; 0x24
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2e1a:	2207      	movs	r2, #7
	msg[0].len = num_write;
    2e1c:	9407      	str	r4, [sp, #28]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2e1e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    2e22:	2202      	movs	r2, #2
    2e24:	a906      	add	r1, sp, #24
    2e26:	f002 ff41 	bl	5cac <z_impl_i2c_transfer>
    2e2a:	2800      	cmp	r0, #0
    2e2c:	db76      	blt.n	2f1c <hts221_init+0x140>
	if (id != HTS221_CHIP_ID) {
    2e2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2e32:	2bbc      	cmp	r3, #188	; 0xbc
    2e34:	d1dd      	bne.n	2df2 <hts221_init+0x16>
		if (!strcmp(hts221_odr_strings[idx], CONFIG_HTS221_ODR)) {
    2e36:	493b      	ldr	r1, [pc, #236]	; (2f24 <hts221_init+0x148>)
    2e38:	4608      	mov	r0, r1
    2e3a:	f002 fbff 	bl	563c <strcmp>
    2e3e:	b170      	cbz	r0, 2e5e <hts221_init+0x82>
    2e40:	4938      	ldr	r1, [pc, #224]	; (2f24 <hts221_init+0x148>)
    2e42:	4839      	ldr	r0, [pc, #228]	; (2f28 <hts221_init+0x14c>)
    2e44:	f002 fbfa 	bl	563c <strcmp>
    2e48:	b150      	cbz	r0, 2e60 <hts221_init+0x84>
    2e4a:	4936      	ldr	r1, [pc, #216]	; (2f24 <hts221_init+0x148>)
    2e4c:	4837      	ldr	r0, [pc, #220]	; (2f2c <hts221_init+0x150>)
    2e4e:	f002 fbf5 	bl	563c <strcmp>
    2e52:	2800      	cmp	r0, #0
    2e54:	d1cd      	bne.n	2df2 <hts221_init+0x16>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odr_strings); idx++) {
    2e56:	2402      	movs	r4, #2
    2e58:	e002      	b.n	2e60 <hts221_init+0x84>
	return 0;
    2e5a:	4628      	mov	r0, r5
    2e5c:	e7cb      	b.n	2df6 <hts221_init+0x1a>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odr_strings); idx++) {
    2e5e:	4604      	mov	r4, r0
			       (idx + 1) << HTS221_ODR_SHIFT | HTS221_BDU_BIT |
    2e60:	3401      	adds	r4, #1
	if (i2c_reg_write_byte(data->i2c, cfg->i2c_addr,
    2e62:	6838      	ldr	r0, [r7, #0]
    2e64:	88ab      	ldrh	r3, [r5, #4]
	msg.len = num_bytes;
    2e66:	f04f 0802 	mov.w	r8, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    2e6a:	2220      	movs	r2, #32
    2e6c:	f064 047b 	orn	r4, r4, #123	; 0x7b
	msg.buf = (uint8_t *)buf;
    2e70:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2] = {reg_addr, value};
    2e72:	f88d 2008 	strb.w	r2, [sp, #8]
    2e76:	f88d 4009 	strb.w	r4, [sp, #9]
	msg.buf = (uint8_t *)buf;
    2e7a:	9706      	str	r7, [sp, #24]
	msg.len = num_bytes;
    2e7c:	f8cd 801c 	str.w	r8, [sp, #28]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    2e80:	f88d 8020 	strb.w	r8, [sp, #32]
    2e84:	2201      	movs	r2, #1
    2e86:	a906      	add	r1, sp, #24
    2e88:	f002 ff10 	bl	5cac <z_impl_i2c_transfer>
    2e8c:	2800      	cmp	r0, #0
    2e8e:	db45      	blt.n	2f1c <hts221_init+0x140>
	return z_impl_k_sleep(timeout);
    2e90:	2100      	movs	r1, #0
    2e92:	2063      	movs	r0, #99	; 0x63
    2e94:	f001 ffd4 	bl	4e40 <z_impl_k_sleep>
	struct hts221_data *data = dev->data;
    2e98:	6934      	ldr	r4, [r6, #16]
	if (i2c_burst_read(data->i2c, cfg->i2c_addr,
    2e9a:	6873      	ldr	r3, [r6, #4]
    2e9c:	6820      	ldr	r0, [r4, #0]
    2e9e:	889b      	ldrh	r3, [r3, #4]
	msg[1].buf = (uint8_t *)read_buf;
    2ea0:	9709      	str	r7, [sp, #36]	; 0x24
    2ea2:	22b0      	movs	r2, #176	; 0xb0
    2ea4:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    2ea8:	f10d 0207 	add.w	r2, sp, #7
    2eac:	9206      	str	r2, [sp, #24]
	msg[0].len = num_write;
    2eae:	2201      	movs	r2, #1
    2eb0:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
    2eb2:	2210      	movs	r2, #16
	msg[0].flags = I2C_MSG_WRITE;
    2eb4:	2500      	movs	r5, #0
	msg[1].len = num_read;
    2eb6:	920a      	str	r2, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2eb8:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    2eba:	f88d 5020 	strb.w	r5, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2ebe:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    2ec2:	4642      	mov	r2, r8
    2ec4:	a906      	add	r1, sp, #24
    2ec6:	f002 fef1 	bl	5cac <z_impl_i2c_transfer>
    2eca:	42a8      	cmp	r0, r5
    2ecc:	db91      	blt.n	2df2 <hts221_init+0x16>
	data->h0_rh_x2 = buf[0];
    2ece:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2ed2:	7223      	strb	r3, [r4, #8]
	data->h1_rh_x2 = buf[1];
    2ed4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    2ed8:	7263      	strb	r3, [r4, #9]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
    2eda:	f89d 300d 	ldrb.w	r3, [sp, #13]
    2ede:	021a      	lsls	r2, r3, #8
    2ee0:	f402 7140 	and.w	r1, r2, #768	; 0x300
    2ee4:	f89d 200a 	ldrb.w	r2, [sp, #10]
    2ee8:	430a      	orrs	r2, r1
    2eea:	8162      	strh	r2, [r4, #10]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
    2eec:	f89d 200b 	ldrb.w	r2, [sp, #11]
    2ef0:	019b      	lsls	r3, r3, #6
    2ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
    2ef6:	4313      	orrs	r3, r2
    2ef8:	81a3      	strh	r3, [r4, #12]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
    2efa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2efe:	81e3      	strh	r3, [r4, #14]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
    2f00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    2f04:	8223      	strh	r3, [r4, #16]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
    2f06:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    2f0a:	8263      	strh	r3, [r4, #18]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
    2f0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    2f10:	82a3      	strh	r3, [r4, #20]
	if (hts221_init_interrupt(dev) < 0) {
    2f12:	4630      	mov	r0, r6
    2f14:	f000 f80c 	bl	2f30 <hts221_init_interrupt>
    2f18:	2800      	cmp	r0, #0
    2f1a:	da9e      	bge.n	2e5a <hts221_init+0x7e>
		return -EIO;
    2f1c:	f06f 0004 	mvn.w	r0, #4
    2f20:	e769      	b.n	2df6 <hts221_init+0x1a>
    2f22:	bf00      	nop
    2f24:	00006b97 	.word	0x00006b97
    2f28:	00006d9f 	.word	0x00006d9f
    2f2c:	00006da1 	.word	0x00006da1

00002f30 <hts221_init_interrupt>:
	process_drdy(data->dev);
}
#endif

int hts221_init_interrupt(const struct device *dev)
{
    2f30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct hts221_data *data = dev->data;
    2f34:	6904      	ldr	r4, [r0, #16]
	const struct hts221_config *cfg = dev->config;
    2f36:	6846      	ldr	r6, [r0, #4]

	data->dev = dev;
    2f38:	61a0      	str	r0, [r4, #24]
{
    2f3a:	4605      	mov	r5, r0

	/* setup data ready gpio interrupt */
	data->drdy_dev = device_get_binding(cfg->drdy_controller);
    2f3c:	68f0      	ldr	r0, [r6, #12]
    2f3e:	f001 f999 	bl	4274 <z_impl_device_get_binding>
    2f42:	61e0      	str	r0, [r4, #28]
	if (data->drdy_dev == NULL) {
    2f44:	2800      	cmp	r0, #0
    2f46:	d053      	beq.n	2ff0 <hts221_init_interrupt+0xc0>
			cfg->drdy_controller);
		return -EINVAL;
	}

	gpio_pin_configure(data->drdy_dev, cfg->drdy_pin,
			   GPIO_INPUT | cfg->drdy_flags);
    2f48:	68b3      	ldr	r3, [r6, #8]
	gpio_pin_configure(data->drdy_dev, cfg->drdy_pin,
    2f4a:	79b1      	ldrb	r1, [r6, #6]
    2f4c:	f443 7c80 	orr.w	ip, r3, #256	; 0x100
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    2f50:	04da      	lsls	r2, r3, #19
	const struct gpio_driver_api *api =
    2f52:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
    2f56:	f8d0 e010 	ldr.w	lr, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    2f5a:	d506      	bpl.n	2f6a <hts221_init_interrupt+0x3a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    2f5c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
    2f60:	d003      	beq.n	2f6a <hts221_init_interrupt+0x3a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    2f62:	07db      	lsls	r3, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    2f64:	bf48      	it	mi
    2f66:	f48c 6c40 	eormi.w	ip, ip, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2f6a:	f8de 3000 	ldr.w	r3, [lr]
    2f6e:	2701      	movs	r7, #1
    2f70:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    2f72:	f01c 0f01 	tst.w	ip, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2f76:	bf14      	ite	ne
    2f78:	433b      	orrne	r3, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2f7a:	43bb      	biceq	r3, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    2f7c:	f42c 5280 	bic.w	r2, ip, #4096	; 0x1000
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2f80:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    2f84:	f8d8 3000 	ldr.w	r3, [r8]
    2f88:	4798      	blx	r3

	gpio_init_callback(&data->drdy_cb, hts221_drdy_callback,
			   BIT(cfg->drdy_pin));
    2f8a:	79b3      	ldrb	r3, [r6, #6]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2f8c:	4a1a      	ldr	r2, [pc, #104]	; (2ff8 <hts221_init_interrupt+0xc8>)

	if (gpio_add_callback(data->drdy_dev, &data->drdy_cb) < 0) {
    2f8e:	69e0      	ldr	r0, [r4, #28]
			   BIT(cfg->drdy_pin));
    2f90:	2701      	movs	r7, #1
    2f92:	fa07 f303 	lsl.w	r3, r7, r3
	callback->pin_mask = pin_mask;
    2f96:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    2f9a:	6883      	ldr	r3, [r0, #8]
    2f9c:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->drdy_cb, hts221_drdy_callback,
    2f9e:	f104 0120 	add.w	r1, r4, #32
    2fa2:	b923      	cbnz	r3, 2fae <hts221_init_interrupt+0x7e>
		LOG_ERR("Could not set gpio callback.");
		return -EIO;
    2fa4:	f06f 0004 	mvn.w	r0, #4
#endif

	setup_drdy(dev, true);

	return 0;
}
    2fa8:	b004      	add	sp, #16
    2faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    2fae:	463a      	mov	r2, r7
    2fb0:	4798      	blx	r3
	if (gpio_add_callback(data->drdy_dev, &data->drdy_cb) < 0) {
    2fb2:	2800      	cmp	r0, #0
    2fb4:	dbf6      	blt.n	2fa4 <hts221_init_interrupt+0x74>
	uint8_t tx_buf[2] = {reg_addr, value};
    2fb6:	2222      	movs	r2, #34	; 0x22
	if (i2c_reg_write_byte(data->i2c, cfg->i2c_addr,
    2fb8:	6820      	ldr	r0, [r4, #0]
    2fba:	f88d 2000 	strb.w	r2, [sp]
    2fbe:	2204      	movs	r2, #4
    2fc0:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    2fc4:	2202      	movs	r2, #2
    2fc6:	88b3      	ldrh	r3, [r6, #4]
	msg.buf = (uint8_t *)buf;
    2fc8:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    2fcc:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    2fce:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    2fd2:	6882      	ldr	r2, [r0, #8]
    2fd4:	a901      	add	r1, sp, #4
    2fd6:	6896      	ldr	r6, [r2, #8]
    2fd8:	463a      	mov	r2, r7
    2fda:	47b0      	blx	r6
    2fdc:	2800      	cmp	r0, #0
    2fde:	dbe1      	blt.n	2fa4 <hts221_init_interrupt+0x74>
	data->work.handler = hts221_work_cb;
    2fe0:	4b06      	ldr	r3, [pc, #24]	; (2ffc <hts221_init_interrupt+0xcc>)
    2fe2:	63a3      	str	r3, [r4, #56]	; 0x38
	setup_drdy(dev, true);
    2fe4:	4628      	mov	r0, r5
    2fe6:	4639      	mov	r1, r7
    2fe8:	f002 fe91 	bl	5d0e <setup_drdy>
	return 0;
    2fec:	2000      	movs	r0, #0
    2fee:	e7db      	b.n	2fa8 <hts221_init_interrupt+0x78>
		return -EINVAL;
    2ff0:	f06f 0015 	mvn.w	r0, #21
    2ff4:	e7d8      	b.n	2fa8 <hts221_init_interrupt+0x78>
    2ff6:	bf00      	nop
    2ff8:	00005d71 	.word	0x00005d71
    2ffc:	00005d4b 	.word	0x00005d4b

00003000 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
    3000:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
    3002:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
    3004:	4908      	ldr	r1, [pc, #32]	; (3028 <regulator_fixed_init_onoff+0x28>)
{
    3006:	4604      	mov	r4, r0
	data->dev = dev;
    3008:	4628      	mov	r0, r5
    300a:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
    300e:	f002 f9a2 	bl	5356 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
    3012:	4906      	ldr	r1, [pc, #24]	; (302c <regulator_fixed_init_onoff+0x2c>)
    3014:	f105 0020 	add.w	r0, r5, #32
    3018:	f003 f99d 	bl	6356 <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
    301c:	6860      	ldr	r0, [r4, #4]
    301e:	f002 ff44 	bl	5eaa <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
    3022:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    3026:	bd38      	pop	{r3, r4, r5, pc}
    3028:	00006b00 	.word	0x00006b00
    302c:	00005f15 	.word	0x00005f15

00003030 <finalize_transition>:
{
    3030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
    3034:	1e1c      	subs	r4, r3, #0
{
    3036:	4605      	mov	r5, r0
    3038:	460f      	mov	r7, r1
    303a:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
    303c:	db10      	blt.n	3060 <finalize_transition+0x30>
    303e:	b17a      	cbz	r2, 3060 <finalize_transition+0x30>
    3040:	ea4f 4952 	mov.w	r9, r2, lsr #17
    3044:	03d6      	lsls	r6, r2, #15
    3046:	2300      	movs	r3, #0
    3048:	4a14      	ldr	r2, [pc, #80]	; (309c <finalize_transition+0x6c>)
    304a:	4630      	mov	r0, r6
    304c:	4649      	mov	r1, r9
    304e:	f7fd fc15 	bl	87c <__aeabi_uldivmod>
		    || k_is_pre_kernel()
    3052:	b110      	cbz	r0, 305a <finalize_transition+0x2a>
	return !z_sys_post_kernel;
    3054:	4b12      	ldr	r3, [pc, #72]	; (30a0 <finalize_transition+0x70>)
    3056:	781b      	ldrb	r3, [r3, #0]
    3058:	b943      	cbnz	r3, 306c <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    305a:	4640      	mov	r0, r8
    305c:	f003 fa8a 	bl	6574 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
    3060:	4621      	mov	r1, r4
    3062:	1d28      	adds	r0, r5, #4
    3064:	463b      	mov	r3, r7
}
    3066:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
    306a:	4718      	bx	r3
		} else {
			return (t * to_hz + off) / from_hz;
    306c:	480d      	ldr	r0, [pc, #52]	; (30a4 <finalize_transition+0x74>)
    306e:	4a0b      	ldr	r2, [pc, #44]	; (309c <finalize_transition+0x6c>)
			data->notify = notify;
    3070:	652f      	str	r7, [r5, #80]	; 0x50
    3072:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
    3074:	f04f 0303 	mov.w	r3, #3
    3078:	f149 0100 	adc.w	r1, r9, #0
    307c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    3080:	2300      	movs	r3, #0
    3082:	f7fd fbfb 	bl	87c <__aeabi_uldivmod>
    3086:	4602      	mov	r2, r0
    3088:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
    308a:	f105 0020 	add.w	r0, r5, #32
    308e:	f001 fc43 	bl	4918 <k_work_schedule>
			if (rc >= 0) {
    3092:	1e04      	subs	r4, r0, #0
    3094:	dbe4      	blt.n	3060 <finalize_transition+0x30>
}
    3096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    309a:	bf00      	nop
    309c:	000f4240 	.word	0x000f4240
    30a0:	20000a80 	.word	0x20000a80
    30a4:	000f423f 	.word	0x000f423f

000030a8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    30a8:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    30aa:	794b      	ldrb	r3, [r1, #5]
    30ac:	2b01      	cmp	r3, #1
    30ae:	d124      	bne.n	30fa <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    30b0:	798b      	ldrb	r3, [r1, #6]
    30b2:	2b03      	cmp	r3, #3
    30b4:	d121      	bne.n	30fa <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    30b6:	79cc      	ldrb	r4, [r1, #7]
    30b8:	b12c      	cbz	r4, 30c6 <uarte_nrfx_configure+0x1e>
    30ba:	2c01      	cmp	r4, #1
    30bc:	d11d      	bne.n	30fa <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    30be:	6843      	ldr	r3, [r0, #4]
    30c0:	685b      	ldr	r3, [r3, #4]
    30c2:	079b      	lsls	r3, r3, #30
    30c4:	d019      	beq.n	30fa <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    30c6:	790a      	ldrb	r2, [r1, #4]
    30c8:	b112      	cbz	r2, 30d0 <uarte_nrfx_configure+0x28>
    30ca:	2a02      	cmp	r2, #2
    30cc:	d115      	bne.n	30fa <uarte_nrfx_configure+0x52>
    30ce:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    30d0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    30d2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    30d4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    30d8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    30da:	d062      	beq.n	31a2 <uarte_nrfx_configure+0xfa>
    30dc:	d82b      	bhi.n	3136 <uarte_nrfx_configure+0x8e>
    30de:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    30e2:	d061      	beq.n	31a8 <uarte_nrfx_configure+0x100>
    30e4:	d814      	bhi.n	3110 <uarte_nrfx_configure+0x68>
    30e6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    30ea:	d05f      	beq.n	31ac <uarte_nrfx_configure+0x104>
    30ec:	d808      	bhi.n	3100 <uarte_nrfx_configure+0x58>
    30ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    30f2:	d05e      	beq.n	31b2 <uarte_nrfx_configure+0x10a>
    30f4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    30f8:	d05e      	beq.n	31b8 <uarte_nrfx_configure+0x110>
    30fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    30fe:	e04f      	b.n	31a0 <uarte_nrfx_configure+0xf8>
    3100:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3104:	d05b      	beq.n	31be <uarte_nrfx_configure+0x116>
    3106:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    310a:	d1f6      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    310c:	4b36      	ldr	r3, [pc, #216]	; (31e8 <uarte_nrfx_configure+0x140>)
    310e:	e03c      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    3110:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3114:	d056      	beq.n	31c4 <uarte_nrfx_configure+0x11c>
    3116:	d807      	bhi.n	3128 <uarte_nrfx_configure+0x80>
    3118:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    311c:	d054      	beq.n	31c8 <uarte_nrfx_configure+0x120>
    311e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3122:	d1ea      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3124:	4b31      	ldr	r3, [pc, #196]	; (31ec <uarte_nrfx_configure+0x144>)
    3126:	e030      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    3128:	f647 2612 	movw	r6, #31250	; 0x7a12
    312c:	42b3      	cmp	r3, r6
    312e:	d1e4      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3130:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3134:	e029      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    3136:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    313a:	d047      	beq.n	31cc <uarte_nrfx_configure+0x124>
    313c:	d813      	bhi.n	3166 <uarte_nrfx_configure+0xbe>
    313e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3142:	d046      	beq.n	31d2 <uarte_nrfx_configure+0x12a>
    3144:	d809      	bhi.n	315a <uarte_nrfx_configure+0xb2>
    3146:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    314a:	42b3      	cmp	r3, r6
    314c:	d043      	beq.n	31d6 <uarte_nrfx_configure+0x12e>
    314e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3152:	d1d2      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3154:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3158:	e017      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    315a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    315e:	d1cc      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3160:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3164:	e011      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    3166:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    316a:	d037      	beq.n	31dc <uarte_nrfx_configure+0x134>
    316c:	d808      	bhi.n	3180 <uarte_nrfx_configure+0xd8>
    316e:	4e20      	ldr	r6, [pc, #128]	; (31f0 <uarte_nrfx_configure+0x148>)
    3170:	42b3      	cmp	r3, r6
    3172:	d036      	beq.n	31e2 <uarte_nrfx_configure+0x13a>
    3174:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3178:	d1bf      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    317a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    317e:	e004      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    3180:	4e1c      	ldr	r6, [pc, #112]	; (31f4 <uarte_nrfx_configure+0x14c>)
    3182:	42b3      	cmp	r3, r6
    3184:	d1b9      	bne.n	30fa <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    318a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    318e:	6903      	ldr	r3, [r0, #16]
    3190:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3192:	4322      	orrs	r2, r4
    3194:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3196:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    319a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    319e:	2000      	movs	r0, #0
}
    31a0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    31a2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    31a6:	e7f0      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    31a8:	4b13      	ldr	r3, [pc, #76]	; (31f8 <uarte_nrfx_configure+0x150>)
    31aa:	e7ee      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    31ac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    31b0:	e7eb      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
    31b2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    31b6:	e7e8      	b.n	318a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    31b8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    31bc:	e7e5      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    31be:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    31c2:	e7e2      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    31c4:	4b0d      	ldr	r3, [pc, #52]	; (31fc <uarte_nrfx_configure+0x154>)
    31c6:	e7e0      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    31c8:	4b0d      	ldr	r3, [pc, #52]	; (3200 <uarte_nrfx_configure+0x158>)
    31ca:	e7de      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    31cc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    31d0:	e7db      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    31d2:	4b0c      	ldr	r3, [pc, #48]	; (3204 <uarte_nrfx_configure+0x15c>)
    31d4:	e7d9      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    31d6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    31da:	e7d6      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    31dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    31e0:	e7d3      	b.n	318a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    31e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    31e6:	e7d0      	b.n	318a <uarte_nrfx_configure+0xe2>
    31e8:	0013b000 	.word	0x0013b000
    31ec:	004ea000 	.word	0x004ea000
    31f0:	0003d090 	.word	0x0003d090
    31f4:	000f4240 	.word	0x000f4240
    31f8:	00275000 	.word	0x00275000
    31fc:	0075c000 	.word	0x0075c000
    3200:	003af000 	.word	0x003af000
    3204:	013a9000 	.word	0x013a9000

00003208 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    320a:	6906      	ldr	r6, [r0, #16]
{
    320c:	4605      	mov	r5, r0
    320e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3210:	f003 f841 	bl	6296 <k_is_in_isr>
    3214:	b910      	cbnz	r0, 321c <uarte_nrfx_poll_out+0x14>
    3216:	4b2c      	ldr	r3, [pc, #176]	; (32c8 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	b983      	cbnz	r3, 323e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    321c:	f04f 0320 	mov.w	r3, #32
    3220:	f3ef 8411 	mrs	r4, BASEPRI
    3224:	f383 8812 	msr	BASEPRI_MAX, r3
    3228:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    322c:	6868      	ldr	r0, [r5, #4]
    322e:	f002 ff0f 	bl	6050 <is_tx_ready.isra.0>
    3232:	bb28      	cbnz	r0, 3280 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3234:	f384 8811 	msr	BASEPRI, r4
    3238:	f3bf 8f6f 	isb	sy
}
    323c:	e7ee      	b.n	321c <uarte_nrfx_poll_out+0x14>
{
    323e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3240:	6868      	ldr	r0, [r5, #4]
    3242:	f002 ff05 	bl	6050 <is_tx_ready.isra.0>
    3246:	b970      	cbnz	r0, 3266 <uarte_nrfx_poll_out+0x5e>
    3248:	2001      	movs	r0, #1
    324a:	f002 ff5c 	bl	6106 <nrfx_busy_wait>
    324e:	3c01      	subs	r4, #1
    3250:	d1f6      	bne.n	3240 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    3252:	2100      	movs	r1, #0
    3254:	2021      	movs	r0, #33	; 0x21
    3256:	f001 fdf3 	bl	4e40 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    325a:	e7f0      	b.n	323e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    325c:	f384 8811 	msr	BASEPRI, r4
    3260:	f3bf 8f6f 	isb	sy
}
    3264:	e7f5      	b.n	3252 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3266:	f04f 0320 	mov.w	r3, #32
    326a:	f3ef 8411 	mrs	r4, BASEPRI
    326e:	f383 8812 	msr	BASEPRI_MAX, r3
    3272:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3276:	6868      	ldr	r0, [r5, #4]
    3278:	f002 feea 	bl	6050 <is_tx_ready.isra.0>
    327c:	2800      	cmp	r0, #0
    327e:	d0ed      	beq.n	325c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3280:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3284:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3286:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3288:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    328a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    328e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3292:	2200      	movs	r2, #0
    3294:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3298:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    329c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    32a0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    32a4:	684a      	ldr	r2, [r1, #4]
    32a6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    32a8:	bf41      	itttt	mi
    32aa:	2208      	movmi	r2, #8
    32ac:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    32b0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    32b4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32b8:	2201      	movs	r2, #1
    32ba:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    32bc:	f384 8811 	msr	BASEPRI, r4
    32c0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    32c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32c6:	bf00      	nop
    32c8:	20000a80 	.word	0x20000a80

000032cc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    32cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ce:	2200      	movs	r2, #0
    32d0:	4607      	mov	r7, r0
    32d2:	2101      	movs	r1, #1
    32d4:	2002      	movs	r0, #2
    32d6:	f7fe fd33 	bl	1d40 <z_arm_irq_priority_set>
    32da:	2002      	movs	r0, #2
    32dc:	f7fe fd12 	bl	1d04 <arch_irq_enable>
	return dev->config;
    32e0:	687d      	ldr	r5, [r7, #4]
	return dev->data;
    32e2:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    32e4:	682c      	ldr	r4, [r5, #0]
	nrf_gpio_pin_write(cfg->pseltxd, 1);
    32e6:	f8d5 c008 	ldr.w	ip, [r5, #8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    32ea:	2300      	movs	r3, #0
    32ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
    32f0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    *p_pin = pin_number & 0x1F;
    32f4:	f00c 031f 	and.w	r3, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    32f8:	2201      	movs	r2, #1
    32fa:	409a      	lsls	r2, r3
    reg->PIN_CNF[pin_number] = cnf;
    32fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
	data->dev = dev;
    3300:	6037      	str	r7, [r6, #0]
    p_reg->OUTSET = set_mask;
    3302:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    3306:	2203      	movs	r2, #3
    3308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    330c:	68ea      	ldr	r2, [r5, #12]
    330e:	1c50      	adds	r0, r2, #1
    3310:	d007      	beq.n	3322 <uarte_0_init+0x56>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3312:	7e28      	ldrb	r0, [r5, #24]
    *p_pin = pin_number & 0x1F;
    3314:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    3318:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    331c:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    331e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    3322:	f8c4 c50c 	str.w	ip, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3326:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    332a:	692a      	ldr	r2, [r5, #16]
    332c:	1c53      	adds	r3, r2, #1
    332e:	d009      	beq.n	3344 <uarte_0_init+0x78>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3330:	7e69      	ldrb	r1, [r5, #25]
    *p_pin = pin_number & 0x1F;
    3332:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    3336:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    333a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    333e:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    3340:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    3344:	6969      	ldr	r1, [r5, #20]
    3346:	1c48      	adds	r0, r1, #1
    3348:	d00c      	beq.n	3364 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
    334a:	f001 031f 	and.w	r3, r1, #31
    p_reg->OUTSET = set_mask;
    334e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3352:	2001      	movs	r0, #1
    3354:	4098      	lsls	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
    3356:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    335a:	f8cc 0508 	str.w	r0, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    335e:	2003      	movs	r0, #3
    3360:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    3364:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3368:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    336a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    336e:	1d31      	adds	r1, r6, #4
    3370:	f7ff fe9a 	bl	30a8 <uarte_nrfx_configure>
	if (err) {
    3374:	4607      	mov	r7, r0
    3376:	2800      	cmp	r0, #0
    3378:	d145      	bne.n	3406 <uarte_0_init+0x13a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    337a:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    337c:	0719      	lsls	r1, r3, #28
    337e:	d519      	bpl.n	33b4 <uarte_0_init+0xe8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3380:	f106 0012 	add.w	r0, r6, #18
    3384:	f000 fbb4 	bl	3af0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3388:	4b21      	ldr	r3, [pc, #132]	; (3410 <uarte_0_init+0x144>)
    338a:	4298      	cmp	r0, r3
    338c:	d13d      	bne.n	340a <uarte_0_init+0x13e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    338e:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3390:	00c3      	lsls	r3, r0, #3
    3392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3396:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    339a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    339e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    33a2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    33a6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    33aa:	4a1a      	ldr	r2, [pc, #104]	; (3414 <uarte_0_init+0x148>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    33ac:	2301      	movs	r3, #1
    33ae:	4083      	lsls	r3, r0
    33b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    33b4:	2308      	movs	r3, #8
    33b6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    33ba:	68eb      	ldr	r3, [r5, #12]
    33bc:	3301      	adds	r3, #1
    33be:	d00c      	beq.n	33da <uarte_0_init+0x10e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33c0:	2300      	movs	r3, #0
    33c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    33c6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    33ca:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    33ce:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    33d2:	2301      	movs	r3, #1
    33d4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33d8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    33da:	686b      	ldr	r3, [r5, #4]
    33dc:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    33de:	bf5c      	itt	pl
    33e0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    33e4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    33e8:	06db      	lsls	r3, r3, #27
    33ea:	bf44      	itt	mi
    33ec:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    33f0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    33f4:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    33f6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    33f8:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    33fc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3400:	2301      	movs	r3, #1
    3402:	60a3      	str	r3, [r4, #8]
    3404:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3406:	4638      	mov	r0, r7
    3408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    340a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    340e:	e7fa      	b.n	3406 <uarte_0_init+0x13a>
    3410:	0bad0000 	.word	0x0bad0000
    3414:	4001f000 	.word	0x4001f000

00003418 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    3418:	4a04      	ldr	r2, [pc, #16]	; (342c <sys_clock_timeout_handler+0x14>)
    341a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    341c:	1ac8      	subs	r0, r1, r3
    341e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3422:	4403      	add	r3, r0
    3424:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3426:	f001 be7f 	b.w	5128 <sys_clock_announce>
    342a:	bf00      	nop
    342c:	2000049c 	.word	0x2000049c

00003430 <set_absolute_alarm>:
{
    3430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3434:	0086      	lsls	r6, r0, #2
    3436:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    343a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    343e:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    3442:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3444:	b2a4      	uxth	r4, r4
    3446:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    344a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    344e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3452:	f8df 806c 	ldr.w	r8, [pc, #108]	; 34c0 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3456:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    345a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    345e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    3460:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3464:	eba3 0309 	sub.w	r3, r3, r9
    3468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    346c:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3470:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    3472:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    3476:	d102      	bne.n	347e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    3478:	2013      	movs	r0, #19
    347a:	f003 f87b 	bl	6574 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    347e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    3482:	1aab      	subs	r3, r5, r2
    3484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    3488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    348c:	bf88      	it	hi
    348e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3490:	2300      	movs	r3, #0
    3492:	6023      	str	r3, [r4, #0]
    3494:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3496:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    349a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    349e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    34a2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    34a6:	4599      	cmp	r9, r3
    34a8:	d006      	beq.n	34b8 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    34aa:	1aeb      	subs	r3, r5, r3
    34ac:	3b02      	subs	r3, #2
    34ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    34b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    34b6:	d801      	bhi.n	34bc <set_absolute_alarm+0x8c>
}
    34b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    34bc:	462b      	mov	r3, r5
    34be:	e7cf      	b.n	3460 <set_absolute_alarm+0x30>
    34c0:	40011000 	.word	0x40011000

000034c4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    34c4:	b570      	push	{r4, r5, r6, lr}
    34c6:	4d15      	ldr	r5, [pc, #84]	; (351c <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    34c8:	4c15      	ldr	r4, [pc, #84]	; (3520 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    34ca:	2600      	movs	r6, #0
    34cc:	682b      	ldr	r3, [r5, #0]
    34ce:	2000      	movs	r0, #0
    34d0:	b106      	cbz	r6, 34d4 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    34d2:	bd70      	pop	{r4, r5, r6, pc}
    34d4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    34d8:	03d2      	lsls	r2, r2, #15
    34da:	d5fa      	bpl.n	34d2 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34dc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    34e0:	2a00      	cmp	r2, #0
    34e2:	d0f6      	beq.n	34d2 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34e4:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    34e8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    34ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    34f0:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    34f4:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    34f8:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    34fc:	1a72      	subs	r2, r6, r1
    34fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    3502:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    3506:	bf88      	it	hi
    3508:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    350a:	2601      	movs	r6, #1
			if (handler) {
    350c:	b11b      	cbz	r3, 3516 <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    350e:	686a      	ldr	r2, [r5, #4]
    3510:	6028      	str	r0, [r5, #0]
    3512:	4798      	blx	r3
    3514:	e7da      	b.n	34cc <rtc_nrf_isr+0x8>
    3516:	602b      	str	r3, [r5, #0]
}
    3518:	e7db      	b.n	34d2 <rtc_nrf_isr+0xe>
    351a:	bf00      	nop
    351c:	20000490 	.word	0x20000490
    3520:	40011000 	.word	0x40011000

00003524 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    3524:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    3526:	4c0f      	ldr	r4, [pc, #60]	; (3564 <sys_clock_driver_init+0x40>)
    3528:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    352a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    352e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    3532:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    3536:	4b0c      	ldr	r3, [pc, #48]	; (3568 <sys_clock_driver_init+0x44>)
    3538:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    353c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3540:	2101      	movs	r1, #1
    3542:	462a      	mov	r2, r5
    3544:	2011      	movs	r0, #17
    3546:	f7fe fbfb 	bl	1d40 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    354a:	2011      	movs	r0, #17
    354c:	f7fe fbda 	bl	1d04 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3550:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3552:	4a06      	ldr	r2, [pc, #24]	; (356c <sys_clock_driver_init+0x48>)
    3554:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3556:	2002      	movs	r0, #2
    3558:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    355a:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    355c:	f7ff f83e 	bl	25dc <z_nrf_clock_control_lf_on>

	return 0;
}
    3560:	4628      	mov	r0, r5
    3562:	bd38      	pop	{r3, r4, r5, pc}
    3564:	40011000 	.word	0x40011000
    3568:	e000e100 	.word	0xe000e100
    356c:	20000498 	.word	0x20000498

00003570 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3570:	4a13      	ldr	r2, [pc, #76]	; (35c0 <sys_clock_set_timeout+0x50>)
    3572:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3576:	bf14      	ite	ne
    3578:	4603      	movne	r3, r0
    357a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    357c:	3b01      	subs	r3, #1
    357e:	2b00      	cmp	r3, #0
    3580:	dd1c      	ble.n	35bc <sys_clock_set_timeout+0x4c>
    3582:	4293      	cmp	r3, r2
    3584:	bfa8      	it	ge
    3586:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    3588:	4a0e      	ldr	r2, [pc, #56]	; (35c4 <sys_clock_set_timeout+0x54>)
    358a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    358e:	4a0e      	ldr	r2, [pc, #56]	; (35c8 <sys_clock_set_timeout+0x58>)
    3590:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3592:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    3594:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    3598:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    359c:	bf18      	it	ne
    359e:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    35a0:	3201      	adds	r2, #1
    35a2:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    35a4:	4a09      	ldr	r2, [pc, #36]	; (35cc <sys_clock_set_timeout+0x5c>)
    35a6:	480a      	ldr	r0, [pc, #40]	; (35d0 <sys_clock_set_timeout+0x60>)
    35a8:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    35aa:	2000      	movs	r0, #0
    35ac:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    35ae:	4a04      	ldr	r2, [pc, #16]	; (35c0 <sys_clock_set_timeout+0x50>)
    35b0:	4293      	cmp	r3, r2
    35b2:	bf94      	ite	ls
    35b4:	18c9      	addls	r1, r1, r3
    35b6:	1889      	addhi	r1, r1, r2
    35b8:	f7ff bf3a 	b.w	3430 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    35bc:	2300      	movs	r3, #0
    35be:	e7e3      	b.n	3588 <sys_clock_set_timeout+0x18>
    35c0:	007fffff 	.word	0x007fffff
    35c4:	40011000 	.word	0x40011000
    35c8:	2000049c 	.word	0x2000049c
    35cc:	20000490 	.word	0x20000490
    35d0:	00003419 	.word	0x00003419

000035d4 <sys_clock_elapsed>:
    35d4:	4b04      	ldr	r3, [pc, #16]	; (35e8 <sys_clock_elapsed+0x14>)
    35d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    35da:	4b04      	ldr	r3, [pc, #16]	; (35ec <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	1ac0      	subs	r0, r0, r3
}
    35e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	40011000 	.word	0x40011000
    35ec:	2000049c 	.word	0x2000049c

000035f0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    35f0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    35f4:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    35f8:	2a06      	cmp	r2, #6
    35fa:	d109      	bne.n	3610 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    35fc:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    3600:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3604:	3b03      	subs	r3, #3
    3606:	2b04      	cmp	r3, #4
    3608:	d802      	bhi.n	3610 <nrf52_errata_16+0x20>
    360a:	4a02      	ldr	r2, [pc, #8]	; (3614 <nrf52_errata_16+0x24>)
    360c:	5cd0      	ldrb	r0, [r2, r3]
    360e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3610:	2000      	movs	r0, #0
    #endif
}
    3612:	4770      	bx	lr
    3614:	00006e07 	.word	0x00006e07

00003618 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3618:	4a02      	ldr	r2, [pc, #8]	; (3624 <nvmc_wait+0xc>)
    361a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    361e:	2b00      	cmp	r3, #0
    3620:	d0fb      	beq.n	361a <nvmc_wait+0x2>
}
    3622:	4770      	bx	lr
    3624:	4001e000 	.word	0x4001e000

00003628 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3628:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    362a:	f002 fd5d 	bl	60e8 <nrf52_errata_108>
    362e:	b140      	cbz	r0, 3642 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3634:	4a90      	ldr	r2, [pc, #576]	; (3878 <SystemInit+0x250>)
    3636:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    363a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    363e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    3642:	f7ff ffd5 	bl	35f0 <nrf52_errata_16>
    3646:	b110      	cbz	r0, 364e <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3648:	4b8c      	ldr	r3, [pc, #560]	; (387c <SystemInit+0x254>)
    364a:	4a8d      	ldr	r2, [pc, #564]	; (3880 <SystemInit+0x258>)
    364c:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    364e:	f002 fd4b 	bl	60e8 <nrf52_errata_108>
    3652:	b148      	cbz	r0, 3668 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    365c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    3660:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3664:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3668:	f7ff ffc2 	bl	35f0 <nrf52_errata_16>
    366c:	b130      	cbz	r0, 367c <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    366e:	4a85      	ldr	r2, [pc, #532]	; (3884 <SystemInit+0x25c>)
    3670:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    3674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3678:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    367c:	f002 fd34 	bl	60e8 <nrf52_errata_108>
    3680:	b140      	cbz	r0, 3694 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    3682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3686:	2200      	movs	r2, #0
    3688:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    368c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3690:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3694:	f7ff ffac 	bl	35f0 <nrf52_errata_16>
    3698:	b120      	cbz	r0, 36a4 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    369a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    369e:	2203      	movs	r2, #3
    36a0:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    36a4:	f7ff ffa4 	bl	35f0 <nrf52_errata_16>
    36a8:	b160      	cbz	r0, 36c4 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    36aa:	4b77      	ldr	r3, [pc, #476]	; (3888 <SystemInit+0x260>)
    36ac:	2205      	movs	r2, #5
    36ae:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    36b2:	2201      	movs	r2, #1
    36b4:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    36b8:	2200      	movs	r2, #0
    36ba:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    36be:	223f      	movs	r2, #63	; 0x3f
    36c0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    36c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    36c8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    36cc:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    36ce:	bf09      	itett	eq
    36d0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    36d4:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    36d8:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    36dc:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    36e0:	bf08      	it	eq
    36e2:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    36e6:	2a06      	cmp	r2, #6
    36e8:	d14d      	bne.n	3786 <SystemInit+0x15e>
            {
                switch(var2)
    36ea:	3b03      	subs	r3, #3
    36ec:	2b04      	cmp	r3, #4
    36ee:	d803      	bhi.n	36f8 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    36f0:	4a66      	ldr	r2, [pc, #408]	; (388c <SystemInit+0x264>)
    36f2:	5cd3      	ldrb	r3, [r2, r3]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d046      	beq.n	3786 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    36f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    36fc:	4b64      	ldr	r3, [pc, #400]	; (3890 <SystemInit+0x268>)
    36fe:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3702:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3706:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    370a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    370e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3712:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3716:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    371a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    371e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3722:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3726:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    372a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    372e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3732:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3736:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    373a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    373e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3742:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3746:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    374a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    374e:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3752:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3756:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    375a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    375e:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3762:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3766:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    376a:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    376e:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3772:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3776:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    377a:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    377e:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3782:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    3786:	f002 fcaf 	bl	60e8 <nrf52_errata_108>
    378a:	b148      	cbz	r0, 37a0 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    378c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3794:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3798:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    379c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    37a0:	f002 fca2 	bl	60e8 <nrf52_errata_108>
    37a4:	b148      	cbz	r0, 37ba <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    37a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    37ae:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    37b0:	bf44      	itt	mi
    37b2:	f06f 0201 	mvnmi.w	r2, #1
    37b6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    37ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    37be:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    37c2:	2a06      	cmp	r2, #6
    37c4:	d126      	bne.n	3814 <SystemInit+0x1ec>
            {
                switch(var2)
    37c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    37ca:	3b03      	subs	r3, #3
    37cc:	2b04      	cmp	r3, #4
    37ce:	d802      	bhi.n	37d6 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    37d0:	4a30      	ldr	r2, [pc, #192]	; (3894 <SystemInit+0x26c>)
    37d2:	5cd3      	ldrb	r3, [r2, r3]
    37d4:	b163      	cbz	r3, 37f0 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    37d6:	4a30      	ldr	r2, [pc, #192]	; (3898 <SystemInit+0x270>)
    37d8:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    37dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    37e0:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    37e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    37e8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    37ec:	2b06      	cmp	r3, #6
    37ee:	d111      	bne.n	3814 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    37f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    37f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    37f8:	3b03      	subs	r3, #3
    37fa:	2b04      	cmp	r3, #4
    37fc:	d802      	bhi.n	3804 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    37fe:	4a27      	ldr	r2, [pc, #156]	; (389c <SystemInit+0x274>)
    3800:	5cd3      	ldrb	r3, [r2, r3]
    3802:	b13b      	cbz	r3, 3814 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3804:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3808:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    380c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3810:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3814:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3818:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    381c:	2a00      	cmp	r2, #0
    381e:	db03      	blt.n	3828 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3820:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3824:	2b00      	cmp	r3, #0
    3826:	da22      	bge.n	386e <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3828:	491d      	ldr	r1, [pc, #116]	; (38a0 <SystemInit+0x278>)
    382a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    382c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3830:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3834:	2415      	movs	r4, #21
    nvmc_wait();
    3836:	f7ff feef 	bl	3618 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    383a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    383e:	f7ff feeb 	bl	3618 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3842:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3846:	f7ff fee7 	bl	3618 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    384a:	2300      	movs	r3, #0
    384c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3850:	f7ff fee2 	bl	3618 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3854:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3858:	490a      	ldr	r1, [pc, #40]	; (3884 <SystemInit+0x25c>)
    385a:	4b12      	ldr	r3, [pc, #72]	; (38a4 <SystemInit+0x27c>)
    385c:	68ca      	ldr	r2, [r1, #12]
    385e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3862:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3864:	60cb      	str	r3, [r1, #12]
    3866:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    386a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    386c:	e7fd      	b.n	386a <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    386e:	4b0e      	ldr	r3, [pc, #56]	; (38a8 <SystemInit+0x280>)
    3870:	4a0e      	ldr	r2, [pc, #56]	; (38ac <SystemInit+0x284>)
    3872:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3874:	bd10      	pop	{r4, pc}
    3876:	bf00      	nop
    3878:	40013000 	.word	0x40013000
    387c:	4007c000 	.word	0x4007c000
    3880:	baadf00d 	.word	0xbaadf00d
    3884:	e000ed00 	.word	0xe000ed00
    3888:	40005000 	.word	0x40005000
    388c:	00006df8 	.word	0x00006df8
    3890:	4000c000 	.word	0x4000c000
    3894:	00006dfd 	.word	0x00006dfd
    3898:	40001000 	.word	0x40001000
    389c:	00006e02 	.word	0x00006e02
    38a0:	4001e000 	.word	0x4001e000
    38a4:	05fa0004 	.word	0x05fa0004
    38a8:	200000a8 	.word	0x200000a8
    38ac:	03d09000 	.word	0x03d09000

000038b0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    38b0:	4b04      	ldr	r3, [pc, #16]	; (38c4 <nrfx_clock_init+0x14>)
    38b2:	791a      	ldrb	r2, [r3, #4]
    38b4:	b922      	cbnz	r2, 38c0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    38b6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    38b8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    38ba:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    38bc:	4802      	ldr	r0, [pc, #8]	; (38c8 <nrfx_clock_init+0x18>)
    38be:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    38c0:	4802      	ldr	r0, [pc, #8]	; (38cc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    38c2:	4770      	bx	lr
    38c4:	200004a0 	.word	0x200004a0
    38c8:	0bad0000 	.word	0x0bad0000
    38cc:	0bad000c 	.word	0x0bad000c

000038d0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    38d0:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    38d2:	b110      	cbz	r0, 38da <nrfx_clock_start+0xa>
    38d4:	2801      	cmp	r0, #1
    38d6:	d034      	beq.n	3942 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    38d8:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    38da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38de:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    38e2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    38e6:	03c9      	lsls	r1, r1, #15
    38e8:	d529      	bpl.n	393e <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    38ea:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    38ee:	2a01      	cmp	r2, #1
    38f0:	d125      	bne.n	393e <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    38f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38fa:	2200      	movs	r2, #0
    38fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3900:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    3904:	2202      	movs	r2, #2
    3906:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    390a:	4a13      	ldr	r2, [pc, #76]	; (3958 <nrfx_clock_start+0x88>)
    390c:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3910:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    3914:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    3918:	4b10      	ldr	r3, [pc, #64]	; (395c <nrfx_clock_start+0x8c>)
    391a:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    391c:	f044 0101 	orr.w	r1, r4, #1
    3920:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    3922:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3924:	6859      	ldr	r1, [r3, #4]
    3926:	1b49      	subs	r1, r1, r5
    3928:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    392c:	d3fa      	bcc.n	3924 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    392e:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    3934:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    3938:	2201      	movs	r2, #1
    393a:	609a      	str	r2, [r3, #8]
}
    393c:	e7cc      	b.n	38d8 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    393e:	2200      	movs	r2, #0
    3940:	e7d7      	b.n	38f2 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3946:	2200      	movs	r2, #0
    3948:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    394c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    3950:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3954:	6018      	str	r0, [r3, #0]
}
    3956:	e7bf      	b.n	38d8 <nrfx_clock_start+0x8>
    3958:	e000ed00 	.word	0xe000ed00
    395c:	e0001000 	.word	0xe0001000

00003960 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3960:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3962:	b110      	cbz	r0, 396a <nrfx_clock_stop+0xa>
    3964:	2801      	cmp	r0, #1
    3966:	d017      	beq.n	3998 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3968:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    396a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    396e:	2302      	movs	r3, #2
    3970:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3974:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    3978:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    397c:	2301      	movs	r3, #1
    397e:	60e3      	str	r3, [r4, #12]
    3980:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3984:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3988:	03db      	lsls	r3, r3, #15
    398a:	d5ed      	bpl.n	3968 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    398c:	2001      	movs	r0, #1
    398e:	f002 fbba 	bl	6106 <nrfx_busy_wait>
    3992:	3d01      	subs	r5, #1
    3994:	d1f6      	bne.n	3984 <nrfx_clock_stop+0x24>
    3996:	e7e7      	b.n	3968 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    3998:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    399c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    399e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39a2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    39a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39aa:	6060      	str	r0, [r4, #4]
    39ac:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    39b0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    39b4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    39b8:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    39ba:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    39be:	d505      	bpl.n	39cc <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    39c0:	b123      	cbz	r3, 39cc <nrfx_clock_stop+0x6c>
    39c2:	2001      	movs	r0, #1
    39c4:	f002 fb9f 	bl	6106 <nrfx_busy_wait>
    39c8:	3d01      	subs	r5, #1
    39ca:	d1f1      	bne.n	39b0 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    39cc:	4b01      	ldr	r3, [pc, #4]	; (39d4 <nrfx_clock_stop+0x74>)
    39ce:	2200      	movs	r2, #0
    39d0:	715a      	strb	r2, [r3, #5]
    39d2:	e7c9      	b.n	3968 <nrfx_clock_stop+0x8>
    39d4:	200004a0 	.word	0x200004a0

000039d8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    39dc:	b510      	push	{r4, lr}
    39de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    39e2:	b16a      	cbz	r2, 3a00 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39e4:	2200      	movs	r2, #0
    39e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    39ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    39ee:	2201      	movs	r2, #1
    39f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    39f4:	4b11      	ldr	r3, [pc, #68]	; (3a3c <nrfx_power_clock_irq_handler+0x64>)
    39f6:	7958      	ldrb	r0, [r3, #5]
    39f8:	b910      	cbnz	r0, 3a00 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    39fa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3a08:	b172      	cbz	r2, 3a28 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a0a:	2200      	movs	r2, #0
    3a0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3a10:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a18:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3a1c:	0792      	lsls	r2, r2, #30
    3a1e:	d104      	bne.n	3a2a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a20:	2201      	movs	r2, #1
    3a22:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a26:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a28:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3a2a:	2202      	movs	r2, #2
    3a2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a30:	4b02      	ldr	r3, [pc, #8]	; (3a3c <nrfx_power_clock_irq_handler+0x64>)
}
    3a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a36:	681b      	ldr	r3, [r3, #0]
    3a38:	2001      	movs	r0, #1
    3a3a:	4718      	bx	r3
    3a3c:	200004a0 	.word	0x200004a0

00003a40 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    3a40:	2301      	movs	r3, #1
    3a42:	fa03 f000 	lsl.w	r0, r3, r0
    3a46:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3a48:	b193      	cbz	r3, 3a70 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    3a4a:	f04f 0320 	mov.w	r3, #32
    3a4e:	f3ef 8111 	mrs	r1, BASEPRI
    3a52:	f383 8812 	msr	BASEPRI_MAX, r3
    3a56:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    3a5a:	4a06      	ldr	r2, [pc, #24]	; (3a74 <nrfx_gpiote_channel_free+0x34>)
    3a5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    3a5e:	ea23 0000 	bic.w	r0, r3, r0
    3a62:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    3a64:	f381 8811 	msr	BASEPRI, r1
    3a68:	f3bf 8f6f 	isb	sy
    3a6c:	4802      	ldr	r0, [pc, #8]	; (3a78 <nrfx_gpiote_channel_free+0x38>)
    3a6e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    3a70:	4802      	ldr	r0, [pc, #8]	; (3a7c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3a72:	4770      	bx	lr
    3a74:	200004a8 	.word	0x200004a8
    3a78:	0bad0000 	.word	0x0bad0000
    3a7c:	0bad0004 	.word	0x0bad0004

00003a80 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a84:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    3a86:	f8df e05c 	ldr.w	lr, [pc, #92]	; 3ae4 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    3a8a:	4817      	ldr	r0, [pc, #92]	; (3ae8 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    3a8c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3aec <nrfx_gpiote_channel_alloc+0x6c>
{
    3a90:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3a92:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    3a94:	2601      	movs	r6, #1
    3a96:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    3a98:	f04f 0120 	mov.w	r1, #32
    3a9c:	f3ef 8c11 	mrs	ip, BASEPRI
    3aa0:	f381 8812 	msr	BASEPRI_MAX, r1
    3aa4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    3aa8:	fa22 f103 	lsr.w	r1, r2, r3
    3aac:	07c9      	lsls	r1, r1, #31
    3aae:	d50a      	bpl.n	3ac6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    3ab0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    3ab4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    3ab8:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    3aba:	bf01      	itttt	eq
    3abc:	4339      	orreq	r1, r7
    3abe:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    3ac2:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    3ac4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    3ac6:	f38c 8811 	msr	BASEPRI, ip
    3aca:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    3ace:	4540      	cmp	r0, r8
    3ad0:	d005      	beq.n	3ade <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    3ad2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    3ad6:	439a      	bics	r2, r3
    3ad8:	f104 0401 	add.w	r4, r4, #1
    3adc:	d1db      	bne.n	3a96 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ae2:	bf00      	nop
    3ae4:	200004a8 	.word	0x200004a8
    3ae8:	0bad0002 	.word	0x0bad0002
    3aec:	0bad0000 	.word	0x0bad0000

00003af0 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    3af4:	4a14      	ldr	r2, [pc, #80]	; (3b48 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    3af6:	4e15      	ldr	r6, [pc, #84]	; (3b4c <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    3af8:	4f15      	ldr	r7, [pc, #84]	; (3b50 <nrfx_ppi_channel_alloc+0x60>)
{
    3afa:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    3afc:	4815      	ldr	r0, [pc, #84]	; (3b54 <nrfx_ppi_channel_alloc+0x64>)
{
    3afe:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    3b00:	f04f 0e01 	mov.w	lr, #1
    3b04:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    3b08:	f04f 0320 	mov.w	r3, #32
    3b0c:	f3ef 8811 	mrs	r8, BASEPRI
    3b10:	f383 8812 	msr	BASEPRI_MAX, r3
    3b14:	f3bf 8f6f 	isb	sy
    3b18:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3b1c:	4213      	tst	r3, r2
    3b1e:	d007      	beq.n	3b30 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    3b20:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3b22:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    3b24:	bf01      	itttt	eq
    3b26:	4319      	orreq	r1, r3
    3b28:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    3b2a:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    3b2e:	4638      	moveq	r0, r7
	__asm__ volatile(
    3b30:	f388 8811 	msr	BASEPRI, r8
    3b34:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    3b38:	42b8      	cmp	r0, r7
    3b3a:	d003      	beq.n	3b44 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    3b3c:	439a      	bics	r2, r3
    3b3e:	f104 0401 	add.w	r4, r4, #1
    3b42:	d1df      	bne.n	3b04 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b48:	000fffff 	.word	0x000fffff
    3b4c:	200004f8 	.word	0x200004f8
    3b50:	0bad0000 	.word	0x0bad0000
    3b54:	0bad0002 	.word	0x0bad0002

00003b58 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    3b58:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b5a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    3b5e:	b087      	sub	sp, #28
    3b60:	4604      	mov	r4, r0
    3b62:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3b64:	b1f3      	cbz	r3, 3ba4 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b66:	2300      	movs	r3, #0
    3b68:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    3b6c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b70:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3b74:	b9b3      	cbnz	r3, 3ba4 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    3b76:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3b78:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3b7c:	2302      	movs	r3, #2
    3b7e:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3b80:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    3b82:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b86:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    3b8a:	b11b      	cbz	r3, 3b94 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    3b8c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3b90:	059f      	lsls	r7, r3, #22
    3b92:	d402      	bmi.n	3b9a <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b94:	2301      	movs	r3, #1
    3b96:	6223      	str	r3, [r4, #32]
    3b98:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    3b9a:	2301      	movs	r3, #1
    3b9c:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    3ba0:	b007      	add	sp, #28
    3ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ba4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d044      	beq.n	3c36 <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bac:	2300      	movs	r3, #0
    3bae:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3bb2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    3bb6:	6a2b      	ldr	r3, [r5, #32]
    3bb8:	065e      	lsls	r6, r3, #25
    3bba:	d40a      	bmi.n	3bd2 <twim_irq_handler+0x7a>
    3bbc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3bc0:	b93b      	cbnz	r3, 3bd2 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    3bc2:	4629      	mov	r1, r5
    3bc4:	4620      	mov	r0, r4
    3bc6:	f002 faaa 	bl	611e <xfer_completeness_check>
    3bca:	f080 0001 	eor.w	r0, r0, #1
    3bce:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    3bd2:	6a2b      	ldr	r3, [r5, #32]
    3bd4:	f013 0c04 	ands.w	ip, r3, #4
    3bd8:	d13e      	bne.n	3c58 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
    3bda:	f105 070c 	add.w	r7, r5, #12
    3bde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3be0:	ae01      	add	r6, sp, #4
    3be2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
    3be4:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    3be8:	683b      	ldr	r3, [r7, #0]
    3bea:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    3bee:	6033      	str	r3, [r6, #0]
    3bf0:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    3bf4:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    3bf8:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    3bfc:	f1be 0f00 	cmp.w	lr, #0
    3c00:	d002      	beq.n	3c08 <twim_irq_handler+0xb0>
    3c02:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3c06:	b33b      	cbz	r3, 3c58 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
    3c08:	2300      	movs	r3, #0
    3c0a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    3c0e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    3c10:	4b2e      	ldr	r3, [pc, #184]	; (3ccc <twim_irq_handler+0x174>)
    3c12:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3c16:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	ea4f 3214 	mov.w	r2, r4, lsr #12
    3c20:	db1a      	blt.n	3c58 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c22:	f002 011f 	and.w	r1, r2, #31
    3c26:	095b      	lsrs	r3, r3, #5
    3c28:	2201      	movs	r2, #1
    3c2a:	408a      	lsls	r2, r1
    3c2c:	3360      	adds	r3, #96	; 0x60
    3c2e:	4928      	ldr	r1, [pc, #160]	; (3cd0 <twim_irq_handler+0x178>)
    3c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3c34:	e010      	b.n	3c58 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c36:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3c3a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    3c3e:	7b2b      	ldrb	r3, [r5, #12]
    3c40:	bb23      	cbnz	r3, 3c8c <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
    3c42:	f105 070c 	add.w	r7, r5, #12
    3c46:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3c48:	ae01      	add	r6, sp, #4
    3c4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3c4c:	683b      	ldr	r3, [r7, #0]
    3c4e:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    3c50:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3c54:	2b00      	cmp	r3, #0
    3c56:	d0d8      	beq.n	3c0a <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
    3c58:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3c5c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    3c60:	0798      	lsls	r0, r3, #30
    3c62:	d525      	bpl.n	3cb0 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    3c64:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    3c66:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    3c6a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3c6e:	b90b      	cbnz	r3, 3c74 <twim_irq_handler+0x11c>
        p_cb->busy = false;
    3c70:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    3c74:	6a2b      	ldr	r3, [r5, #32]
    3c76:	075b      	lsls	r3, r3, #29
    3c78:	d503      	bpl.n	3c82 <twim_irq_handler+0x12a>
    3c7a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d08e      	beq.n	3ba0 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    3c82:	e9d5 3100 	ldrd	r3, r1, [r5]
    3c86:	4668      	mov	r0, sp
    3c88:	4798      	blx	r3
    3c8a:	e789      	b.n	3ba0 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    3c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
    3c90:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    3c94:	f240 2302 	movw	r3, #514	; 0x202
    3c98:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    3c9a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    3c9e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3ca2:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    3ca4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ca8:	2301      	movs	r3, #1
    3caa:	60a3      	str	r3, [r4, #8]
    3cac:	6223      	str	r3, [r4, #32]
            return;
    3cae:	e777      	b.n	3ba0 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    3cb0:	0759      	lsls	r1, r3, #29
    3cb2:	d501      	bpl.n	3cb8 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    3cb4:	2302      	movs	r3, #2
    3cb6:	e7d6      	b.n	3c66 <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    3cb8:	07da      	lsls	r2, r3, #31
    3cba:	d501      	bpl.n	3cc0 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    3cbc:	2303      	movs	r3, #3
    3cbe:	e7d2      	b.n	3c66 <twim_irq_handler+0x10e>
    else if (p_cb->error)
    3cc0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d0ce      	beq.n	3c66 <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    3cc8:	2304      	movs	r3, #4
    3cca:	e7cc      	b.n	3c66 <twim_irq_handler+0x10e>
    3ccc:	019c0202 	.word	0x019c0202
    3cd0:	e000e100 	.word	0xe000e100

00003cd4 <nrfx_twim_init>:
{
    3cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3cd8:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3cdc:	4d1d      	ldr	r5, [pc, #116]	; (3d54 <nrfx_twim_init+0x80>)
    3cde:	2734      	movs	r7, #52	; 0x34
    3ce0:	fb07 f708 	mul.w	r7, r7, r8
    3ce4:	19ec      	adds	r4, r5, r7
    3ce6:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
    3cea:	bb8e      	cbnz	r6, 3d50 <nrfx_twim_init+0x7c>
    p_cb->int_mask        = 0;
    3cec:	60a6      	str	r6, [r4, #8]
    p_cb->repeated        = false;
    3cee:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->busy            = false;
    3cf2:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    TWIM_PIN_INIT(p_config->scl, drive);
    3cf6:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
    3cf8:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3cfa:	7b4b      	ldrb	r3, [r1, #13]
    3cfc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    *p_pin = pin_number & 0x1F;
    3d00:	f006 031f 	and.w	r3, r6, #31
    p_cb->handler         = event_handler;
    3d04:	51ea      	str	r2, [r5, r7]
    reg->PIN_CNF[pin_number] = cnf;
    3d06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3d0a:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    3d0e:	f240 6c0c 	movw	ip, #1548	; 0x60c
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3d12:	6800      	ldr	r0, [r0, #0]
    3d14:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
    3d18:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    3d1a:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    3d1e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3d22:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    3d26:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
    3d28:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    3d2c:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
    3d30:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    3d34:	b11a      	cbz	r2, 3d3e <nrfx_twim_init+0x6a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    3d36:	f340 3007 	sbfx	r0, r0, #12, #8
    3d3a:	f7fd ffe3 	bl	1d04 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3d3e:	2334      	movs	r3, #52	; 0x34
    3d40:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
    3d44:	4804      	ldr	r0, [pc, #16]	; (3d58 <nrfx_twim_init+0x84>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3d46:	2301      	movs	r3, #1
    3d48:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    3d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    3d50:	4802      	ldr	r0, [pc, #8]	; (3d5c <nrfx_twim_init+0x88>)
    3d52:	e7fb      	b.n	3d4c <nrfx_twim_init+0x78>
    3d54:	200004fc 	.word	0x200004fc
    3d58:	0bad0000 	.word	0x0bad0000
    3d5c:	0bad0005 	.word	0x0bad0005

00003d60 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    3d60:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3d62:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    3d64:	2106      	movs	r1, #6
    3d66:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    3d6a:	4b04      	ldr	r3, [pc, #16]	; (3d7c <nrfx_twim_enable+0x1c>)
    3d6c:	2134      	movs	r1, #52	; 0x34
    3d6e:	fb01 3302 	mla	r3, r1, r2, r3
    3d72:	2202      	movs	r2, #2
    3d74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop
    3d7c:	200004fc 	.word	0x200004fc

00003d80 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3d80:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    3d82:	4b0c      	ldr	r3, [pc, #48]	; (3db4 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3d84:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    3d86:	2034      	movs	r0, #52	; 0x34
    3d88:	fb00 3301 	mla	r3, r0, r1, r3
    3d8c:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    3d8e:	480a      	ldr	r0, [pc, #40]	; (3db8 <nrfx_twim_disable+0x38>)
    3d90:	6099      	str	r1, [r3, #8]
    3d92:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    3d96:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    3d9a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    3d9e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    3da2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3da6:	2201      	movs	r2, #1
    3da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    3dac:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    3db0:	4770      	bx	lr
    3db2:	bf00      	nop
    3db4:	200004fc 	.word	0x200004fc
    3db8:	019c0202 	.word	0x019c0202

00003dbc <nrfx_twim_xfer>:
{
    3dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    3dc0:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 4094 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3dc4:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    3dc8:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    3dca:	2334      	movs	r3, #52	; 0x34
    3dcc:	fb03 c30e 	mla	r3, r3, lr, ip
{
    3dd0:	4617      	mov	r7, r2
    p_cb->error = false;
    3dd2:	2200      	movs	r2, #0
    3dd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3dd8:	684b      	ldr	r3, [r1, #4]
{
    3dda:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3ddc:	b14b      	cbz	r3, 3df2 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3dde:	68cb      	ldr	r3, [r1, #12]
    3de0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3de8:	d003      	beq.n	3df2 <nrfx_twim_xfer+0x36>
        return err_code;
    3dea:	4eab      	ldr	r6, [pc, #684]	; (4098 <nrfx_twim_xfer+0x2dc>)
}
    3dec:	4630      	mov	r0, r6
    3dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    3df2:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    3df4:	4ba9      	ldr	r3, [pc, #676]	; (409c <nrfx_twim_xfer+0x2e0>)
    3df6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    3dfa:	fb06 c60e 	mla	r6, r6, lr, ip
    3dfe:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    3e02:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    3e06:	b123      	cbz	r3, 3e12 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3e08:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    3e0a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    3e0e:	4ea4      	ldr	r6, [pc, #656]	; (40a0 <nrfx_twim_xfer+0x2e4>)
    3e10:	e7ec      	b.n	3dec <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    3e12:	f017 0f14 	tst.w	r7, #20
    3e16:	bf0c      	ite	eq
    3e18:	2301      	moveq	r3, #1
    3e1a:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    3e1c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    3e20:	46a9      	mov	r9, r5
    3e22:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    3e26:	f106 080c 	add.w	r8, r6, #12
    3e2a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    3e2e:	f8d9 3000 	ldr.w	r3, [r9]
    3e32:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    3e36:	f3c7 1300 	ubfx	r3, r7, #4, #1
    3e3a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    3e3e:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    3e40:	786b      	ldrb	r3, [r5, #1]
    3e42:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e46:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    3e4a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3e4e:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    3e52:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    3e56:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    3e5a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    3e5e:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    3e62:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    3e66:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    3e6a:	bf18      	it	ne
    3e6c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    3e6e:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    3e72:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    3e76:	bf18      	it	ne
    3e78:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    3e7a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    3e7e:	782a      	ldrb	r2, [r5, #0]
    3e80:	2a03      	cmp	r2, #3
    3e82:	f200 80b5 	bhi.w	3ff0 <nrfx_twim_xfer+0x234>
    3e86:	e8df f002 	tbb	[pc, r2]
    3e8a:	a084      	.short	0xa084
    3e8c:	0269      	.short	0x0269
    3e8e:	692b      	ldr	r3, [r5, #16]
    3e90:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3e94:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    3e98:	d1a7      	bne.n	3dea <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    3e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
    3e9e:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3ea2:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3ea4:	6869      	ldr	r1, [r5, #4]
    3ea6:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3eaa:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3eae:	2100      	movs	r1, #0
    3eb0:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    3eb4:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3eb8:	2001      	movs	r0, #1
    3eba:	6220      	str	r0, [r4, #32]
    3ebc:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ebe:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d0fb      	beq.n	3ebe <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ec6:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    3eca:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3ece:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3ed0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3ed4:	2334      	movs	r3, #52	; 0x34
    3ed6:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    3eda:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    3ede:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3ee2:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3ee4:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3ee6:	4e6f      	ldr	r6, [pc, #444]	; (40a4 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    3ee8:	0739      	lsls	r1, r7, #28
    3eea:	d406      	bmi.n	3efa <nrfx_twim_xfer+0x13e>
    3eec:	2a03      	cmp	r2, #3
    3eee:	d004      	beq.n	3efa <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ef0:	2201      	movs	r2, #1
    3ef2:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    3ef4:	686b      	ldr	r3, [r5, #4]
    3ef6:	b903      	cbnz	r3, 3efa <nrfx_twim_xfer+0x13e>
    3ef8:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    3efa:	2334      	movs	r3, #52	; 0x34
    3efc:	fb03 f30e 	mul.w	r3, r3, lr
    3f00:	eb0c 0103 	add.w	r1, ip, r3
    3f04:	f85c 2003 	ldr.w	r2, [ip, r3]
    3f08:	2a00      	cmp	r2, #0
    3f0a:	d174      	bne.n	3ff6 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    3f0c:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f0e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    3f12:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3f16:	2800      	cmp	r0, #0
    3f18:	f040 8088 	bne.w	402c <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    3f1c:	3b00      	subs	r3, #0
    3f1e:	bf18      	it	ne
    3f20:	2301      	movne	r3, #1
    3f22:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3f26:	2800      	cmp	r0, #0
    3f28:	f000 8086 	beq.w	4038 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f2c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    3f30:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f34:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    3f38:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    3f3c:	b115      	cbz	r5, 3f44 <nrfx_twim_xfer+0x188>
    3f3e:	f410 7f00 	tst.w	r0, #512	; 0x200
    3f42:	d104      	bne.n	3f4e <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f44:	6221      	str	r1, [r4, #32]
    3f46:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3f48:	2d00      	cmp	r5, #0
    3f4a:	d0e0      	beq.n	3f0e <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    3f4c:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3f4e:	05c0      	lsls	r0, r0, #23
    3f50:	d572      	bpl.n	4038 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f52:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    3f56:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    3f5a:	e7d8      	b.n	3f0e <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3f5c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3f5e:	68e9      	ldr	r1, [r5, #12]
    3f60:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3f64:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    3f68:	692b      	ldr	r3, [r5, #16]
    3f6a:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3f6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    3f72:	f47f af3a 	bne.w	3dea <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3f76:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3f78:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    3f7c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    3f80:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3f84:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3f88:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3f8a:	fb03 c30e 	mla	r3, r3, lr, ip
    3f8e:	2102      	movs	r1, #2
    3f90:	e012      	b.n	3fb8 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3f92:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3f94:	68e9      	ldr	r1, [r5, #12]
    3f96:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    3f9a:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    3f9e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    3fa2:	f04f 0334 	mov.w	r3, #52	; 0x34
    3fa6:	d00b      	beq.n	3fc0 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    3fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
    3fac:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3fb0:	fb03 c30e 	mla	r3, r3, lr, ip
    3fb4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3fb8:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fba:	2301      	movs	r3, #1
    3fbc:	6223      	str	r3, [r4, #32]
    3fbe:	e791      	b.n	3ee4 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    3fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
    3fc4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    3fc8:	e7df      	b.n	3f8a <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3fca:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3fcc:	68e9      	ldr	r1, [r5, #12]
    3fce:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3fd2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3fda:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3fde:	2334      	movs	r3, #52	; 0x34
    3fe0:	fb03 c30e 	mla	r3, r3, lr, ip
    3fe4:	2102      	movs	r1, #2
    3fe6:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fe8:	2301      	movs	r3, #1
    3fea:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    3fec:	2300      	movs	r3, #0
    3fee:	e77a      	b.n	3ee6 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    3ff0:	4e2d      	ldr	r6, [pc, #180]	; (40a8 <nrfx_twim_xfer+0x2ec>)
    3ff2:	2308      	movs	r3, #8
    3ff4:	e778      	b.n	3ee8 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    3ff6:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    3ff8:	bf44      	itt	mi
    3ffa:	2300      	movmi	r3, #0
    3ffc:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    3ffe:	067b      	lsls	r3, r7, #25
    4000:	d406      	bmi.n	4010 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    4002:	2334      	movs	r3, #52	; 0x34
    4004:	fb03 c30e 	mla	r3, r3, lr, ip
    4008:	689a      	ldr	r2, [r3, #8]
    400a:	f042 0202 	orr.w	r2, r2, #2
    400e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    4010:	2334      	movs	r3, #52	; 0x34
    4012:	fb03 cc0e 	mla	ip, r3, lr, ip
    4016:	f8dc 3008 	ldr.w	r3, [ip, #8]
    401a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    401e:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4022:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    4026:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    402a:	e6df      	b.n	3dec <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    402c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4030:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    4034:	2301      	movs	r3, #1
    4036:	e774      	b.n	3f22 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    4038:	2b00      	cmp	r3, #0
    403a:	f43f af68 	beq.w	3f0e <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    403e:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    4040:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4044:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    4048:	fb01 c20e 	mla	r2, r1, lr, ip
    404c:	2000      	movs	r0, #0
    404e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    4052:	b18b      	cbz	r3, 4078 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4054:	4a15      	ldr	r2, [pc, #84]	; (40ac <nrfx_twim_xfer+0x2f0>)
    4056:	4e16      	ldr	r6, [pc, #88]	; (40b0 <nrfx_twim_xfer+0x2f4>)
    4058:	f013 0f01 	tst.w	r3, #1
    405c:	bf18      	it	ne
    405e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4060:	f013 0f02 	tst.w	r3, #2
    4064:	f102 0201 	add.w	r2, r2, #1
    4068:	bf18      	it	ne
    406a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    406c:	f013 0f04 	tst.w	r3, #4
    4070:	4b10      	ldr	r3, [pc, #64]	; (40b4 <nrfx_twim_xfer+0x2f8>)
    4072:	bf18      	it	ne
    4074:	461e      	movne	r6, r3
    4076:	e6b9      	b.n	3dec <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    4078:	067b      	lsls	r3, r7, #25
    407a:	f53f aeb7 	bmi.w	3dec <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    407e:	fb0e c101 	mla	r1, lr, r1, ip
    4082:	4620      	mov	r0, r4
    4084:	f002 f84b 	bl	611e <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    4088:	4b09      	ldr	r3, [pc, #36]	; (40b0 <nrfx_twim_xfer+0x2f4>)
    408a:	2800      	cmp	r0, #0
    408c:	bf08      	it	eq
    408e:	461e      	moveq	r6, r3
    4090:	e6ac      	b.n	3dec <nrfx_twim_xfer+0x30>
    4092:	bf00      	nop
    4094:	200004fc 	.word	0x200004fc
    4098:	0bad000a 	.word	0x0bad000a
    409c:	019c0202 	.word	0x019c0202
    40a0:	0bad000b 	.word	0x0bad000b
    40a4:	0bad0000 	.word	0x0bad0000
    40a8:	0bad0004 	.word	0x0bad0004
    40ac:	0bae0000 	.word	0x0bae0000
    40b0:	0bad0001 	.word	0x0bad0001
    40b4:	0bae0002 	.word	0x0bae0002

000040b8 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    40b8:	4901      	ldr	r1, [pc, #4]	; (40c0 <nrfx_twim_0_irq_handler+0x8>)
    40ba:	4802      	ldr	r0, [pc, #8]	; (40c4 <nrfx_twim_0_irq_handler+0xc>)
    40bc:	f7ff bd4c 	b.w	3b58 <twim_irq_handler>
    40c0:	200004fc 	.word	0x200004fc
    40c4:	40003000 	.word	0x40003000

000040c8 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    40c8:	4902      	ldr	r1, [pc, #8]	; (40d4 <nrfx_twim_1_irq_handler+0xc>)
    40ca:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    40ce:	f7ff bd43 	b.w	3b58 <twim_irq_handler>
    40d2:	bf00      	nop
    40d4:	20000530 	.word	0x20000530

000040d8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    40d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    40dc:	f000 001f 	and.w	r0, r0, #31
    40e0:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40e4:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    40e6:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40ea:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    40ee:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    40f2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    40f6:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40fa:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    40fc:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    4100:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    4104:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    4108:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    410c:	2004      	movs	r0, #4
    410e:	f001 fffa 	bl	6106 <nrfx_busy_wait>
    4112:	2709      	movs	r7, #9
    return p_reg->IN;
    4114:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    4118:	421c      	tst	r4, r3
    411a:	d10d      	bne.n	4138 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    411c:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    411e:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    4122:	f001 fff0 	bl	6106 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4126:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    4128:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    412c:	2004      	movs	r0, #4
    412e:	f001 ffea 	bl	6106 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4132:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    4136:	d1ed      	bne.n	4114 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    4138:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    413c:	2004      	movs	r0, #4
    413e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    4142:	f001 ffe0 	bl	6106 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    4146:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    414a:	2004      	movs	r0, #4
    414c:	f001 ffdb 	bl	6106 <nrfx_busy_wait>
    return p_reg->IN;
    4150:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
    4154:	4803      	ldr	r0, [pc, #12]	; (4164 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4156:	fa21 f606 	lsr.w	r6, r1, r6
    415a:	f006 0601 	and.w	r6, r6, #1
    415e:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4164:	0bad0001 	.word	0x0bad0001

00004168 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4168:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    416a:	4c14      	ldr	r4, [pc, #80]	; (41bc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    416c:	4a14      	ldr	r2, [pc, #80]	; (41c0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    416e:	4915      	ldr	r1, [pc, #84]	; (41c4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4170:	2303      	movs	r3, #3
    4172:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4174:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4176:	4b14      	ldr	r3, [pc, #80]	; (41c8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4178:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    417a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    417c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4180:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4182:	2300      	movs	r3, #0
    4184:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4186:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4188:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    418a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    418c:	4a0f      	ldr	r2, [pc, #60]	; (41cc <_DoInit+0x64>)
    418e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4190:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4192:	2210      	movs	r2, #16
    4194:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4196:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4198:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    419a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    419c:	f001 fa34 	bl	5608 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    41a0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    41a4:	490a      	ldr	r1, [pc, #40]	; (41d0 <_DoInit+0x68>)
    41a6:	4620      	mov	r0, r4
    41a8:	f001 fa2e 	bl	5608 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    41ac:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    41b0:	2320      	movs	r3, #32
    41b2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    41b4:	f3bf 8f5f 	dmb	sy
}
    41b8:	bd10      	pop	{r4, pc}
    41ba:	bf00      	nop
    41bc:	20000564 	.word	0x20000564
    41c0:	00006e0c 	.word	0x00006e0c
    41c4:	00006e15 	.word	0x00006e15
    41c8:	20000680 	.word	0x20000680
    41cc:	20000670 	.word	0x20000670
    41d0:	00006e19 	.word	0x00006e19

000041d4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    41d4:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    41d6:	4b16      	ldr	r3, [pc, #88]	; (4230 <SEGGER_RTT_WriteNoLock+0x5c>)
    41d8:	2418      	movs	r4, #24
    41da:	fb00 4504 	mla	r5, r0, r4, r4
    41de:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    41e0:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    41e4:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    41e6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    41e8:	2c01      	cmp	r4, #1
    41ea:	d00e      	beq.n	420a <SEGGER_RTT_WriteNoLock+0x36>
    41ec:	2c02      	cmp	r4, #2
    41ee:	d018      	beq.n	4222 <SEGGER_RTT_WriteNoLock+0x4e>
    41f0:	b9e4      	cbnz	r4, 422c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    41f2:	4628      	mov	r0, r5
    41f4:	f001 ffc3 	bl	617e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    41f8:	4286      	cmp	r6, r0
    41fa:	d804      	bhi.n	4206 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    41fc:	4632      	mov	r2, r6
    41fe:	4628      	mov	r0, r5
    4200:	f001 ffc6 	bl	6190 <_WriteNoCheck>
    4204:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    4206:	4620      	mov	r0, r4
    4208:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    420a:	4628      	mov	r0, r5
    420c:	f001 ffb7 	bl	617e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4210:	4286      	cmp	r6, r0
    4212:	4634      	mov	r4, r6
    4214:	bf28      	it	cs
    4216:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4218:	4622      	mov	r2, r4
    421a:	4628      	mov	r0, r5
    421c:	f001 ffb8 	bl	6190 <_WriteNoCheck>
    break;
    4220:	e7f1      	b.n	4206 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4222:	4628      	mov	r0, r5
}
    4224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4228:	f001 bfd0 	b.w	61cc <_WriteBlocking>
  switch (pRing->Flags) {
    422c:	2400      	movs	r4, #0
  return Status;
    422e:	e7ea      	b.n	4206 <SEGGER_RTT_WriteNoLock+0x32>
    4230:	20000564 	.word	0x20000564

00004234 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4234:	4b0e      	ldr	r3, [pc, #56]	; (4270 <z_sys_init_run_level+0x3c>)
{
    4236:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4238:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    423c:	3001      	adds	r0, #1
    423e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4242:	42a6      	cmp	r6, r4
    4244:	d800      	bhi.n	4248 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4246:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4248:	e9d4 3500 	ldrd	r3, r5, [r4]
    424c:	4628      	mov	r0, r5
    424e:	4798      	blx	r3
		if (dev != NULL) {
    4250:	b165      	cbz	r5, 426c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4252:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4254:	b130      	cbz	r0, 4264 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4256:	2800      	cmp	r0, #0
    4258:	bfb8      	it	lt
    425a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    425c:	28ff      	cmp	r0, #255	; 0xff
    425e:	bfa8      	it	ge
    4260:	20ff      	movge	r0, #255	; 0xff
    4262:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4264:	785a      	ldrb	r2, [r3, #1]
    4266:	f042 0201 	orr.w	r2, r2, #1
    426a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    426c:	3408      	adds	r4, #8
    426e:	e7e8      	b.n	4242 <z_sys_init_run_level+0xe>
    4270:	00006b3c 	.word	0x00006b3c

00004274 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4274:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4276:	4605      	mov	r5, r0
    4278:	b910      	cbnz	r0, 4280 <z_impl_device_get_binding+0xc>
		return NULL;
    427a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    427c:	4620      	mov	r0, r4
    427e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4280:	7803      	ldrb	r3, [r0, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d0f9      	beq.n	427a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4286:	4c0e      	ldr	r4, [pc, #56]	; (42c0 <z_impl_device_get_binding+0x4c>)
    4288:	4e0e      	ldr	r6, [pc, #56]	; (42c4 <z_impl_device_get_binding+0x50>)
    428a:	42b4      	cmp	r4, r6
    428c:	d108      	bne.n	42a0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    428e:	4c0c      	ldr	r4, [pc, #48]	; (42c0 <z_impl_device_get_binding+0x4c>)
    4290:	42b4      	cmp	r4, r6
    4292:	d0f2      	beq.n	427a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4294:	4620      	mov	r0, r4
    4296:	f001 ffcd 	bl	6234 <z_device_ready>
    429a:	b950      	cbnz	r0, 42b2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    429c:	3418      	adds	r4, #24
    429e:	e7f7      	b.n	4290 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    42a0:	4620      	mov	r0, r4
    42a2:	f001 ffc7 	bl	6234 <z_device_ready>
    42a6:	b110      	cbz	r0, 42ae <z_impl_device_get_binding+0x3a>
    42a8:	6823      	ldr	r3, [r4, #0]
    42aa:	42ab      	cmp	r3, r5
    42ac:	d0e6      	beq.n	427c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    42ae:	3418      	adds	r4, #24
    42b0:	e7eb      	b.n	428a <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    42b2:	6821      	ldr	r1, [r4, #0]
    42b4:	4628      	mov	r0, r5
    42b6:	f001 f9c1 	bl	563c <strcmp>
    42ba:	2800      	cmp	r0, #0
    42bc:	d1ee      	bne.n	429c <z_impl_device_get_binding+0x28>
    42be:	e7dd      	b.n	427c <z_impl_device_get_binding+0x8>
    42c0:	00006620 	.word	0x00006620
    42c4:	00006788 	.word	0x00006788

000042c8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    42c8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    42ca:	2300      	movs	r3, #0
{
    42cc:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    42ce:	2201      	movs	r2, #1
    42d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    42d4:	220f      	movs	r2, #15
    42d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    42da:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    42dc:	4c0c      	ldr	r4, [pc, #48]	; (4310 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42de:	4b0d      	ldr	r3, [pc, #52]	; (4314 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    42e0:	490d      	ldr	r1, [pc, #52]	; (4318 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42e2:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    42e4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42e8:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    42ec:	f44f 75b0 	mov.w	r5, #352	; 0x160
    42f0:	9300      	str	r3, [sp, #0]
    42f2:	fb05 1100 	mla	r1, r5, r0, r1
    42f6:	4b09      	ldr	r3, [pc, #36]	; (431c <init_idle_thread+0x54>)
    42f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    42fc:	4620      	mov	r0, r4
    42fe:	f000 f8a5 	bl	444c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4302:	7b63      	ldrb	r3, [r4, #13]
    4304:	f023 0304 	bic.w	r3, r3, #4
    4308:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    430a:	b007      	add	sp, #28
    430c:	bd30      	pop	{r4, r5, pc}
    430e:	bf00      	nop
    4310:	200001f8 	.word	0x200001f8
    4314:	2000060c 	.word	0x2000060c
    4318:	20000ec0 	.word	0x20000ec0
    431c:	000045c1 	.word	0x000045c1

00004320 <bg_thread_main>:
{
    4320:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4322:	4b0a      	ldr	r3, [pc, #40]	; (434c <bg_thread_main+0x2c>)
    4324:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4326:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4328:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    432a:	f7ff ff83 	bl	4234 <z_sys_init_run_level>
	boot_banner();
    432e:	f000 ff6f 	bl	5210 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4332:	2003      	movs	r0, #3
    4334:	f7ff ff7e 	bl	4234 <z_sys_init_run_level>
	z_init_static_threads();
    4338:	f000 f8e6 	bl	4508 <z_init_static_threads>
	main();
    433c:	f7fc fc0c 	bl	b58 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4340:	4a03      	ldr	r2, [pc, #12]	; (4350 <bg_thread_main+0x30>)
    4342:	7b13      	ldrb	r3, [r2, #12]
    4344:	f023 0301 	bic.w	r3, r3, #1
    4348:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    434a:	bd08      	pop	{r3, pc}
    434c:	20000a80 	.word	0x20000a80
    4350:	20000278 	.word	0x20000278

00004354 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4354:	4802      	ldr	r0, [pc, #8]	; (4360 <z_bss_zero+0xc>)
    4356:	4a03      	ldr	r2, [pc, #12]	; (4364 <z_bss_zero+0x10>)
    4358:	2100      	movs	r1, #0
    435a:	1a12      	subs	r2, r2, r0
    435c:	f001 b985 	b.w	566a <memset>
    4360:	200000f0 	.word	0x200000f0
    4364:	20000a84 	.word	0x20000a84

00004368 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4368:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    436a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 442c <z_cstart+0xc4>
    436e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4370:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4374:	4d2e      	ldr	r5, [pc, #184]	; (4430 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4376:	4e2f      	ldr	r6, [pc, #188]	; (4434 <z_cstart+0xcc>)
    4378:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    437a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4438 <z_cstart+0xd0>
    437e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4382:	2400      	movs	r4, #0
    4384:	616b      	str	r3, [r5, #20]
    4386:	23e0      	movs	r3, #224	; 0xe0
    4388:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    438c:	77ec      	strb	r4, [r5, #31]
    438e:	762c      	strb	r4, [r5, #24]
    4390:	766c      	strb	r4, [r5, #25]
    4392:	76ac      	strb	r4, [r5, #26]
    4394:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4398:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    439a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    439e:	626b      	str	r3, [r5, #36]	; 0x24
    43a0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    43a4:	f7fd febe 	bl	2124 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    43a8:	f7fd fc8e 	bl	1cc8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    43ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    43b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    43b4:	f7fd ff94 	bl	22e0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    43b8:	f7fd fefc 	bl	21b4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    43bc:	f240 1301 	movw	r3, #257	; 0x101
    43c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    43c4:	ab06      	add	r3, sp, #24
    43c6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    43c8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    43cc:	f001 ff31 	bl	6232 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    43d0:	4620      	mov	r0, r4
    43d2:	f7ff ff2f 	bl	4234 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    43d6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    43d8:	4d18      	ldr	r5, [pc, #96]	; (443c <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    43da:	f7ff ff2b 	bl	4234 <z_sys_init_run_level>
	z_sched_init();
    43de:	f000 fc9b 	bl	4d18 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    43e2:	4b17      	ldr	r3, [pc, #92]	; (4440 <z_cstart+0xd8>)
    43e4:	9305      	str	r3, [sp, #20]
    43e6:	2301      	movs	r3, #1
    43e8:	4916      	ldr	r1, [pc, #88]	; (4444 <z_cstart+0xdc>)
    43ea:	9400      	str	r4, [sp, #0]
    43ec:	e9cd 4303 	strd	r4, r3, [sp, #12]
    43f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    43f4:	464b      	mov	r3, r9
    43f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    43fa:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    43fc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    43fe:	f000 f825 	bl	444c <z_setup_new_thread>
    4402:	7b6a      	ldrb	r2, [r5, #13]
    4404:	4607      	mov	r7, r0
    4406:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    440a:	4628      	mov	r0, r5
    440c:	736a      	strb	r2, [r5, #13]
    440e:	f001 ffdc 	bl	63ca <z_ready_thread>
		init_idle_thread(i);
    4412:	4620      	mov	r0, r4
    4414:	f7ff ff58 	bl	42c8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4418:	4b0b      	ldr	r3, [pc, #44]	; (4448 <z_cstart+0xe0>)
    441a:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    441c:	464a      	mov	r2, r9
    441e:	4639      	mov	r1, r7
    4420:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4422:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4424:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4428:	f7fd fd50 	bl	1ecc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    442c:	20001840 	.word	0x20001840
    4430:	e000ed00 	.word	0xe000ed00
    4434:	2000060c 	.word	0x2000060c
    4438:	00004321 	.word	0x00004321
    443c:	20000278 	.word	0x20000278
    4440:	00006e20 	.word	0x00006e20
    4444:	20000aa0 	.word	0x20000aa0
    4448:	200001f8 	.word	0x200001f8

0000444c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    444c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4450:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4452:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4454:	2604      	movs	r6, #4
    4456:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4458:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    445a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    445c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4460:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4462:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4464:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    446a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    446c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4470:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4472:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4476:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    447a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    447c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    447e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4480:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4484:	9202      	str	r2, [sp, #8]
    4486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4488:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    448a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    448c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    448e:	9200      	str	r2, [sp, #0]
    4490:	4642      	mov	r2, r8
{
    4492:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4494:	f7fd fce8 	bl	1e68 <arch_new_thread>
	if (!_current) {
    4498:	4b04      	ldr	r3, [pc, #16]	; (44ac <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    449a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    449c:	689b      	ldr	r3, [r3, #8]
    449e:	b103      	cbz	r3, 44a2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    44a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    44a2:	6723      	str	r3, [r4, #112]	; 0x70
}
    44a4:	4640      	mov	r0, r8
    44a6:	b004      	add	sp, #16
    44a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44ac:	2000060c 	.word	0x2000060c

000044b0 <z_impl_k_thread_create>:
{
    44b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44b2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    44b4:	2700      	movs	r7, #0
    44b6:	9705      	str	r7, [sp, #20]
    44b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
    44ba:	9704      	str	r7, [sp, #16]
    44bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    44be:	9703      	str	r7, [sp, #12]
    44c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    44c2:	9702      	str	r7, [sp, #8]
{
    44c4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    44c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    44ca:	9701      	str	r7, [sp, #4]
    44cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    44ce:	9700      	str	r7, [sp, #0]
{
    44d0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    44d2:	f7ff ffbb 	bl	444c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    44d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    44da:	bf08      	it	eq
    44dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    44e0:	d005      	beq.n	44ee <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    44e2:	ea55 0306 	orrs.w	r3, r5, r6
    44e6:	d105      	bne.n	44f4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    44e8:	4620      	mov	r0, r4
    44ea:	f000 fb57 	bl	4b9c <z_sched_start>
}
    44ee:	4620      	mov	r0, r4
    44f0:	b007      	add	sp, #28
    44f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    44f4:	4903      	ldr	r1, [pc, #12]	; (4504 <z_impl_k_thread_create+0x54>)
    44f6:	4632      	mov	r2, r6
    44f8:	462b      	mov	r3, r5
    44fa:	f104 0018 	add.w	r0, r4, #24
    44fe:	f000 fd99 	bl	5034 <z_add_timeout>
    4502:	e7f4      	b.n	44ee <z_impl_k_thread_create+0x3e>
    4504:	000063eb 	.word	0x000063eb

00004508 <z_init_static_threads>:
{
    4508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    450c:	4c29      	ldr	r4, [pc, #164]	; (45b4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    450e:	4d2a      	ldr	r5, [pc, #168]	; (45b8 <z_init_static_threads+0xb0>)
{
    4510:	b087      	sub	sp, #28
    4512:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4514:	42ae      	cmp	r6, r5
    4516:	f104 0430 	add.w	r4, r4, #48	; 0x30
    451a:	d30f      	bcc.n	453c <z_init_static_threads+0x34>
	k_sched_lock();
    451c:	f000 fa5a 	bl	49d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4520:	4c24      	ldr	r4, [pc, #144]	; (45b4 <z_init_static_threads+0xac>)
    4522:	f8df 9098 	ldr.w	r9, [pc, #152]	; 45bc <z_init_static_threads+0xb4>
    4526:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    452a:	f240 37e7 	movw	r7, #999	; 0x3e7
    452e:	42ac      	cmp	r4, r5
    4530:	d320      	bcc.n	4574 <z_init_static_threads+0x6c>
}
    4532:	b007      	add	sp, #28
    4534:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4538:	f000 bbd2 	b.w	4ce0 <k_sched_unlock>
		z_setup_new_thread(
    453c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4540:	9305      	str	r3, [sp, #20]
    4542:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4546:	9304      	str	r3, [sp, #16]
    4548:	f854 3c14 	ldr.w	r3, [r4, #-20]
    454c:	9303      	str	r3, [sp, #12]
    454e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4552:	9302      	str	r3, [sp, #8]
    4554:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4558:	9301      	str	r3, [sp, #4]
    455a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    455e:	9300      	str	r3, [sp, #0]
    4560:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4564:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4568:	f7ff ff70 	bl	444c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    456c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4570:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4572:	e7ce      	b.n	4512 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4574:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4576:	1c5a      	adds	r2, r3, #1
    4578:	d00d      	beq.n	4596 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    457a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    457e:	2100      	movs	r1, #0
    4580:	4638      	mov	r0, r7
    4582:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4586:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    458a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    458e:	d104      	bne.n	459a <z_init_static_threads+0x92>
	z_sched_start(thread);
    4590:	4640      	mov	r0, r8
    4592:	f000 fb03 	bl	4b9c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4596:	3430      	adds	r4, #48	; 0x30
    4598:	e7c9      	b.n	452e <z_init_static_threads+0x26>
    459a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    459e:	2300      	movs	r3, #0
    45a0:	f7fc f96c 	bl	87c <__aeabi_uldivmod>
    45a4:	4602      	mov	r2, r0
    45a6:	460b      	mov	r3, r1
    45a8:	f108 0018 	add.w	r0, r8, #24
    45ac:	4649      	mov	r1, r9
    45ae:	f000 fd41 	bl	5034 <z_add_timeout>
    45b2:	e7f0      	b.n	4596 <z_init_static_threads+0x8e>
    45b4:	200000f0 	.word	0x200000f0
    45b8:	200000f0 	.word	0x200000f0
    45bc:	000063eb 	.word	0x000063eb

000045c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    45c0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    45c2:	4c09      	ldr	r4, [pc, #36]	; (45e8 <idle+0x28>)
	__asm__ volatile(
    45c4:	f04f 0220 	mov.w	r2, #32
    45c8:	f3ef 8311 	mrs	r3, BASEPRI
    45cc:	f382 8812 	msr	BASEPRI_MAX, r2
    45d0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    45d4:	f001 ffa0 	bl	6518 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    45d8:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    45da:	f7fd fb31 	bl	1c40 <pm_system_suspend>
    45de:	2800      	cmp	r0, #0
    45e0:	d1f0      	bne.n	45c4 <idle+0x4>
	arch_cpu_idle();
    45e2:	f7fd fb77 	bl	1cd4 <arch_cpu_idle>
}
    45e6:	e7ed      	b.n	45c4 <idle+0x4>
    45e8:	2000060c 	.word	0x2000060c

000045ec <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    45ec:	b538      	push	{r3, r4, r5, lr}
    45ee:	4604      	mov	r4, r0
    45f0:	f04f 0320 	mov.w	r3, #32
    45f4:	f3ef 8511 	mrs	r5, BASEPRI
    45f8:	f383 8812 	msr	BASEPRI_MAX, r3
    45fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4600:	f001 ff3f 	bl	6482 <z_unpend_first_thread>

	if (thread != NULL) {
    4604:	b148      	cbz	r0, 461a <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4606:	2200      	movs	r2, #0
    4608:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    460a:	f001 fede 	bl	63ca <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    460e:	4629      	mov	r1, r5
    4610:	4805      	ldr	r0, [pc, #20]	; (4628 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4616:	f000 b9cb 	b.w	49b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    461a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    461e:	429a      	cmp	r2, r3
    4620:	bf18      	it	ne
    4622:	3301      	addne	r3, #1
    4624:	60a3      	str	r3, [r4, #8]
}
    4626:	e7f2      	b.n	460e <z_impl_k_sem_give+0x22>
    4628:	20000a81 	.word	0x20000a81

0000462c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    462c:	b513      	push	{r0, r1, r4, lr}
    462e:	f04f 0420 	mov.w	r4, #32
    4632:	f3ef 8111 	mrs	r1, BASEPRI
    4636:	f384 8812 	msr	BASEPRI_MAX, r4
    463a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    463e:	6884      	ldr	r4, [r0, #8]
    4640:	b144      	cbz	r4, 4654 <z_impl_k_sem_take+0x28>
		sem->count--;
    4642:	3c01      	subs	r4, #1
    4644:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4646:	f381 8811 	msr	BASEPRI, r1
    464a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    464e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4650:	b002      	add	sp, #8
    4652:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4654:	ea52 0403 	orrs.w	r4, r2, r3
    4658:	d106      	bne.n	4668 <z_impl_k_sem_take+0x3c>
    465a:	f381 8811 	msr	BASEPRI, r1
    465e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4662:	f06f 000f 	mvn.w	r0, #15
    4666:	e7f3      	b.n	4650 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4668:	e9cd 2300 	strd	r2, r3, [sp]
    466c:	4602      	mov	r2, r0
    466e:	4802      	ldr	r0, [pc, #8]	; (4678 <z_impl_k_sem_take+0x4c>)
    4670:	f000 faf0 	bl	4c54 <z_pend_curr>
	return ret;
    4674:	e7ec      	b.n	4650 <z_impl_k_sem_take+0x24>
    4676:	bf00      	nop
    4678:	20000a81 	.word	0x20000a81

0000467c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    4680:	4e47      	ldr	r6, [pc, #284]	; (47a0 <work_queue_main+0x124>)
    4682:	b085      	sub	sp, #20
    4684:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    4686:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    468a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    468e:	f04f 0320 	mov.w	r3, #32
    4692:	f3ef 8711 	mrs	r7, BASEPRI
    4696:	f383 8812 	msr	BASEPRI_MAX, r3
    469a:	f3bf 8f6f 	isb	sy
    469e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    46a2:	b98d      	cbnz	r5, 46c8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    46a4:	2102      	movs	r1, #2
    46a6:	f104 0098 	add.w	r0, r4, #152	; 0x98
    46aa:	f001 fe06 	bl	62ba <flag_test_and_clear>
    46ae:	2800      	cmp	r0, #0
    46b0:	d135      	bne.n	471e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    46b2:	2300      	movs	r3, #0
    46b4:	e9cd 8900 	strd	r8, r9, [sp]
    46b8:	9302      	str	r3, [sp, #8]
    46ba:	f104 0288 	add.w	r2, r4, #136	; 0x88
    46be:	4639      	mov	r1, r7
    46c0:	4838      	ldr	r0, [pc, #224]	; (47a4 <work_queue_main+0x128>)
    46c2:	f000 fc3f 	bl	4f44 <z_sched_wait>
			continue;
    46c6:	e7e2      	b.n	468e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    46c8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    46cc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    46ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    46d2:	4295      	cmp	r5, r2
    46d4:	d101      	bne.n	46da <work_queue_main+0x5e>
	list->tail = node;
    46d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    46da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    46de:	f043 0302 	orr.w	r3, r3, #2
    46e2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    46e6:	68eb      	ldr	r3, [r5, #12]
    46e8:	f023 0304 	bic.w	r3, r3, #4
    46ec:	f043 0301 	orr.w	r3, r3, #1
    46f0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    46f2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    46f4:	f387 8811 	msr	BASEPRI, r7
    46f8:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    46fc:	4628      	mov	r0, r5
    46fe:	4798      	blx	r3
	__asm__ volatile(
    4700:	f04f 0320 	mov.w	r3, #32
    4704:	f3ef 8b11 	mrs	fp, BASEPRI
    4708:	f383 8812 	msr	BASEPRI_MAX, r3
    470c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    4710:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    4712:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    4714:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    4718:	d40b      	bmi.n	4732 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    471a:	60ea      	str	r2, [r5, #12]
    471c:	e00e      	b.n	473c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    471e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    4722:	2200      	movs	r2, #0
    4724:	2101      	movs	r1, #1
    4726:	4628      	mov	r0, r5
    4728:	f001 fec3 	bl	64b2 <z_sched_wake>
    472c:	2800      	cmp	r0, #0
    472e:	d1f8      	bne.n	4722 <work_queue_main+0xa6>
    4730:	e7bf      	b.n	46b2 <work_queue_main+0x36>
	return list->head;
    4732:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    4734:	f023 0303 	bic.w	r3, r3, #3
    4738:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    473a:	b970      	cbnz	r0, 475a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    473c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4740:	f023 0302 	bic.w	r3, r3, #2
    4744:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    4748:	f38b 8811 	msr	BASEPRI, fp
    474c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    4750:	05d8      	lsls	r0, r3, #23
    4752:	d49c      	bmi.n	468e <work_queue_main+0x12>
	z_impl_k_yield();
    4754:	f000 faec 	bl	4d30 <z_impl_k_yield>
}
    4758:	e799      	b.n	468e <work_queue_main+0x12>
	return node->next;
    475a:	2700      	movs	r7, #0
    475c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    4760:	463b      	mov	r3, r7
		if (wc->work == work) {
    4762:	6842      	ldr	r2, [r0, #4]
    4764:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    4766:	4601      	mov	r1, r0
		if (wc->work == work) {
    4768:	d10c      	bne.n	4784 <work_queue_main+0x108>
	return node->next;
    476a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    476c:	b997      	cbnz	r7, 4794 <work_queue_main+0x118>
    476e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    4770:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    4772:	4282      	cmp	r2, r0
    4774:	d100      	bne.n	4778 <work_queue_main+0xfc>
	list->tail = node;
    4776:	6071      	str	r1, [r6, #4]
	parent->next = child;
    4778:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    477c:	f7ff ff36 	bl	45ec <z_impl_k_sem_give>
}
    4780:	4639      	mov	r1, r7
    4782:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    4784:	f1ba 0f00 	cmp.w	sl, #0
    4788:	d0d8      	beq.n	473c <work_queue_main+0xc0>
	return node->next;
    478a:	4650      	mov	r0, sl
    478c:	460f      	mov	r7, r1
    478e:	f8da a000 	ldr.w	sl, [sl]
    4792:	e7e6      	b.n	4762 <work_queue_main+0xe6>
	return list->tail;
    4794:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    4796:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    4798:	4290      	cmp	r0, r2
	list->tail = node;
    479a:	bf08      	it	eq
    479c:	6077      	streq	r7, [r6, #4]
}
    479e:	e7eb      	b.n	4778 <work_queue_main+0xfc>
    47a0:	20000634 	.word	0x20000634
    47a4:	20000a81 	.word	0x20000a81

000047a8 <submit_to_queue_locked>:
{
    47a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    47aa:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    47ac:	079a      	lsls	r2, r3, #30
{
    47ae:	4604      	mov	r4, r0
    47b0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    47b2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    47b6:	d41f      	bmi.n	47f8 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    47b8:	075f      	lsls	r7, r3, #29
    47ba:	d41f      	bmi.n	47fc <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    47bc:	680a      	ldr	r2, [r1, #0]
    47be:	b90a      	cbnz	r2, 47c4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    47c0:	6882      	ldr	r2, [r0, #8]
    47c2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    47c4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    47c6:	bf44      	itt	mi
    47c8:	68a3      	ldrmi	r3, [r4, #8]
    47ca:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    47cc:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    47ce:	bf4c      	ite	mi
    47d0:	2502      	movmi	r5, #2
		ret = 1;
    47d2:	2501      	movpl	r5, #1
	if (queue == NULL) {
    47d4:	b37f      	cbz	r7, 4836 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    47d6:	4b1b      	ldr	r3, [pc, #108]	; (4844 <submit_to_queue_locked+0x9c>)
    47d8:	689b      	ldr	r3, [r3, #8]
    47da:	42bb      	cmp	r3, r7
    47dc:	d111      	bne.n	4802 <submit_to_queue_locked+0x5a>
    47de:	f001 fd5a 	bl	6296 <k_is_in_isr>
    47e2:	f080 0001 	eor.w	r0, r0, #1
    47e6:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    47e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    47ec:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    47ee:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    47f2:	d523      	bpl.n	483c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    47f4:	b13a      	cbz	r2, 4806 <submit_to_queue_locked+0x5e>
    47f6:	b940      	cbnz	r0, 480a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    47f8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    47fc:	2300      	movs	r3, #0
    47fe:	6033      	str	r3, [r6, #0]
	return ret;
    4800:	e013      	b.n	482a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4802:	2000      	movs	r0, #0
    4804:	e7f0      	b.n	47e8 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    4806:	071b      	lsls	r3, r3, #28
    4808:	d4f6      	bmi.n	47f8 <submit_to_queue_locked+0x50>
	parent->next = child;
    480a:	2300      	movs	r3, #0
    480c:	6023      	str	r3, [r4, #0]
	return list->tail;
    480e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    4812:	b963      	cbnz	r3, 482e <submit_to_queue_locked+0x86>
	list->head = node;
    4814:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    4818:	4638      	mov	r0, r7
    481a:	f001 fd59 	bl	62d0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    481e:	68e3      	ldr	r3, [r4, #12]
    4820:	f043 0304 	orr.w	r3, r3, #4
    4824:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    4826:	6833      	ldr	r3, [r6, #0]
    4828:	60a3      	str	r3, [r4, #8]
}
    482a:	4628      	mov	r0, r5
    482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    482e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4830:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    4834:	e7f0      	b.n	4818 <submit_to_queue_locked+0x70>
		return -EINVAL;
    4836:	f06f 0515 	mvn.w	r5, #21
    483a:	e7df      	b.n	47fc <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    483c:	f06f 0512 	mvn.w	r5, #18
    4840:	e7dc      	b.n	47fc <submit_to_queue_locked+0x54>
    4842:	bf00      	nop
    4844:	2000060c 	.word	0x2000060c

00004848 <k_work_submit>:
{
    4848:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    484a:	4801      	ldr	r0, [pc, #4]	; (4850 <k_work_submit+0x8>)
    484c:	f001 bd66 	b.w	631c <k_work_submit_to_queue>
    4850:	20000300 	.word	0x20000300

00004854 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    4854:	b5f0      	push	{r4, r5, r6, r7, lr}
    4856:	b089      	sub	sp, #36	; 0x24
    4858:	4604      	mov	r4, r0
	list->head = NULL;
    485a:	2000      	movs	r0, #0
	list->tail = NULL;
    485c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    4860:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4862:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    4866:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    486a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    486e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    4872:	b31d      	cbz	r5, 48bc <k_work_queue_start+0x68>
    4874:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    4876:	2800      	cmp	r0, #0
    4878:	f240 1001 	movw	r0, #257	; 0x101
    487c:	bf08      	it	eq
    487e:	2001      	moveq	r0, #1
	*flagp = flags;
    4880:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4884:	2000      	movs	r0, #0
    4886:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    488a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    488e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    4892:	e9cd 0001 	strd	r0, r0, [sp, #4]
    4896:	e9cd 6706 	strd	r6, r7, [sp, #24]
    489a:	4b09      	ldr	r3, [pc, #36]	; (48c0 <k_work_queue_start+0x6c>)
    489c:	9400      	str	r4, [sp, #0]
    489e:	4620      	mov	r0, r4
    48a0:	f7ff fe06 	bl	44b0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    48a4:	b125      	cbz	r5, 48b0 <k_work_queue_start+0x5c>
    48a6:	6829      	ldr	r1, [r5, #0]
    48a8:	b111      	cbz	r1, 48b0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    48aa:	4620      	mov	r0, r4
    48ac:	f001 fcf9 	bl	62a2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    48b0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    48b2:	b009      	add	sp, #36	; 0x24
    48b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    48b8:	f001 bcf6 	b.w	62a8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    48bc:	2001      	movs	r0, #1
    48be:	e7df      	b.n	4880 <k_work_queue_start+0x2c>
    48c0:	0000467d 	.word	0x0000467d

000048c4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    48c4:	b513      	push	{r0, r1, r4, lr}
    48c6:	9001      	str	r0, [sp, #4]
    48c8:	4608      	mov	r0, r1
	__asm__ volatile(
    48ca:	f04f 0120 	mov.w	r1, #32
    48ce:	f3ef 8411 	mrs	r4, BASEPRI
    48d2:	f381 8812 	msr	BASEPRI_MAX, r1
    48d6:	f3bf 8f6f 	isb	sy
	return *flagp;
    48da:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    48dc:	f011 0f0e 	tst.w	r1, #14
    48e0:	d116      	bne.n	4910 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    48e2:	ea53 0c02 	orrs.w	ip, r3, r2
    48e6:	d108      	bne.n	48fa <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    48e8:	a901      	add	r1, sp, #4
    48ea:	f7ff ff5d 	bl	47a8 <submit_to_queue_locked>
	__asm__ volatile(
    48ee:	f384 8811 	msr	BASEPRI, r4
    48f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    48f6:	b002      	add	sp, #8
    48f8:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    48fa:	f041 0108 	orr.w	r1, r1, #8
    48fe:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    4900:	9901      	ldr	r1, [sp, #4]
    4902:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    4904:	3010      	adds	r0, #16
    4906:	4903      	ldr	r1, [pc, #12]	; (4914 <k_work_schedule_for_queue+0x50>)
    4908:	f000 fb94 	bl	5034 <z_add_timeout>
	return ret;
    490c:	2001      	movs	r0, #1
    490e:	e7ee      	b.n	48ee <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    4910:	2000      	movs	r0, #0
    4912:	e7ec      	b.n	48ee <k_work_schedule_for_queue+0x2a>
    4914:	000062df 	.word	0x000062df

00004918 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    4918:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    491a:	4801      	ldr	r0, [pc, #4]	; (4920 <k_work_schedule+0x8>)
    491c:	f7ff bfd2 	b.w	48c4 <k_work_schedule_for_queue>
    4920:	20000300 	.word	0x20000300

00004924 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4924:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4926:	4c08      	ldr	r4, [pc, #32]	; (4948 <z_reset_time_slice+0x24>)
    4928:	6823      	ldr	r3, [r4, #0]
    492a:	b15b      	cbz	r3, 4944 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    492c:	f7fe fe52 	bl	35d4 <sys_clock_elapsed>
    4930:	4603      	mov	r3, r0
    4932:	6820      	ldr	r0, [r4, #0]
    4934:	4a05      	ldr	r2, [pc, #20]	; (494c <z_reset_time_slice+0x28>)
    4936:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    493c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    493e:	2100      	movs	r1, #0
    4940:	f001 bdfa 	b.w	6538 <z_set_timeout_expiry>
}
    4944:	bd10      	pop	{r4, pc}
    4946:	bf00      	nop
    4948:	20000644 	.word	0x20000644
    494c:	2000060c 	.word	0x2000060c

00004950 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4952:	4604      	mov	r4, r0
    4954:	460d      	mov	r5, r1
	__asm__ volatile(
    4956:	f04f 0320 	mov.w	r3, #32
    495a:	f3ef 8611 	mrs	r6, BASEPRI
    495e:	f383 8812 	msr	BASEPRI_MAX, r3
    4962:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4966:	4b0f      	ldr	r3, [pc, #60]	; (49a4 <k_sched_time_slice_set+0x54>)
    4968:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    496a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    496e:	f240 30e7 	movw	r0, #999	; 0x3e7
    4972:	6119      	str	r1, [r3, #16]
    4974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4978:	2300      	movs	r3, #0
    497a:	fbe4 0107 	umlal	r0, r1, r4, r7
    497e:	f7fb ff7d 	bl	87c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4982:	2c00      	cmp	r4, #0
    4984:	4b08      	ldr	r3, [pc, #32]	; (49a8 <k_sched_time_slice_set+0x58>)
    4986:	dc09      	bgt.n	499c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4988:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    498a:	4b08      	ldr	r3, [pc, #32]	; (49ac <k_sched_time_slice_set+0x5c>)
    498c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    498e:	f7ff ffc9 	bl	4924 <z_reset_time_slice>
	__asm__ volatile(
    4992:	f386 8811 	msr	BASEPRI, r6
    4996:	f3bf 8f6f 	isb	sy
	}
}
    499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    499c:	2802      	cmp	r0, #2
    499e:	bfb8      	it	lt
    49a0:	2002      	movlt	r0, #2
    49a2:	e7f1      	b.n	4988 <k_sched_time_slice_set+0x38>
    49a4:	2000060c 	.word	0x2000060c
    49a8:	20000644 	.word	0x20000644
    49ac:	20000640 	.word	0x20000640

000049b0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    49b0:	b949      	cbnz	r1, 49c6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    49b2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    49b6:	b930      	cbnz	r0, 49c6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    49b8:	4b05      	ldr	r3, [pc, #20]	; (49d0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    49ba:	69da      	ldr	r2, [r3, #28]
    49bc:	689b      	ldr	r3, [r3, #8]
    49be:	429a      	cmp	r2, r3
    49c0:	d001      	beq.n	49c6 <z_reschedule+0x16>
	ret = arch_swap(key);
    49c2:	f7fd b9fd 	b.w	1dc0 <arch_swap>
    49c6:	f381 8811 	msr	BASEPRI, r1
    49ca:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    49ce:	4770      	bx	lr
    49d0:	2000060c 	.word	0x2000060c

000049d4 <k_sched_lock>:
	__asm__ volatile(
    49d4:	f04f 0320 	mov.w	r3, #32
    49d8:	f3ef 8111 	mrs	r1, BASEPRI
    49dc:	f383 8812 	msr	BASEPRI_MAX, r3
    49e0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    49e4:	4b04      	ldr	r3, [pc, #16]	; (49f8 <k_sched_lock+0x24>)
    49e6:	689a      	ldr	r2, [r3, #8]
    49e8:	7bd3      	ldrb	r3, [r2, #15]
    49ea:	3b01      	subs	r3, #1
    49ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    49ee:	f381 8811 	msr	BASEPRI, r1
    49f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    49f6:	4770      	bx	lr
    49f8:	2000060c 	.word	0x2000060c

000049fc <update_cache>:
{
    49fc:	b538      	push	{r3, r4, r5, lr}
    49fe:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4a00:	480c      	ldr	r0, [pc, #48]	; (4a34 <update_cache+0x38>)
    4a02:	4d0d      	ldr	r5, [pc, #52]	; (4a38 <update_cache+0x3c>)
    4a04:	f001 fcdb 	bl	63be <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4a08:	4604      	mov	r4, r0
    4a0a:	b900      	cbnz	r0, 4a0e <update_cache+0x12>
    4a0c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    4a0e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4a10:	b94a      	cbnz	r2, 4a26 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    4a12:	7b5a      	ldrb	r2, [r3, #13]
    4a14:	06d2      	lsls	r2, r2, #27
    4a16:	d106      	bne.n	4a26 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4a18:	69a2      	ldr	r2, [r4, #24]
    4a1a:	b922      	cbnz	r2, 4a26 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    4a1c:	89da      	ldrh	r2, [r3, #14]
    4a1e:	2a7f      	cmp	r2, #127	; 0x7f
    4a20:	d901      	bls.n	4a26 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    4a22:	61eb      	str	r3, [r5, #28]
}
    4a24:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4a26:	429c      	cmp	r4, r3
    4a28:	d001      	beq.n	4a2e <update_cache+0x32>
			z_reset_time_slice();
    4a2a:	f7ff ff7b 	bl	4924 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4a2e:	61ec      	str	r4, [r5, #28]
}
    4a30:	e7f8      	b.n	4a24 <update_cache+0x28>
    4a32:	bf00      	nop
    4a34:	2000062c 	.word	0x2000062c
    4a38:	2000060c 	.word	0x2000060c

00004a3c <move_thread_to_end_of_prio_q>:
{
    4a3c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4a3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4a42:	7b43      	ldrb	r3, [r0, #13]
    4a44:	2a00      	cmp	r2, #0
{
    4a46:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4a48:	da04      	bge.n	4a54 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a4e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4a50:	f001 fc8d 	bl	636e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4a54:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4a56:	4a15      	ldr	r2, [pc, #84]	; (4aac <move_thread_to_end_of_prio_q+0x70>)
    4a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a5c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4a5e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a62:	f102 0520 	add.w	r5, r2, #32
    4a66:	42ab      	cmp	r3, r5
    4a68:	d01b      	beq.n	4aa2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a6a:	b1d3      	cbz	r3, 4aa2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    4a6c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4a70:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4a74:	4286      	cmp	r6, r0
    4a76:	d00f      	beq.n	4a98 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    4a78:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4a7a:	2800      	cmp	r0, #0
    4a7c:	dd0c      	ble.n	4a98 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4a7e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4a80:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4a84:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4a86:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    4a88:	6890      	ldr	r0, [r2, #8]
    4a8a:	1a43      	subs	r3, r0, r1
    4a8c:	4258      	negs	r0, r3
}
    4a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4a92:	4158      	adcs	r0, r3
    4a94:	f7ff bfb2 	b.w	49fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4a98:	42a3      	cmp	r3, r4
    4a9a:	d002      	beq.n	4aa2 <move_thread_to_end_of_prio_q+0x66>
    4a9c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d1e6      	bne.n	4a70 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    4aa2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    4aa6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4aa8:	6251      	str	r1, [r2, #36]	; 0x24
}
    4aaa:	e7ed      	b.n	4a88 <move_thread_to_end_of_prio_q+0x4c>
    4aac:	2000060c 	.word	0x2000060c

00004ab0 <z_time_slice>:
{
    4ab0:	b538      	push	{r3, r4, r5, lr}
    4ab2:	4601      	mov	r1, r0
	__asm__ volatile(
    4ab4:	f04f 0320 	mov.w	r3, #32
    4ab8:	f3ef 8411 	mrs	r4, BASEPRI
    4abc:	f383 8812 	msr	BASEPRI_MAX, r3
    4ac0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4ac4:	4b15      	ldr	r3, [pc, #84]	; (4b1c <z_time_slice+0x6c>)
    4ac6:	4a16      	ldr	r2, [pc, #88]	; (4b20 <z_time_slice+0x70>)
    4ac8:	6898      	ldr	r0, [r3, #8]
    4aca:	6815      	ldr	r5, [r2, #0]
    4acc:	42a8      	cmp	r0, r5
    4ace:	d106      	bne.n	4ade <z_time_slice+0x2e>
			z_reset_time_slice();
    4ad0:	f7ff ff28 	bl	4924 <z_reset_time_slice>
	__asm__ volatile(
    4ad4:	f384 8811 	msr	BASEPRI, r4
    4ad8:	f3bf 8f6f 	isb	sy
}
    4adc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4ade:	2500      	movs	r5, #0
    4ae0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4ae2:	4a10      	ldr	r2, [pc, #64]	; (4b24 <z_time_slice+0x74>)
    4ae4:	6812      	ldr	r2, [r2, #0]
    4ae6:	b1ba      	cbz	r2, 4b18 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    4ae8:	89c2      	ldrh	r2, [r0, #14]
    4aea:	2a7f      	cmp	r2, #127	; 0x7f
    4aec:	d814      	bhi.n	4b18 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    4aee:	7b42      	ldrb	r2, [r0, #13]
    4af0:	06d2      	lsls	r2, r2, #27
    4af2:	d111      	bne.n	4b18 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4af4:	4a0c      	ldr	r2, [pc, #48]	; (4b28 <z_time_slice+0x78>)
    4af6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4afa:	6812      	ldr	r2, [r2, #0]
    4afc:	4295      	cmp	r5, r2
    4afe:	db0b      	blt.n	4b18 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    4b00:	4a0a      	ldr	r2, [pc, #40]	; (4b2c <z_time_slice+0x7c>)
    4b02:	4290      	cmp	r0, r2
    4b04:	d008      	beq.n	4b18 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    4b06:	691a      	ldr	r2, [r3, #16]
    4b08:	428a      	cmp	r2, r1
    4b0a:	dc02      	bgt.n	4b12 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    4b0c:	f7ff ff96 	bl	4a3c <move_thread_to_end_of_prio_q>
    4b10:	e7de      	b.n	4ad0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    4b12:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    4b14:	611a      	str	r2, [r3, #16]
    4b16:	e7dd      	b.n	4ad4 <z_time_slice+0x24>
    4b18:	2200      	movs	r2, #0
    4b1a:	e7fb      	b.n	4b14 <z_time_slice+0x64>
    4b1c:	2000060c 	.word	0x2000060c
    4b20:	2000063c 	.word	0x2000063c
    4b24:	20000644 	.word	0x20000644
    4b28:	20000640 	.word	0x20000640
    4b2c:	200001f8 	.word	0x200001f8

00004b30 <ready_thread>:
{
    4b30:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4b32:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4b36:	7b43      	ldrb	r3, [r0, #13]
    4b38:	2a00      	cmp	r2, #0
    4b3a:	db2a      	blt.n	4b92 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b3c:	06da      	lsls	r2, r3, #27
    4b3e:	d128      	bne.n	4b92 <ready_thread+0x62>
    4b40:	6982      	ldr	r2, [r0, #24]
    4b42:	bb32      	cbnz	r2, 4b92 <ready_thread+0x62>
	return list->head == list;
    4b44:	4a14      	ldr	r2, [pc, #80]	; (4b98 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b4a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    4b4c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b50:	f102 0520 	add.w	r5, r2, #32
    4b54:	42ab      	cmp	r3, r5
    4b56:	d017      	beq.n	4b88 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b58:	b1b3      	cbz	r3, 4b88 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    4b5a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4b5e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4b62:	428e      	cmp	r6, r1
    4b64:	d00b      	beq.n	4b7e <ready_thread+0x4e>
		return b2 - b1;
    4b66:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4b68:	2900      	cmp	r1, #0
    4b6a:	dd08      	ble.n	4b7e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    4b6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4b6e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4b72:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4b74:	6058      	str	r0, [r3, #4]
}
    4b76:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4b78:	2000      	movs	r0, #0
    4b7a:	f7ff bf3f 	b.w	49fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4b7e:	42a3      	cmp	r3, r4
    4b80:	d002      	beq.n	4b88 <ready_thread+0x58>
    4b82:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b84:	2b00      	cmp	r3, #0
    4b86:	d1ea      	bne.n	4b5e <ready_thread+0x2e>
	node->prev = tail;
    4b88:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    4b8c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4b8e:	6250      	str	r0, [r2, #36]	; 0x24
}
    4b90:	e7f1      	b.n	4b76 <ready_thread+0x46>
}
    4b92:	bc70      	pop	{r4, r5, r6}
    4b94:	4770      	bx	lr
    4b96:	bf00      	nop
    4b98:	2000060c 	.word	0x2000060c

00004b9c <z_sched_start>:
{
    4b9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b9e:	f04f 0220 	mov.w	r2, #32
    4ba2:	f3ef 8411 	mrs	r4, BASEPRI
    4ba6:	f382 8812 	msr	BASEPRI_MAX, r2
    4baa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4bae:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4bb0:	0751      	lsls	r1, r2, #29
    4bb2:	d404      	bmi.n	4bbe <z_sched_start+0x22>
	__asm__ volatile(
    4bb4:	f384 8811 	msr	BASEPRI, r4
    4bb8:	f3bf 8f6f 	isb	sy
}
    4bbc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4bbe:	f022 0204 	bic.w	r2, r2, #4
    4bc2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4bc4:	f7ff ffb4 	bl	4b30 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4bc8:	4621      	mov	r1, r4
    4bca:	4802      	ldr	r0, [pc, #8]	; (4bd4 <z_sched_start+0x38>)
}
    4bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4bd0:	f7ff beee 	b.w	49b0 <z_reschedule>
    4bd4:	20000a81 	.word	0x20000a81

00004bd8 <unready_thread>:
{
    4bd8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4bda:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4bde:	7b43      	ldrb	r3, [r0, #13]
    4be0:	2a00      	cmp	r2, #0
{
    4be2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4be4:	da04      	bge.n	4bf0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4bea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4bec:	f001 fbbf 	bl	636e <sys_dlist_remove>
	update_cache(thread == _current);
    4bf0:	4b04      	ldr	r3, [pc, #16]	; (4c04 <unready_thread+0x2c>)
    4bf2:	6898      	ldr	r0, [r3, #8]
    4bf4:	1a43      	subs	r3, r0, r1
    4bf6:	4258      	negs	r0, r3
    4bf8:	4158      	adcs	r0, r3
}
    4bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4bfe:	f7ff befd 	b.w	49fc <update_cache>
    4c02:	bf00      	nop
    4c04:	2000060c 	.word	0x2000060c

00004c08 <pend>:
{
    4c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c0c:	4606      	mov	r6, r0
    4c0e:	4615      	mov	r5, r2
    4c10:	461c      	mov	r4, r3
	__asm__ volatile(
    4c12:	f04f 0320 	mov.w	r3, #32
    4c16:	f3ef 8711 	mrs	r7, BASEPRI
    4c1a:	f383 8812 	msr	BASEPRI_MAX, r3
    4c1e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4c22:	f001 fc04 	bl	642e <add_to_waitq_locked>
	__asm__ volatile(
    4c26:	f387 8811 	msr	BASEPRI, r7
    4c2a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4c32:	bf08      	it	eq
    4c34:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4c38:	d008      	beq.n	4c4c <pend+0x44>
    4c3a:	462a      	mov	r2, r5
    4c3c:	4623      	mov	r3, r4
    4c3e:	f106 0018 	add.w	r0, r6, #24
    4c42:	4903      	ldr	r1, [pc, #12]	; (4c50 <pend+0x48>)
}
    4c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c48:	f000 b9f4 	b.w	5034 <z_add_timeout>
    4c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c50:	000063eb 	.word	0x000063eb

00004c54 <z_pend_curr>:
{
    4c54:	b510      	push	{r4, lr}
	pending_current = _current;
    4c56:	4b07      	ldr	r3, [pc, #28]	; (4c74 <z_pend_curr+0x20>)
    4c58:	6898      	ldr	r0, [r3, #8]
    4c5a:	4b07      	ldr	r3, [pc, #28]	; (4c78 <z_pend_curr+0x24>)
{
    4c5c:	460c      	mov	r4, r1
	pending_current = _current;
    4c5e:	6018      	str	r0, [r3, #0]
{
    4c60:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4c66:	f7ff ffcf 	bl	4c08 <pend>
    4c6a:	4620      	mov	r0, r4
}
    4c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c70:	f7fd b8a6 	b.w	1dc0 <arch_swap>
    4c74:	2000060c 	.word	0x2000060c
    4c78:	2000063c 	.word	0x2000063c

00004c7c <z_impl_k_thread_suspend>:
{
    4c7c:	b570      	push	{r4, r5, r6, lr}
    4c7e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4c80:	3018      	adds	r0, #24
    4c82:	f001 fc33 	bl	64ec <z_abort_timeout>
	__asm__ volatile(
    4c86:	f04f 0320 	mov.w	r3, #32
    4c8a:	f3ef 8611 	mrs	r6, BASEPRI
    4c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c92:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4c96:	f994 200d 	ldrsb.w	r2, [r4, #13]
    4c9a:	7b63      	ldrb	r3, [r4, #13]
    4c9c:	2a00      	cmp	r2, #0
    4c9e:	da05      	bge.n	4cac <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ca4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4ca6:	4620      	mov	r0, r4
    4ca8:	f001 fb61 	bl	636e <sys_dlist_remove>
		update_cache(thread == _current);
    4cac:	4d0b      	ldr	r5, [pc, #44]	; (4cdc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4cae:	7b63      	ldrb	r3, [r4, #13]
    4cb0:	68a8      	ldr	r0, [r5, #8]
    4cb2:	f043 0310 	orr.w	r3, r3, #16
    4cb6:	7363      	strb	r3, [r4, #13]
    4cb8:	1b03      	subs	r3, r0, r4
    4cba:	4258      	negs	r0, r3
    4cbc:	4158      	adcs	r0, r3
    4cbe:	f7ff fe9d 	bl	49fc <update_cache>
	__asm__ volatile(
    4cc2:	f386 8811 	msr	BASEPRI, r6
    4cc6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4cca:	68ab      	ldr	r3, [r5, #8]
    4ccc:	42a3      	cmp	r3, r4
    4cce:	d103      	bne.n	4cd8 <z_impl_k_thread_suspend+0x5c>
}
    4cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4cd4:	f001 bb69 	b.w	63aa <z_reschedule_unlocked>
}
    4cd8:	bd70      	pop	{r4, r5, r6, pc}
    4cda:	bf00      	nop
    4cdc:	2000060c 	.word	0x2000060c

00004ce0 <k_sched_unlock>:
{
    4ce0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4ce2:	f04f 0320 	mov.w	r3, #32
    4ce6:	f3ef 8411 	mrs	r4, BASEPRI
    4cea:	f383 8812 	msr	BASEPRI_MAX, r3
    4cee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4cf2:	4b08      	ldr	r3, [pc, #32]	; (4d14 <k_sched_unlock+0x34>)
    4cf4:	689a      	ldr	r2, [r3, #8]
    4cf6:	7bd3      	ldrb	r3, [r2, #15]
    4cf8:	3301      	adds	r3, #1
    4cfa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4cfc:	2000      	movs	r0, #0
    4cfe:	f7ff fe7d 	bl	49fc <update_cache>
	__asm__ volatile(
    4d02:	f384 8811 	msr	BASEPRI, r4
    4d06:	f3bf 8f6f 	isb	sy
}
    4d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4d0e:	f001 bb4c 	b.w	63aa <z_reschedule_unlocked>
    4d12:	bf00      	nop
    4d14:	2000060c 	.word	0x2000060c

00004d18 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4d18:	4b04      	ldr	r3, [pc, #16]	; (4d2c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4d1a:	2100      	movs	r1, #0
    4d1c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4d20:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4d24:	4608      	mov	r0, r1
    4d26:	f7ff be13 	b.w	4950 <k_sched_time_slice_set>
    4d2a:	bf00      	nop
    4d2c:	2000060c 	.word	0x2000060c

00004d30 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4d32:	f04f 0320 	mov.w	r3, #32
    4d36:	f3ef 8511 	mrs	r5, BASEPRI
    4d3a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4d42:	491a      	ldr	r1, [pc, #104]	; (4dac <z_impl_k_yield+0x7c>)
    4d44:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d46:	7b43      	ldrb	r3, [r0, #13]
    4d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d4c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4d4e:	f001 fb0e 	bl	636e <sys_dlist_remove>
	}
	queue_thread(_current);
    4d52:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4d54:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4d56:	4608      	mov	r0, r1
    4d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4d5c:	735a      	strb	r2, [r3, #13]
    4d5e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d62:	4282      	cmp	r2, r0
    4d64:	d01c      	beq.n	4da0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d66:	b1da      	cbz	r2, 4da0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    4d68:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    4d6a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4d6e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4d72:	42a6      	cmp	r6, r4
    4d74:	d00f      	beq.n	4d96 <z_impl_k_yield+0x66>
		return b2 - b1;
    4d76:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d78:	2c00      	cmp	r4, #0
    4d7a:	dd0c      	ble.n	4d96 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    4d7c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4d7e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4d82:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4d84:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4d86:	2001      	movs	r0, #1
    4d88:	f7ff fe38 	bl	49fc <update_cache>
    4d8c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    4d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4d92:	f7fd b815 	b.w	1dc0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4d96:	42ba      	cmp	r2, r7
    4d98:	d002      	beq.n	4da0 <z_impl_k_yield+0x70>
    4d9a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d9c:	2a00      	cmp	r2, #0
    4d9e:	d1e6      	bne.n	4d6e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    4da0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    4da2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    4da6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4da8:	624b      	str	r3, [r1, #36]	; 0x24
}
    4daa:	e7ec      	b.n	4d86 <z_impl_k_yield+0x56>
    4dac:	2000060c 	.word	0x2000060c

00004db0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4db0:	ea50 0301 	orrs.w	r3, r0, r1
{
    4db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4db8:	4605      	mov	r5, r0
    4dba:	460e      	mov	r6, r1
	if (ticks == 0) {
    4dbc:	d103      	bne.n	4dc6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    4dbe:	f7ff ffb7 	bl	4d30 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    4dc2:	2000      	movs	r0, #0
    4dc4:	e033      	b.n	4e2e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    4dc6:	f06f 0401 	mvn.w	r4, #1
    4dca:	1a24      	subs	r4, r4, r0
    4dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4dd0:	eb63 0301 	sbc.w	r3, r3, r1
    4dd4:	2c01      	cmp	r4, #1
    4dd6:	f173 0300 	sbcs.w	r3, r3, #0
    4dda:	da02      	bge.n	4de2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4ddc:	f001 fbc6 	bl	656c <sys_clock_tick_get_32>
    4de0:	1944      	adds	r4, r0, r5
    4de2:	f04f 0320 	mov.w	r3, #32
    4de6:	f3ef 8811 	mrs	r8, BASEPRI
    4dea:	f383 8812 	msr	BASEPRI_MAX, r3
    4dee:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4df2:	4f10      	ldr	r7, [pc, #64]	; (4e34 <z_tick_sleep+0x84>)
    4df4:	4b10      	ldr	r3, [pc, #64]	; (4e38 <z_tick_sleep+0x88>)
    4df6:	68b8      	ldr	r0, [r7, #8]
    4df8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4dfa:	f7ff feed 	bl	4bd8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4dfe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4e00:	490e      	ldr	r1, [pc, #56]	; (4e3c <z_tick_sleep+0x8c>)
    4e02:	462a      	mov	r2, r5
    4e04:	4633      	mov	r3, r6
    4e06:	3018      	adds	r0, #24
    4e08:	f000 f914 	bl	5034 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4e0c:	68ba      	ldr	r2, [r7, #8]
    4e0e:	7b53      	ldrb	r3, [r2, #13]
    4e10:	f043 0310 	orr.w	r3, r3, #16
    4e14:	7353      	strb	r3, [r2, #13]
    4e16:	4640      	mov	r0, r8
    4e18:	f7fc ffd2 	bl	1dc0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4e1c:	f001 fba6 	bl	656c <sys_clock_tick_get_32>
    4e20:	1a20      	subs	r0, r4, r0
    4e22:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4e26:	2801      	cmp	r0, #1
    4e28:	f173 0300 	sbcs.w	r3, r3, #0
    4e2c:	dbc9      	blt.n	4dc2 <z_tick_sleep+0x12>
}
    4e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e32:	bf00      	nop
    4e34:	2000060c 	.word	0x2000060c
    4e38:	2000063c 	.word	0x2000063c
    4e3c:	000063eb 	.word	0x000063eb

00004e40 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e40:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4e44:	bf08      	it	eq
    4e46:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4e4a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e4c:	d106      	bne.n	4e5c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4e4e:	4b08      	ldr	r3, [pc, #32]	; (4e70 <z_impl_k_sleep+0x30>)
    4e50:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4e52:	f7ff ff13 	bl	4c7c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4e5a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4e5c:	f7ff ffa8 	bl	4db0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    4e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4e64:	fb80 0303 	smull	r0, r3, r0, r3
    4e68:	0bc0      	lsrs	r0, r0, #15
    4e6a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4e6e:	e7f4      	b.n	4e5a <z_impl_k_sleep+0x1a>
    4e70:	2000060c 	.word	0x2000060c

00004e74 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4e74:	4b01      	ldr	r3, [pc, #4]	; (4e7c <z_impl_z_current_get+0x8>)
    4e76:	6898      	ldr	r0, [r3, #8]
    4e78:	4770      	bx	lr
    4e7a:	bf00      	nop
    4e7c:	2000060c 	.word	0x2000060c

00004e80 <z_impl_k_is_preempt_thread>:
    4e80:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    4e84:	b93b      	cbnz	r3, 4e96 <z_impl_k_is_preempt_thread+0x16>
    4e86:	4b05      	ldr	r3, [pc, #20]	; (4e9c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4e88:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    4e8a:	89d8      	ldrh	r0, [r3, #14]
    4e8c:	287f      	cmp	r0, #127	; 0x7f
    4e8e:	bf8c      	ite	hi
    4e90:	2000      	movhi	r0, #0
    4e92:	2001      	movls	r0, #1
    4e94:	4770      	bx	lr
    4e96:	2000      	movs	r0, #0
}
    4e98:	4770      	bx	lr
    4e9a:	bf00      	nop
    4e9c:	2000060c 	.word	0x2000060c

00004ea0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ea4:	4604      	mov	r4, r0
    4ea6:	f04f 0320 	mov.w	r3, #32
    4eaa:	f3ef 8611 	mrs	r6, BASEPRI
    4eae:	f383 8812 	msr	BASEPRI_MAX, r3
    4eb2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4eb6:	7b43      	ldrb	r3, [r0, #13]
    4eb8:	071a      	lsls	r2, r3, #28
    4eba:	d505      	bpl.n	4ec8 <z_thread_abort+0x28>
	__asm__ volatile(
    4ebc:	f386 8811 	msr	BASEPRI, r6
    4ec0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ec8:	f023 0220 	bic.w	r2, r3, #32
    4ecc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4ed0:	09d2      	lsrs	r2, r2, #7
    4ed2:	d120      	bne.n	4f16 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ed4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4ed6:	68a3      	ldr	r3, [r4, #8]
    4ed8:	b113      	cbz	r3, 4ee0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4eda:	4620      	mov	r0, r4
    4edc:	f001 fa4f 	bl	637e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4ee0:	f104 0018 	add.w	r0, r4, #24
    4ee4:	f001 fb02 	bl	64ec <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4ee8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4eec:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4ef0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ef2:	42bd      	cmp	r5, r7
    4ef4:	d000      	beq.n	4ef8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4ef6:	b9b5      	cbnz	r5, 4f26 <z_thread_abort+0x86>
		update_cache(1);
    4ef8:	2001      	movs	r0, #1
    4efa:	f7ff fd7f 	bl	49fc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4efe:	4b10      	ldr	r3, [pc, #64]	; (4f40 <z_thread_abort+0xa0>)
    4f00:	689b      	ldr	r3, [r3, #8]
    4f02:	42a3      	cmp	r3, r4
    4f04:	d1da      	bne.n	4ebc <z_thread_abort+0x1c>
    4f06:	f3ef 8305 	mrs	r3, IPSR
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d1d6      	bne.n	4ebc <z_thread_abort+0x1c>
    4f0e:	4630      	mov	r0, r6
    4f10:	f7fc ff56 	bl	1dc0 <arch_swap>
	return ret;
    4f14:	e7d2      	b.n	4ebc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f16:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4f1a:	f043 0308 	orr.w	r3, r3, #8
    4f1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4f20:	f001 fa25 	bl	636e <sys_dlist_remove>
}
    4f24:	e7d7      	b.n	4ed6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4f26:	4628      	mov	r0, r5
    4f28:	f001 fa29 	bl	637e <unpend_thread_no_timeout>
    4f2c:	f105 0018 	add.w	r0, r5, #24
    4f30:	f001 fadc 	bl	64ec <z_abort_timeout>
    4f34:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4f38:	4628      	mov	r0, r5
    4f3a:	f7ff fdf9 	bl	4b30 <ready_thread>
    4f3e:	e7d7      	b.n	4ef0 <z_thread_abort+0x50>
    4f40:	2000060c 	.word	0x2000060c

00004f44 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4f44:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4f46:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    4f4a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4f4c:	e9cd 6700 	strd	r6, r7, [sp]
    4f50:	f7ff fe80 	bl	4c54 <z_pend_curr>

	if (data != NULL) {
    4f54:	b11c      	cbz	r4, 4f5e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    4f56:	4b03      	ldr	r3, [pc, #12]	; (4f64 <z_sched_wait+0x20>)
    4f58:	689b      	ldr	r3, [r3, #8]
    4f5a:	695b      	ldr	r3, [r3, #20]
    4f5c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    4f5e:	b002      	add	sp, #8
    4f60:	bdd0      	pop	{r4, r6, r7, pc}
    4f62:	bf00      	nop
    4f64:	2000060c 	.word	0x2000060c

00004f68 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4f68:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    4f6a:	4806      	ldr	r0, [pc, #24]	; (4f84 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4f6c:	4a06      	ldr	r2, [pc, #24]	; (4f88 <z_data_copy+0x20>)
    4f6e:	4907      	ldr	r1, [pc, #28]	; (4f8c <z_data_copy+0x24>)
    4f70:	1a12      	subs	r2, r2, r0
    4f72:	f000 fb6f 	bl	5654 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4f7a:	4a05      	ldr	r2, [pc, #20]	; (4f90 <z_data_copy+0x28>)
    4f7c:	4905      	ldr	r1, [pc, #20]	; (4f94 <z_data_copy+0x2c>)
    4f7e:	4806      	ldr	r0, [pc, #24]	; (4f98 <z_data_copy+0x30>)
    4f80:	f000 bb68 	b.w	5654 <memcpy>
    4f84:	20000000 	.word	0x20000000
    4f88:	200000f0 	.word	0x200000f0
    4f8c:	00006e70 	.word	0x00006e70
    4f90:	00000000 	.word	0x00000000
    4f94:	00006e70 	.word	0x00006e70
    4f98:	20000000 	.word	0x20000000

00004f9c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4f9c:	4b03      	ldr	r3, [pc, #12]	; (4fac <elapsed+0x10>)
    4f9e:	681b      	ldr	r3, [r3, #0]
    4fa0:	b90b      	cbnz	r3, 4fa6 <elapsed+0xa>
    4fa2:	f7fe bb17 	b.w	35d4 <sys_clock_elapsed>
}
    4fa6:	2000      	movs	r0, #0
    4fa8:	4770      	bx	lr
    4faa:	bf00      	nop
    4fac:	20000648 	.word	0x20000648

00004fb0 <next_timeout>:
	return list->head == list;
    4fb0:	4b11      	ldr	r3, [pc, #68]	; (4ff8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    4fb2:	b510      	push	{r4, lr}
    4fb4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4fb6:	429c      	cmp	r4, r3
    4fb8:	bf08      	it	eq
    4fba:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4fbc:	f7ff ffee 	bl	4f9c <elapsed>
    4fc0:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4fc2:	b16c      	cbz	r4, 4fe0 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4fc4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    4fc8:	1ac0      	subs	r0, r0, r3
    4fca:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4fce:	2801      	cmp	r0, #1
    4fd0:	f173 0200 	sbcs.w	r2, r3, #0
    4fd4:	db0d      	blt.n	4ff2 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4fd6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    4fda:	f173 0300 	sbcs.w	r3, r3, #0
    4fde:	db01      	blt.n	4fe4 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    4fe0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4fe4:	4b05      	ldr	r3, [pc, #20]	; (4ffc <next_timeout+0x4c>)
    4fe6:	691b      	ldr	r3, [r3, #16]
    4fe8:	b113      	cbz	r3, 4ff0 <next_timeout+0x40>
    4fea:	4298      	cmp	r0, r3
    4fec:	bfa8      	it	ge
    4fee:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4ff0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4ff2:	2000      	movs	r0, #0
    4ff4:	e7f6      	b.n	4fe4 <next_timeout+0x34>
    4ff6:	bf00      	nop
    4ff8:	200000ac 	.word	0x200000ac
    4ffc:	2000060c 	.word	0x2000060c

00005000 <remove_timeout>:
{
    5000:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5002:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5004:	b168      	cbz	r0, 5022 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5006:	4a0a      	ldr	r2, [pc, #40]	; (5030 <remove_timeout+0x30>)
    5008:	6852      	ldr	r2, [r2, #4]
    500a:	4290      	cmp	r0, r2
    500c:	d009      	beq.n	5022 <remove_timeout+0x22>
	if (next(t) != NULL) {
    500e:	b143      	cbz	r3, 5022 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5010:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5014:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5018:	1912      	adds	r2, r2, r4
    501a:	eb41 0105 	adc.w	r1, r1, r5
    501e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5022:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5024:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5026:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5028:	2300      	movs	r3, #0
	node->prev = NULL;
    502a:	e9c0 3300 	strd	r3, r3, [r0]
}
    502e:	bd30      	pop	{r4, r5, pc}
    5030:	200000ac 	.word	0x200000ac

00005034 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5038:	bf08      	it	eq
    503a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    503e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5040:	4604      	mov	r4, r0
    5042:	461f      	mov	r7, r3
    5044:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5046:	d067      	beq.n	5118 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5048:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    504a:	f04f 0320 	mov.w	r3, #32
    504e:	f3ef 8611 	mrs	r6, BASEPRI
    5052:	f383 8812 	msr	BASEPRI_MAX, r3
    5056:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    505a:	f06f 0201 	mvn.w	r2, #1
    505e:	1b53      	subs	r3, r2, r5
    5060:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5064:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5068:	2b00      	cmp	r3, #0
    506a:	db1b      	blt.n	50a4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    506c:	4b2b      	ldr	r3, [pc, #172]	; (511c <z_add_timeout+0xe8>)
    506e:	e9d3 1300 	ldrd	r1, r3, [r3]
    5072:	1a52      	subs	r2, r2, r1
    5074:	eb6c 0303 	sbc.w	r3, ip, r3
    5078:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    507a:	eb63 0307 	sbc.w	r3, r3, r7
    507e:	2d01      	cmp	r5, #1
    5080:	f173 0200 	sbcs.w	r2, r3, #0
    5084:	bfbc      	itt	lt
    5086:	2501      	movlt	r5, #1
    5088:	2300      	movlt	r3, #0
    508a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    508e:	4824      	ldr	r0, [pc, #144]	; (5120 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5090:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5094:	4283      	cmp	r3, r0
    5096:	d118      	bne.n	50ca <z_add_timeout+0x96>
	node->prev = tail;
    5098:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    509c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    50a0:	6044      	str	r4, [r0, #4]
}
    50a2:	e026      	b.n	50f2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    50a4:	f7ff ff7a 	bl	4f9c <elapsed>
    50a8:	3501      	adds	r5, #1
    50aa:	f147 0700 	adc.w	r7, r7, #0
    50ae:	182d      	adds	r5, r5, r0
    50b0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    50b4:	e9c4 5704 	strd	r5, r7, [r4, #16]
    50b8:	e7e9      	b.n	508e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    50ba:	1a52      	subs	r2, r2, r1
    50bc:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    50c0:	459c      	cmp	ip, r3
    50c2:	e9c4 2504 	strd	r2, r5, [r4, #16]
    50c6:	d0e7      	beq.n	5098 <z_add_timeout+0x64>
    50c8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    50ca:	2b00      	cmp	r3, #0
    50cc:	d0e4      	beq.n	5098 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    50ce:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    50d2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    50d6:	428a      	cmp	r2, r1
    50d8:	eb75 0e07 	sbcs.w	lr, r5, r7
    50dc:	daed      	bge.n	50ba <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    50de:	1a8a      	subs	r2, r1, r2
    50e0:	eb67 0505 	sbc.w	r5, r7, r5
    50e4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    50e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    50ea:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    50ee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    50f0:	605c      	str	r4, [r3, #4]
	return list->head == list;
    50f2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50f4:	4283      	cmp	r3, r0
    50f6:	d00b      	beq.n	5110 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    50f8:	429c      	cmp	r4, r3
    50fa:	d109      	bne.n	5110 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    50fc:	f7ff ff58 	bl	4fb0 <next_timeout>

			if (next_time == 0 ||
    5100:	b118      	cbz	r0, 510a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5102:	4b08      	ldr	r3, [pc, #32]	; (5124 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5104:	691b      	ldr	r3, [r3, #16]
    5106:	4283      	cmp	r3, r0
    5108:	d002      	beq.n	5110 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    510a:	2100      	movs	r1, #0
    510c:	f7fe fa30 	bl	3570 <sys_clock_set_timeout>
	__asm__ volatile(
    5110:	f386 8811 	msr	BASEPRI, r6
    5114:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    511a:	bf00      	nop
    511c:	200002f8 	.word	0x200002f8
    5120:	200000ac 	.word	0x200000ac
    5124:	2000060c 	.word	0x2000060c

00005128 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    512c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    512e:	f7ff fcbf 	bl	4ab0 <z_time_slice>
	__asm__ volatile(
    5132:	f04f 0320 	mov.w	r3, #32
    5136:	f3ef 8411 	mrs	r4, BASEPRI
    513a:	f383 8812 	msr	BASEPRI_MAX, r3
    513e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5142:	4e24      	ldr	r6, [pc, #144]	; (51d4 <sys_clock_announce+0xac>)
	return list->head == list;
    5144:	f8df 8090 	ldr.w	r8, [pc, #144]	; 51d8 <sys_clock_announce+0xb0>
    5148:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    514a:	4d24      	ldr	r5, [pc, #144]	; (51dc <sys_clock_announce+0xb4>)
    514c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5150:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5152:	4540      	cmp	r0, r8
		curr_tick += dt;
    5154:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5158:	ea4f 77e2 	mov.w	r7, r2, asr #31
    515c:	d00b      	beq.n	5176 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    515e:	b150      	cbz	r0, 5176 <sys_clock_announce+0x4e>
    5160:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5164:	429a      	cmp	r2, r3
    5166:	eb77 090c 	sbcs.w	r9, r7, ip
    516a:	da16      	bge.n	519a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    516c:	1a9b      	subs	r3, r3, r2
    516e:	eb6c 0c07 	sbc.w	ip, ip, r7
    5172:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5176:	1852      	adds	r2, r2, r1
    5178:	eb4e 0707 	adc.w	r7, lr, r7
    517c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5180:	2500      	movs	r5, #0
    5182:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5184:	f7ff ff14 	bl	4fb0 <next_timeout>
    5188:	4629      	mov	r1, r5
    518a:	f7fe f9f1 	bl	3570 <sys_clock_set_timeout>
	__asm__ volatile(
    518e:	f384 8811 	msr	BASEPRI, r4
    5192:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    519a:	1859      	adds	r1, r3, r1
    519c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    51a0:	1ad3      	subs	r3, r2, r3
    51a2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    51a4:	2200      	movs	r2, #0
    51a6:	2300      	movs	r3, #0
    51a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    51ac:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    51b0:	f7ff ff26 	bl	5000 <remove_timeout>
    51b4:	f384 8811 	msr	BASEPRI, r4
    51b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    51bc:	6883      	ldr	r3, [r0, #8]
    51be:	4798      	blx	r3
	__asm__ volatile(
    51c0:	f04f 0320 	mov.w	r3, #32
    51c4:	f3ef 8411 	mrs	r4, BASEPRI
    51c8:	f383 8812 	msr	BASEPRI_MAX, r3
    51cc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    51d0:	e7bc      	b.n	514c <sys_clock_announce+0x24>
    51d2:	bf00      	nop
    51d4:	20000648 	.word	0x20000648
    51d8:	200000ac 	.word	0x200000ac
    51dc:	200002f8 	.word	0x200002f8

000051e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    51e0:	b510      	push	{r4, lr}
    51e2:	f04f 0320 	mov.w	r3, #32
    51e6:	f3ef 8411 	mrs	r4, BASEPRI
    51ea:	f383 8812 	msr	BASEPRI_MAX, r3
    51ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    51f2:	f7fe f9ef 	bl	35d4 <sys_clock_elapsed>
    51f6:	4a05      	ldr	r2, [pc, #20]	; (520c <sys_clock_tick_get+0x2c>)
    51f8:	e9d2 3100 	ldrd	r3, r1, [r2]
    51fc:	18c0      	adds	r0, r0, r3
    51fe:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5202:	f384 8811 	msr	BASEPRI, r4
    5206:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    520a:	bd10      	pop	{r4, pc}
    520c:	200002f8 	.word	0x200002f8

00005210 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5210:	4a02      	ldr	r2, [pc, #8]	; (521c <boot_banner+0xc>)
    5212:	4903      	ldr	r1, [pc, #12]	; (5220 <boot_banner+0x10>)
    5214:	4803      	ldr	r0, [pc, #12]	; (5224 <boot_banner+0x14>)
    5216:	f000 b842 	b.w	529e <printk>
    521a:	bf00      	nop
    521c:	00006ca7 	.word	0x00006ca7
    5220:	00006e25 	.word	0x00006e25
    5224:	00006e40 	.word	0x00006e40

00005228 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    5228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    522a:	4b09      	ldr	r3, [pc, #36]	; (5250 <k_sys_work_q_init+0x28>)
    522c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    522e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    5230:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    5232:	9300      	str	r3, [sp, #0]
    5234:	4907      	ldr	r1, [pc, #28]	; (5254 <k_sys_work_q_init+0x2c>)
    5236:	4808      	ldr	r0, [pc, #32]	; (5258 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    5238:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    523c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5240:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5244:	f7ff fb06 	bl	4854 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    5248:	4620      	mov	r0, r4
    524a:	b004      	add	sp, #16
    524c:	bd10      	pop	{r4, pc}
    524e:	bf00      	nop
    5250:	00006e67 	.word	0x00006e67
    5254:	20001840 	.word	0x20001840
    5258:	20000300 	.word	0x20000300

0000525c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    525c:	4770      	bx	lr

0000525e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    525e:	4603      	mov	r3, r0
    5260:	b158      	cbz	r0, 527a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5262:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5264:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5268:	2a01      	cmp	r2, #1
    526a:	d003      	beq.n	5274 <sys_notify_validate+0x16>
    526c:	2a03      	cmp	r2, #3
    526e:	d104      	bne.n	527a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5270:	6802      	ldr	r2, [r0, #0]
    5272:	b112      	cbz	r2, 527a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5274:	2000      	movs	r0, #0
    5276:	6098      	str	r0, [r3, #8]
    5278:	4770      	bx	lr
		return -EINVAL;
    527a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    527e:	4770      	bx	lr

00005280 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5280:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5282:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5284:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5288:	2a03      	cmp	r2, #3
    528a:	f04f 0200 	mov.w	r2, #0
{
    528e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5290:	bf0c      	ite	eq
    5292:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    5294:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5296:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5298:	4770      	bx	lr

0000529a <arch_printk_char_out>:
}
    529a:	2000      	movs	r0, #0
    529c:	4770      	bx	lr

0000529e <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    529e:	b40f      	push	{r0, r1, r2, r3}
    52a0:	b507      	push	{r0, r1, r2, lr}
    52a2:	a904      	add	r1, sp, #16
    52a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    52a8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    52aa:	f7fb fd0f 	bl	ccc <vprintk>
	}
	va_end(ap);
}
    52ae:	b003      	add	sp, #12
    52b0:	f85d eb04 	ldr.w	lr, [sp], #4
    52b4:	b004      	add	sp, #16
    52b6:	4770      	bx	lr

000052b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    52b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    52ba:	f013 0307 	ands.w	r3, r3, #7
    52be:	d105      	bne.n	52cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    52c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    52c2:	2b00      	cmp	r3, #0
    52c4:	bf0c      	ite	eq
    52c6:	2000      	moveq	r0, #0
    52c8:	2003      	movne	r0, #3
    52ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    52cc:	2b02      	cmp	r3, #2
    52ce:	d105      	bne.n	52dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    52d0:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    52d2:	2b00      	cmp	r3, #0
    52d4:	bf14      	ite	ne
    52d6:	2000      	movne	r0, #0
    52d8:	2004      	moveq	r0, #4
    52da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    52dc:	2b01      	cmp	r3, #1
    52de:	d105      	bne.n	52ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    52e0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    52e2:	2b00      	cmp	r3, #0
    52e4:	bf0c      	ite	eq
    52e6:	2000      	moveq	r0, #0
    52e8:	2005      	movne	r0, #5
    52ea:	4770      	bx	lr
	int evt = EVT_NOP;
    52ec:	2000      	movs	r0, #0
}
    52ee:	4770      	bx	lr

000052f0 <notify_one>:
{
    52f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52f4:	460d      	mov	r5, r1
    52f6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    52f8:	4619      	mov	r1, r3
    52fa:	1d28      	adds	r0, r5, #4
{
    52fc:	4690      	mov	r8, r2
    52fe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5300:	f7ff ffbe 	bl	5280 <sys_notify_finalize>
	if (cb) {
    5304:	4604      	mov	r4, r0
    5306:	b138      	cbz	r0, 5318 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5308:	4633      	mov	r3, r6
    530a:	4642      	mov	r2, r8
    530c:	4629      	mov	r1, r5
    530e:	4638      	mov	r0, r7
    5310:	46a4      	mov	ip, r4
}
    5312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5316:	4760      	bx	ip
}
    5318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000531c <transition_complete>:
{
    531c:	b410      	push	{r4}
	__asm__ volatile(
    531e:	f04f 0420 	mov.w	r4, #32
    5322:	f3ef 8211 	mrs	r2, BASEPRI
    5326:	f384 8812 	msr	BASEPRI_MAX, r4
    532a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    532e:	6141      	str	r1, [r0, #20]
}
    5330:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5332:	2101      	movs	r1, #1
    5334:	f7fb bcd8 	b.w	ce8 <process_event>

00005338 <validate_args>:
{
    5338:	b510      	push	{r4, lr}
    533a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    533c:	b140      	cbz	r0, 5350 <validate_args+0x18>
    533e:	b139      	cbz	r1, 5350 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5340:	1d08      	adds	r0, r1, #4
    5342:	f7ff ff8c 	bl	525e <sys_notify_validate>
	if ((rv == 0)
    5346:	b928      	cbnz	r0, 5354 <validate_args+0x1c>
	    && ((cli->notify.flags
    5348:	68a3      	ldr	r3, [r4, #8]
    534a:	f033 0303 	bics.w	r3, r3, #3
    534e:	d001      	beq.n	5354 <validate_args+0x1c>
		rv = -EINVAL;
    5350:	f06f 0015 	mvn.w	r0, #21
}
    5354:	bd10      	pop	{r4, pc}

00005356 <onoff_manager_init>:
{
    5356:	b538      	push	{r3, r4, r5, lr}
    5358:	460c      	mov	r4, r1
	if ((mgr == NULL)
    535a:	4605      	mov	r5, r0
    535c:	b158      	cbz	r0, 5376 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    535e:	b151      	cbz	r1, 5376 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5360:	680b      	ldr	r3, [r1, #0]
    5362:	b143      	cbz	r3, 5376 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5364:	684b      	ldr	r3, [r1, #4]
    5366:	b133      	cbz	r3, 5376 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5368:	221c      	movs	r2, #28
    536a:	2100      	movs	r1, #0
    536c:	f000 f97d 	bl	566a <memset>
    5370:	612c      	str	r4, [r5, #16]
	return 0;
    5372:	2000      	movs	r0, #0
}
    5374:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5376:	f06f 0015 	mvn.w	r0, #21
    537a:	e7fb      	b.n	5374 <onoff_manager_init+0x1e>

0000537c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    537c:	b570      	push	{r4, r5, r6, lr}
    537e:	4604      	mov	r4, r0
    5380:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5382:	f7ff ffd9 	bl	5338 <validate_args>

	if (rv < 0) {
    5386:	1e05      	subs	r5, r0, #0
    5388:	db31      	blt.n	53ee <onoff_request+0x72>
    538a:	f04f 0320 	mov.w	r3, #32
    538e:	f3ef 8111 	mrs	r1, BASEPRI
    5392:	f383 8812 	msr	BASEPRI_MAX, r3
    5396:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    539a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    539c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    539e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    53a2:	42ab      	cmp	r3, r5
    53a4:	f000 0207 	and.w	r2, r0, #7
    53a8:	d02e      	beq.n	5408 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    53aa:	2a02      	cmp	r2, #2
    53ac:	d10e      	bne.n	53cc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    53ae:	3301      	adds	r3, #1
    53b0:	8363      	strh	r3, [r4, #26]
	rv = state;
    53b2:	4615      	mov	r5, r2
		notify = true;
    53b4:	2301      	movs	r3, #1
	__asm__ volatile(
    53b6:	f381 8811 	msr	BASEPRI, r1
    53ba:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    53be:	b1b3      	cbz	r3, 53ee <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    53c0:	2300      	movs	r3, #0
    53c2:	4631      	mov	r1, r6
    53c4:	4620      	mov	r0, r4
    53c6:	f7ff ff93 	bl	52f0 <notify_one>
    53ca:	e010      	b.n	53ee <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    53cc:	0783      	lsls	r3, r0, #30
    53ce:	d001      	beq.n	53d4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    53d0:	2a06      	cmp	r2, #6
    53d2:	d10e      	bne.n	53f2 <onoff_request+0x76>
	parent->next = child;
    53d4:	2300      	movs	r3, #0
    53d6:	6033      	str	r3, [r6, #0]
	return list->tail;
    53d8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    53da:	b993      	cbnz	r3, 5402 <onoff_request+0x86>
	list->head = node;
    53dc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    53e0:	4615      	mov	r5, r2
    53e2:	b962      	cbnz	r2, 53fe <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    53e4:	460a      	mov	r2, r1
    53e6:	4620      	mov	r0, r4
    53e8:	2102      	movs	r1, #2
    53ea:	f7fb fc7d 	bl	ce8 <process_event>
		}
	}

	return rv;
}
    53ee:	4628      	mov	r0, r5
    53f0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    53f2:	2a05      	cmp	r2, #5
    53f4:	bf0c      	ite	eq
    53f6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    53fa:	f06f 0504 	mvnne.w	r5, #4
    53fe:	2300      	movs	r3, #0
    5400:	e7d9      	b.n	53b6 <onoff_request+0x3a>
	parent->next = child;
    5402:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5404:	6066      	str	r6, [r4, #4]
}
    5406:	e7eb      	b.n	53e0 <onoff_request+0x64>
		rv = -EAGAIN;
    5408:	f06f 050a 	mvn.w	r5, #10
    540c:	e7f7      	b.n	53fe <onoff_request+0x82>

0000540e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    540e:	b510      	push	{r4, lr}
	__asm__ volatile(
    5410:	f04f 0320 	mov.w	r3, #32
    5414:	f3ef 8211 	mrs	r2, BASEPRI
    5418:	f383 8812 	msr	BASEPRI_MAX, r3
    541c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5420:	8b04      	ldrh	r4, [r0, #24]
    5422:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    5426:	2c02      	cmp	r4, #2
    5428:	d00a      	beq.n	5440 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    542a:	2c01      	cmp	r4, #1
    542c:	bf0c      	ite	eq
    542e:	f06f 0004 	mvneq.w	r0, #4
    5432:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    5436:	f382 8811 	msr	BASEPRI, r2
    543a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    543e:	e008      	b.n	5452 <onoff_release+0x44>
	mgr->refs -= 1U;
    5440:	8b43      	ldrh	r3, [r0, #26]
    5442:	3b01      	subs	r3, #1
    5444:	b29b      	uxth	r3, r3
    5446:	8343      	strh	r3, [r0, #26]
	if (stop) {
    5448:	b923      	cbnz	r3, 5454 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    544a:	4621      	mov	r1, r4
    544c:	f7fb fc4c 	bl	ce8 <process_event>
	int rv = state;
    5450:	4620      	mov	r0, r4
}
    5452:	bd10      	pop	{r4, pc}
	int rv = state;
    5454:	4620      	mov	r0, r4
    5456:	e7ee      	b.n	5436 <onoff_release+0x28>

00005458 <onoff_sync_lock>:
	__asm__ volatile(
    5458:	f04f 0220 	mov.w	r2, #32
    545c:	f3ef 8311 	mrs	r3, BASEPRI
    5460:	f382 8812 	msr	BASEPRI_MAX, r2
    5464:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    5468:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    546a:	600b      	str	r3, [r1, #0]
}
    546c:	4770      	bx	lr

0000546e <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    546e:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    5470:	6804      	ldr	r4, [r0, #0]
    5472:	2c00      	cmp	r4, #0
		srv->count = 0;
    5474:	bfbc      	itt	lt
    5476:	2400      	movlt	r4, #0
    5478:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    547a:	2b00      	cmp	r3, #0
{
    547c:	460d      	mov	r5, r1
    547e:	4611      	mov	r1, r2
    5480:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    5484:	da0c      	bge.n	54a0 <onoff_sync_finalize+0x32>
		srv->count = res;
    5486:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
    5488:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    548a:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    548c:	f385 8811 	msr	BASEPRI, r5
    5490:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    5494:	b111      	cbz	r1, 549c <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    5496:	2000      	movs	r0, #0
    5498:	f7ff ff2a 	bl	52f0 <notify_one>
	}

	return rv;
}
    549c:	4620      	mov	r0, r4
    549e:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    54a0:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    54a2:	b11a      	cbz	r2, 54ac <onoff_sync_finalize+0x3e>
		srv->count += 1;
    54a4:	3401      	adds	r4, #1
		srv->count -= 1;
    54a6:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    54a8:	2202      	movs	r2, #2
    54aa:	e7ee      	b.n	548a <onoff_sync_finalize+0x1c>
		srv->count -= 1;
    54ac:	3c01      	subs	r4, #1
    54ae:	e7fa      	b.n	54a6 <onoff_sync_finalize+0x38>

000054b0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    54b0:	4604      	mov	r4, r0
    54b2:	b508      	push	{r3, lr}
    54b4:	4608      	mov	r0, r1
    54b6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    54b8:	461a      	mov	r2, r3
    54ba:	47a0      	blx	r4
	return z_impl_z_current_get();
    54bc:	f7ff fcda 	bl	4e74 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    54c0:	f7fc fe66 	bl	2190 <z_impl_k_thread_abort>

000054c4 <_ldiv5>:
	uint32_t v_lo = *v;
    54c4:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    54c8:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    54ca:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    54ce:	fba2 2403 	umull	r2, r4, r2, r3
    54d2:	18d5      	adds	r5, r2, r3
    54d4:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    54d8:	fba1 1303 	umull	r1, r3, r1, r3
    54dc:	1852      	adds	r2, r2, r1
    54de:	eb44 0403 	adc.w	r4, r4, r3
    54e2:	1952      	adds	r2, r2, r5
    54e4:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    54e8:	1889      	adds	r1, r1, r2
    54ea:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    54ee:	e9c0 1300 	strd	r1, r3, [r0]
}
    54f2:	bd30      	pop	{r4, r5, pc}

000054f4 <_get_digit>:
	if (*digit_count > 0) {
    54f4:	680a      	ldr	r2, [r1, #0]
    54f6:	2a00      	cmp	r2, #0
{
    54f8:	b510      	push	{r4, lr}
    54fa:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    54fc:	dd0f      	ble.n	551e <_get_digit+0x2a>
		--*digit_count;
    54fe:	3a01      	subs	r2, #1
    5500:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    5502:	681a      	ldr	r2, [r3, #0]
    5504:	6844      	ldr	r4, [r0, #4]
    5506:	200a      	movs	r0, #10
    5508:	fba2 1200 	umull	r1, r2, r2, r0
    550c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    5510:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    5512:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    5516:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    551a:	3030      	adds	r0, #48	; 0x30
}
    551c:	bd10      	pop	{r4, pc}
		rval = '0';
    551e:	2030      	movs	r0, #48	; 0x30
    5520:	e7fc      	b.n	551c <_get_digit+0x28>

00005522 <encode_uint>:
{
    5522:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5526:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    5528:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    552a:	2b6f      	cmp	r3, #111	; 0x6f
{
    552c:	4680      	mov	r8, r0
    552e:	460f      	mov	r7, r1
    5530:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5532:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5536:	d029      	beq.n	558c <encode_uint+0x6a>
    5538:	d824      	bhi.n	5584 <encode_uint+0x62>
		return 16;
    553a:	2b58      	cmp	r3, #88	; 0x58
    553c:	bf14      	ite	ne
    553e:	260a      	movne	r6, #10
    5540:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    5542:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    5546:	4632      	mov	r2, r6
    5548:	2300      	movs	r3, #0
    554a:	4640      	mov	r0, r8
    554c:	4639      	mov	r1, r7
    554e:	f7fb f995 	bl	87c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5552:	2a09      	cmp	r2, #9
    5554:	b2d4      	uxtb	r4, r2
    5556:	d81e      	bhi.n	5596 <encode_uint+0x74>
    5558:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    555a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    555c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    555e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5562:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    5566:	d301      	bcc.n	556c <encode_uint+0x4a>
    5568:	45d1      	cmp	r9, sl
    556a:	d811      	bhi.n	5590 <encode_uint+0x6e>
	if (conv->flag_hash) {
    556c:	782b      	ldrb	r3, [r5, #0]
    556e:	069b      	lsls	r3, r3, #26
    5570:	d505      	bpl.n	557e <encode_uint+0x5c>
		if (radix == 8) {
    5572:	2e08      	cmp	r6, #8
    5574:	d115      	bne.n	55a2 <encode_uint+0x80>
			conv->altform_0 = true;
    5576:	78ab      	ldrb	r3, [r5, #2]
    5578:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    557c:	70ab      	strb	r3, [r5, #2]
}
    557e:	4648      	mov	r0, r9
    5580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5584:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    5588:	2b70      	cmp	r3, #112	; 0x70
    558a:	e7d7      	b.n	553c <encode_uint+0x1a>
	switch (specifier) {
    558c:	2608      	movs	r6, #8
    558e:	e7d8      	b.n	5542 <encode_uint+0x20>
		value /= radix;
    5590:	4680      	mov	r8, r0
    5592:	460f      	mov	r7, r1
    5594:	e7d7      	b.n	5546 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5596:	f1bb 0f19 	cmp.w	fp, #25
    559a:	bf94      	ite	ls
    559c:	3437      	addls	r4, #55	; 0x37
    559e:	3457      	addhi	r4, #87	; 0x57
    55a0:	e7db      	b.n	555a <encode_uint+0x38>
		} else if (radix == 16) {
    55a2:	2e10      	cmp	r6, #16
    55a4:	d1eb      	bne.n	557e <encode_uint+0x5c>
			conv->altform_0c = true;
    55a6:	78ab      	ldrb	r3, [r5, #2]
    55a8:	f043 0310 	orr.w	r3, r3, #16
    55ac:	e7e6      	b.n	557c <encode_uint+0x5a>

000055ae <outs>:
{
    55ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55b2:	4607      	mov	r7, r0
    55b4:	4688      	mov	r8, r1
    55b6:	4615      	mov	r5, r2
    55b8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    55ba:	4614      	mov	r4, r2
    55bc:	42b4      	cmp	r4, r6
    55be:	eba4 0005 	sub.w	r0, r4, r5
    55c2:	d302      	bcc.n	55ca <outs+0x1c>
    55c4:	b93e      	cbnz	r6, 55d6 <outs+0x28>
    55c6:	7823      	ldrb	r3, [r4, #0]
    55c8:	b12b      	cbz	r3, 55d6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    55ca:	f814 0b01 	ldrb.w	r0, [r4], #1
    55ce:	4641      	mov	r1, r8
    55d0:	47b8      	blx	r7
		if (rc < 0) {
    55d2:	2800      	cmp	r0, #0
    55d4:	daf2      	bge.n	55bc <outs+0xe>
}
    55d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000055da <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    55da:	4770      	bx	lr

000055dc <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    55dc:	2200      	movs	r2, #0
    55de:	e9c0 2200 	strd	r2, r2, [r0]
    55e2:	6082      	str	r2, [r0, #8]
}
    55e4:	4770      	bx	lr

000055e6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    55e6:	f000 be3b 	b.w	6260 <z_fatal_error>

000055ea <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    55ea:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    55ec:	6800      	ldr	r0, [r0, #0]
    55ee:	f000 be37 	b.w	6260 <z_fatal_error>

000055f2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    55f2:	2100      	movs	r1, #0
    55f4:	2001      	movs	r0, #1
    55f6:	f7ff bff6 	b.w	55e6 <z_arm_fatal_error>

000055fa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    55fa:	b508      	push	{r3, lr}
	handler();
    55fc:	f7fc fbb8 	bl	1d70 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5604:	f7fc bc98 	b.w	1f38 <z_arm_exc_exit>

00005608 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5608:	3901      	subs	r1, #1
    560a:	4603      	mov	r3, r0
    560c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5610:	b90a      	cbnz	r2, 5616 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5612:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5614:	4770      	bx	lr
		*d = *s;
    5616:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    561a:	e7f7      	b.n	560c <strcpy+0x4>

0000561c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    561c:	4603      	mov	r3, r0
	size_t n = 0;
    561e:	2000      	movs	r0, #0

	while (*s != '\0') {
    5620:	5c1a      	ldrb	r2, [r3, r0]
    5622:	b902      	cbnz	r2, 5626 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5624:	4770      	bx	lr
		n++;
    5626:	3001      	adds	r0, #1
    5628:	e7fa      	b.n	5620 <strlen+0x4>

0000562a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    562a:	4603      	mov	r3, r0
	size_t n = 0;
    562c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    562e:	5c1a      	ldrb	r2, [r3, r0]
    5630:	b10a      	cbz	r2, 5636 <strnlen+0xc>
    5632:	4288      	cmp	r0, r1
    5634:	d100      	bne.n	5638 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5636:	4770      	bx	lr
		n++;
    5638:	3001      	adds	r0, #1
    563a:	e7f8      	b.n	562e <strnlen+0x4>

0000563c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    563c:	1e43      	subs	r3, r0, #1
    563e:	3901      	subs	r1, #1
    5640:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5648:	4282      	cmp	r2, r0
    564a:	d101      	bne.n	5650 <strcmp+0x14>
    564c:	2a00      	cmp	r2, #0
    564e:	d1f7      	bne.n	5640 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5650:	1a10      	subs	r0, r2, r0
    5652:	4770      	bx	lr

00005654 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5654:	b510      	push	{r4, lr}
    5656:	1e43      	subs	r3, r0, #1
    5658:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    565a:	4291      	cmp	r1, r2
    565c:	d100      	bne.n	5660 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    565e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5660:	f811 4b01 	ldrb.w	r4, [r1], #1
    5664:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5668:	e7f7      	b.n	565a <memcpy+0x6>

0000566a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    566a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    566c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    566e:	4603      	mov	r3, r0
	while (n > 0) {
    5670:	4293      	cmp	r3, r2
    5672:	d100      	bne.n	5676 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5674:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5676:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    567a:	e7f9      	b.n	5670 <memset+0x6>

0000567c <_stdout_hook_default>:
}
    567c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5680:	4770      	bx	lr

00005682 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    5682:	b084      	sub	sp, #16
    5684:	ab04      	add	r3, sp, #16
    5686:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    568a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    568e:	2b06      	cmp	r3, #6
    5690:	d108      	bne.n	56a4 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5696:	2201      	movs	r2, #1
    5698:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    569c:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    56a0:	bf20      	wfe
    while (true)
    56a2:	e7fd      	b.n	56a0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    56a4:	b004      	add	sp, #16
    56a6:	4770      	bx	lr

000056a8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    56a8:	b084      	sub	sp, #16
    56aa:	ab04      	add	r3, sp, #16
    56ac:	e903 0007 	stmdb	r3, {r0, r1, r2}
    56b0:	2300      	movs	r3, #0
    56b2:	f383 8811 	msr	BASEPRI, r3
    56b6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    56ba:	b004      	add	sp, #16
    56bc:	4770      	bx	lr

000056be <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    56be:	6903      	ldr	r3, [r0, #16]
    56c0:	b2c9      	uxtb	r1, r1
    56c2:	220c      	movs	r2, #12
    56c4:	fb01 3302 	mla	r3, r1, r2, r3
    56c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    56ca:	f000 0007 	and.w	r0, r0, #7
    56ce:	4770      	bx	lr

000056d0 <set_on_state>:
	__asm__ volatile(
    56d0:	f04f 0320 	mov.w	r3, #32
    56d4:	f3ef 8211 	mrs	r2, BASEPRI
    56d8:	f383 8812 	msr	BASEPRI_MAX, r3
    56dc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    56e0:	6803      	ldr	r3, [r0, #0]
    56e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    56e6:	f043 0302 	orr.w	r3, r3, #2
    56ea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    56ec:	f382 8811 	msr	BASEPRI, r2
    56f0:	f3bf 8f6f 	isb	sy
}
    56f4:	4770      	bx	lr

000056f6 <stop>:
{
    56f6:	4603      	mov	r3, r0
    56f8:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    56fa:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    56fc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    56fe:	f04f 0420 	mov.w	r4, #32
    5702:	f3ef 8611 	mrs	r6, BASEPRI
    5706:	f384 8812 	msr	BASEPRI_MAX, r4
    570a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    570e:	250c      	movs	r5, #12
    5710:	fb05 0401 	mla	r4, r5, r1, r0
    5714:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5716:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    571a:	d001      	beq.n	5720 <stop+0x2a>
    571c:	42a2      	cmp	r2, r4
    571e:	d110      	bne.n	5742 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5720:	fb05 0001 	mla	r0, r5, r1, r0
    5724:	2201      	movs	r2, #1
    5726:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    5728:	2000      	movs	r0, #0
	__asm__ volatile(
    572a:	f386 8811 	msr	BASEPRI, r6
    572e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5732:	b928      	cbnz	r0, 5740 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    5734:	685b      	ldr	r3, [r3, #4]
    5736:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    573a:	684b      	ldr	r3, [r1, #4]
    573c:	4798      	blx	r3
	return 0;
    573e:	2000      	movs	r0, #0
}
    5740:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    5742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5746:	e7f0      	b.n	572a <stop+0x34>

00005748 <api_stop>:
	return stop(dev, subsys, CTX_API);
    5748:	2280      	movs	r2, #128	; 0x80
    574a:	f7ff bfd4 	b.w	56f6 <stop>

0000574e <async_start>:
{
    574e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5750:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5752:	6904      	ldr	r4, [r0, #16]
{
    5754:	4605      	mov	r5, r0
    5756:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5758:	f04f 0020 	mov.w	r0, #32
    575c:	f3ef 8c11 	mrs	ip, BASEPRI
    5760:	f380 8812 	msr	BASEPRI_MAX, r0
    5764:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5768:	260c      	movs	r6, #12
    576a:	fb06 4601 	mla	r6, r6, r1, r4
    576e:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5770:	f000 0e07 	and.w	lr, r0, #7
    5774:	f1be 0f01 	cmp.w	lr, #1
    5778:	d111      	bne.n	579e <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    577a:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    577c:	2600      	movs	r6, #0
	__asm__ volatile(
    577e:	f38c 8811 	msr	BASEPRI, ip
    5782:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5786:	b946      	cbnz	r6, 579a <async_start+0x4c>
	subdata->cb = cb;
    5788:	200c      	movs	r0, #12
    578a:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    578e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5792:	686b      	ldr	r3, [r5, #4]
    5794:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    5798:	4798      	blx	r3
}
    579a:	4630      	mov	r0, r6
    579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    579e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    57a2:	4287      	cmp	r7, r0
    57a4:	bf14      	ite	ne
    57a6:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    57aa:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    57ae:	e7e6      	b.n	577e <async_start+0x30>

000057b0 <api_start>:
{
    57b0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    57b2:	2480      	movs	r4, #128	; 0x80
    57b4:	9400      	str	r4, [sp, #0]
    57b6:	f7ff ffca 	bl	574e <async_start>
}
    57ba:	b002      	add	sp, #8
    57bc:	bd10      	pop	{r4, pc}

000057be <onoff_started_callback>:
	return &data->mgr[type];
    57be:	6900      	ldr	r0, [r0, #16]
{
    57c0:	b410      	push	{r4}
	return &data->mgr[type];
    57c2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    57c4:	241c      	movs	r4, #28
    57c6:	fb03 0004 	mla	r0, r3, r4, r0
    57ca:	2100      	movs	r1, #0
}
    57cc:	bc10      	pop	{r4}
	notify(mgr, 0);
    57ce:	4710      	bx	r2

000057d0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    57d0:	2000      	movs	r0, #0
    57d2:	f7fe b8c5 	b.w	3960 <nrfx_clock_stop>

000057d6 <blocking_start_callback>:
{
    57d6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    57d8:	f7fe bf08 	b.w	45ec <z_impl_k_sem_give>

000057dc <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    57dc:	f000 001f 	and.w	r0, r0, #31
    57e0:	0080      	lsls	r0, r0, #2
    57e2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    57e6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    57ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    57ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    57f2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    57f6:	4770      	bx	lr

000057f8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    57f8:	6843      	ldr	r3, [r0, #4]
    57fa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    57fc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5800:	600b      	str	r3, [r1, #0]
}
    5802:	2000      	movs	r0, #0
    5804:	4770      	bx	lr

00005806 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5806:	6843      	ldr	r3, [r0, #4]
    5808:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    580a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    580e:	4042      	eors	r2, r0
    5810:	400a      	ands	r2, r1
    5812:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5814:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5818:	2000      	movs	r0, #0
    581a:	4770      	bx	lr

0000581c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    581c:	6843      	ldr	r3, [r0, #4]
    581e:	685b      	ldr	r3, [r3, #4]
}
    5820:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5822:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5826:	4770      	bx	lr

00005828 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5828:	6843      	ldr	r3, [r0, #4]
    582a:	685b      	ldr	r3, [r3, #4]
}
    582c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    582e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5832:	4770      	bx	lr

00005834 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5834:	6843      	ldr	r3, [r0, #4]
    5836:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5838:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    583c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    583e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5842:	2000      	movs	r0, #0
    5844:	4770      	bx	lr

00005846 <gpio_nrfx_manage_callback>:
	return port->data;
    5846:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5848:	6858      	ldr	r0, [r3, #4]
{
    584a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    584c:	b158      	cbz	r0, 5866 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    584e:	2400      	movs	r4, #0
    5850:	4281      	cmp	r1, r0
    5852:	d112      	bne.n	587a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    5854:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    5856:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    5858:	b954      	cbnz	r4, 5870 <gpio_nrfx_manage_callback+0x2a>
    585a:	428d      	cmp	r5, r1
	list->head = node;
    585c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    585e:	d100      	bne.n	5862 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5860:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5862:	2000      	movs	r0, #0
    5864:	6008      	str	r0, [r1, #0]
	if (set) {
    5866:	b96a      	cbnz	r2, 5884 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    5868:	2000      	movs	r0, #0
}
    586a:	bd30      	pop	{r4, r5, pc}
    586c:	4628      	mov	r0, r5
    586e:	e7ef      	b.n	5850 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    5870:	428d      	cmp	r5, r1
	parent->next = child;
    5872:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5874:	bf08      	it	eq
    5876:	609c      	streq	r4, [r3, #8]
}
    5878:	e7f3      	b.n	5862 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    587a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    587c:	4604      	mov	r4, r0
    587e:	2d00      	cmp	r5, #0
    5880:	d1f4      	bne.n	586c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5882:	b13a      	cbz	r2, 5894 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    5884:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    5886:	685a      	ldr	r2, [r3, #4]
    5888:	600a      	str	r2, [r1, #0]
	list->head = node;
    588a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    588c:	2800      	cmp	r0, #0
    588e:	d1eb      	bne.n	5868 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5890:	6099      	str	r1, [r3, #8]
}
    5892:	e7ea      	b.n	586a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5894:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5898:	e7e7      	b.n	586a <gpio_nrfx_manage_callback+0x24>

0000589a <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
    589a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
    589e:	bf14      	ite	ne
    58a0:	f06f 0085 	mvnne.w	r0, #133	; 0x85
    58a4:	2000      	moveq	r0, #0
    58a6:	4770      	bx	lr

000058a8 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    58a8:	f7fe bec0 	b.w	462c <z_impl_k_sem_take>

000058ac <i2c_write>:
{
    58ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    58ae:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    58b2:	2202      	movs	r2, #2
    58b4:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    58b8:	6882      	ldr	r2, [r0, #8]
    58ba:	a901      	add	r1, sp, #4
    58bc:	6894      	ldr	r4, [r2, #8]
    58be:	2201      	movs	r2, #1
    58c0:	47a0      	blx	r4
}
    58c2:	b004      	add	sp, #16
    58c4:	bd10      	pop	{r4, pc}

000058c6 <i2c_reg_write_word_be>:
{
    58c6:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    58c8:	f88d 2004 	strb.w	r2, [sp, #4]
    58cc:	0a1a      	lsrs	r2, r3, #8
    58ce:	f88d 2005 	strb.w	r2, [sp, #5]
    58d2:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
    58d6:	2203      	movs	r2, #3
    58d8:	460b      	mov	r3, r1
    58da:	a901      	add	r1, sp, #4
    58dc:	f7ff ffe6 	bl	58ac <i2c_write>
}
    58e0:	b003      	add	sp, #12
    58e2:	f85d fb04 	ldr.w	pc, [sp], #4

000058e6 <port_write>:
{
    58e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    58ea:	4606      	mov	r6, r0
    58ec:	460c      	mov	r4, r1
    58ee:	4615      	mov	r5, r2
    58f0:	4699      	mov	r9, r3
	if (k_is_in_isr()) {
    58f2:	f000 fcd0 	bl	6296 <k_is_in_isr>
    58f6:	bb10      	cbnz	r0, 593e <port_write+0x58>
	const struct sx1509b_config *cfg = dev->config;
    58f8:	f8d6 8004 	ldr.w	r8, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    58fc:	6936      	ldr	r6, [r6, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
    58fe:	f106 0720 	add.w	r7, r6, #32
    5902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    590a:	4638      	mov	r0, r7
    590c:	f7ff ffcc 	bl	58a8 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
    5910:	8b32      	ldrh	r2, [r6, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    5912:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    5916:	6870      	ldr	r0, [r6, #4]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
    5918:	4055      	eors	r5, r2
    591a:	402c      	ands	r4, r5
    591c:	ea82 0209 	eor.w	r2, r2, r9
    5920:	4054      	eors	r4, r2
    5922:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    5924:	4623      	mov	r3, r4
    5926:	2210      	movs	r2, #16
    5928:	f7ff ffcd 	bl	58c6 <i2c_reg_write_word_be>
	if (rc == 0) {
    592c:	4605      	mov	r5, r0
    592e:	b900      	cbnz	r0, 5932 <port_write+0x4c>
		*outp = out;
    5930:	8334      	strh	r4, [r6, #24]
	z_impl_k_sem_give(sem);
    5932:	4638      	mov	r0, r7
    5934:	f7fe fe5a 	bl	45ec <z_impl_k_sem_give>
}
    5938:	4628      	mov	r0, r5
    593a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
    593e:	f06f 050a 	mvn.w	r5, #10
    5942:	e7f9      	b.n	5938 <port_write+0x52>

00005944 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
    5944:	2200      	movs	r2, #0
{
    5946:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
    5948:	4611      	mov	r1, r2
    594a:	f7ff bfcc 	b.w	58e6 <port_write>

0000594e <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
    594e:	2300      	movs	r3, #0
    5950:	461a      	mov	r2, r3
    5952:	f7ff bfc8 	b.w	58e6 <port_write>

00005956 <port_set_bits>:
{
    5956:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
    5958:	2300      	movs	r3, #0
    595a:	f7ff bfc4 	b.w	58e6 <port_write>

0000595e <port_set_masked>:
	return port_write(dev, mask, value, 0);
    595e:	2300      	movs	r3, #0
    5960:	f7ff bfc1 	b.w	58e6 <port_write>

00005964 <write_pin_state>:
{
    5964:	b530      	push	{r4, r5, lr}
    5966:	b087      	sub	sp, #28
    5968:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
    596a:	2100      	movs	r1, #0
    596c:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
    5970:	8811      	ldrh	r1, [r2, #0]
    5972:	ba49      	rev16	r1, r1
    5974:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
    5978:	8851      	ldrh	r1, [r2, #2]
    597a:	ba49      	rev16	r1, r1
    597c:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
    5980:	8891      	ldrh	r1, [r2, #4]
    5982:	ba49      	rev16	r1, r1
    5984:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
    5988:	88d1      	ldrh	r1, [r2, #6]
    598a:	ba49      	rev16	r1, r1
    598c:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
    5990:	8911      	ldrh	r1, [r2, #8]
    5992:	ba49      	rev16	r1, r1
    5994:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
    5998:	8951      	ldrh	r1, [r2, #10]
    599a:	ba49      	rev16	r1, r1
    599c:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
    59a0:	8991      	ldrh	r1, [r2, #12]
    59a2:	ba49      	rev16	r1, r1
    59a4:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    59a8:	89d1      	ldrh	r1, [r2, #14]
    59aa:	8a12      	ldrh	r2, [r2, #16]
{
    59ac:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    59ae:	ba49      	rev16	r1, r1
    59b0:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
    59b4:	ba51      	rev16	r1, r2
    59b6:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    59ba:	6860      	ldr	r0, [r4, #4]
    59bc:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
    59be:	b163      	cbz	r3, 59da <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    59c0:	4613      	mov	r3, r2
    59c2:	2210      	movs	r2, #16
    59c4:	f7ff ff7f 	bl	58c6 <i2c_reg_write_word_be>
		if (rc == 0) {
    59c8:	b928      	cbnz	r0, 59d6 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    59ca:	892b      	ldrh	r3, [r5, #8]
    59cc:	6860      	ldr	r0, [r4, #4]
    59ce:	2211      	movs	r2, #17
    59d0:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    59d2:	f7ff ff6b 	bl	58ac <i2c_write>
}
    59d6:	b007      	add	sp, #28
    59d8:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    59da:	460b      	mov	r3, r1
    59dc:	2213      	movs	r2, #19
    59de:	a901      	add	r1, sp, #4
    59e0:	e7f7      	b.n	59d2 <write_pin_state+0x6e>

000059e2 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
    59e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
    59e6:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    59e8:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
    59ea:	6870      	ldr	r0, [r6, #4]
    59ec:	f7fe fc42 	bl	4274 <z_impl_device_get_binding>
    59f0:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
    59f2:	2800      	cmp	r0, #0
    59f4:	d061      	beq.n	5aba <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    59f6:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    59f8:	f04f 087d 	mov.w	r8, #125	; 0x7d
    59fc:	2712      	movs	r7, #18

	return i2c_write(dev, tx_buf, 2, dev_addr);
    59fe:	2202      	movs	r2, #2
    5a00:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
    5a02:	f88d 8004 	strb.w	r8, [sp, #4]
    5a06:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5a0a:	f7ff ff4f 	bl	58ac <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
    5a0e:	4604      	mov	r4, r0
    5a10:	2800      	cmp	r0, #0
    5a12:	d14a      	bne.n	5aaa <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
    5a14:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    5a16:	6868      	ldr	r0, [r5, #4]
    5a18:	8933      	ldrh	r3, [r6, #8]
    5a1a:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5a1e:	a901      	add	r1, sp, #4
    5a20:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    5a22:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5a26:	f7ff ff41 	bl	58ac <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
    5a2a:	4604      	mov	r4, r0
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d13c      	bne.n	5aaa <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
    5a30:	2100      	movs	r1, #0
    5a32:	2063      	movs	r0, #99	; 0x63
    5a34:	f7ff fa04 	bl	4e40 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
    5a38:	463a      	mov	r2, r7
    5a3a:	4621      	mov	r1, r4
    5a3c:	f105 0008 	add.w	r0, r5, #8
    5a40:	f7ff fe13 	bl	566a <memset>
    5a44:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
    5a48:	221e      	movs	r2, #30
    5a4a:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    5a4c:	83ac      	strh	r4, [r5, #28]
    5a4e:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    5a50:	6868      	ldr	r0, [r5, #4]
    5a52:	8933      	ldrh	r3, [r6, #8]
    5a54:	f88d 2004 	strb.w	r2, [sp, #4]
    5a58:	2240      	movs	r2, #64	; 0x40
    5a5a:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5a5e:	a901      	add	r1, sp, #4
    5a60:	2202      	movs	r2, #2
    5a62:	f7ff ff23 	bl	58ac <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    5a66:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
    5a68:	4604      	mov	r4, r0
    5a6a:	b9f0      	cbnz	r0, 5aaa <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5a6c:	8b2b      	ldrh	r3, [r5, #24]
    5a6e:	8931      	ldrh	r1, [r6, #8]
    5a70:	6868      	ldr	r0, [r5, #4]
    5a72:	2210      	movs	r2, #16
    5a74:	f7ff ff27 	bl	58c6 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
    5a78:	4604      	mov	r4, r0
    5a7a:	b9b0      	cbnz	r0, 5aaa <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5a7c:	8aeb      	ldrh	r3, [r5, #22]
    5a7e:	8931      	ldrh	r1, [r6, #8]
    5a80:	6868      	ldr	r0, [r5, #4]
    5a82:	220e      	movs	r2, #14
    5a84:	f7ff ff1f 	bl	58c6 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
    5a88:	4604      	mov	r4, r0
    5a8a:	b970      	cbnz	r0, 5aaa <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
    5a8c:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
    5a8e:	6868      	ldr	r0, [r5, #4]
    5a90:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
    5a92:	f88d 2004 	strb.w	r2, [sp, #4]
    5a96:	2298      	movs	r2, #152	; 0x98
    5a98:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5a9c:	a901      	add	r1, sp, #4
    5a9e:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
    5aa0:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5aa4:	f7ff ff02 	bl	58ac <i2c_write>
    5aa8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    5aaa:	f105 0020 	add.w	r0, r5, #32
    5aae:	f7fe fd9d 	bl	45ec <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
    5ab2:	4620      	mov	r0, r4
    5ab4:	b002      	add	sp, #8
    5ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
    5aba:	f06f 0415 	mvn.w	r4, #21
    5abe:	e7f4      	b.n	5aaa <sx1509b_init+0xc8>

00005ac0 <sx1509b_config>:
{
    5ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
    5ac4:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    5ac8:	6904      	ldr	r4, [r0, #16]
{
    5aca:	460d      	mov	r5, r1
    5acc:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
    5ace:	f000 fbe2 	bl	6296 <k_is_in_isr>
    5ad2:	4683      	mov	fp, r0
    5ad4:	2800      	cmp	r0, #0
    5ad6:	f040 808c 	bne.w	5bf2 <sx1509b_config+0x132>
	if ((flags & (GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH)) != 0) {
    5ada:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
    5ade:	f040 808b 	bne.w	5bf8 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
    5ae2:	f104 0920 	add.w	r9, r4, #32
    5ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5aee:	4648      	mov	r0, r9
    5af0:	f7ff feda 	bl	58a8 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
    5af4:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
    5af6:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
    5af8:	40ae      	lsls	r6, r5
    5afa:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    5afc:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
    5b00:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    5b04:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
    5b06:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
    5b0a:	d44f      	bmi.n	5bac <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
    5b0c:	8a63      	ldrh	r3, [r4, #18]
    5b0e:	ea03 0208 	and.w	r2, r3, r8
    5b12:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    5b14:	07ba      	lsls	r2, r7, #30
    5b16:	d45c      	bmi.n	5bd2 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
    5b18:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
    5b1a:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
    5b1c:	bf4c      	ite	mi
    5b1e:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
    5b20:	ea08 0303 	andpl.w	r3, r8, r3
    5b24:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
    5b26:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
    5b28:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
    5b2a:	bf4c      	ite	mi
    5b2c:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
    5b2e:	ea08 0303 	andpl.w	r3, r8, r3
    5b32:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
    5b34:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
    5b36:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
    5b38:	bf4c      	ite	mi
    5b3a:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
    5b3e:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
    5b40:	05bd      	lsls	r5, r7, #22
    5b42:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
    5b44:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
    5b46:	d54e      	bpl.n	5be6 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
    5b48:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5b4c:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
    5b4e:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5b50:	d544      	bpl.n	5bdc <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
    5b52:	8b23      	ldrh	r3, [r4, #24]
    5b54:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
    5b58:	8323      	strh	r3, [r4, #24]
			data_first = true;
    5b5a:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
    5b5e:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
    5b62:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
    5b64:	bf4c      	ite	mi
    5b66:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
    5b68:	ea08 0603 	andpl.w	r6, r8, r3
    5b6c:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
    5b70:	465b      	mov	r3, fp
    5b72:	f104 0208 	add.w	r2, r4, #8
    5b76:	4621      	mov	r1, r4
    5b78:	4650      	mov	r0, sl
    5b7a:	f7ff fef3 	bl	5964 <write_pin_state>
	if (rc == 0) {
    5b7e:	4605      	mov	r5, r0
    5b80:	bb00      	cbnz	r0, 5bc4 <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
    5b82:	2322      	movs	r3, #34	; 0x22
    5b84:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
    5b88:	7f23      	ldrb	r3, [r4, #28]
    5b8a:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
    5b8e:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
    5b92:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
    5b94:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
    5b96:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
    5b98:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
    5b9c:	eb0d 0102 	add.w	r1, sp, r2
    5ba0:	f8ba 3008 	ldrh.w	r3, [sl, #8]
    5ba4:	f7ff fe82 	bl	58ac <i2c_write>
    5ba8:	4605      	mov	r5, r0
    5baa:	e00b      	b.n	5bc4 <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
    5bac:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5bb0:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    5bb4:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
    5bb6:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5bb8:	2220      	movs	r2, #32
    5bba:	f7ff fe84 	bl	58c6 <i2c_reg_write_word_be>
		if (rc) {
    5bbe:	4605      	mov	r5, r0
    5bc0:	2800      	cmp	r0, #0
    5bc2:	d0a3      	beq.n	5b0c <sx1509b_config+0x4c>
    5bc4:	4648      	mov	r0, r9
    5bc6:	f7fe fd11 	bl	45ec <z_impl_k_sem_give>
}
    5bca:	4628      	mov	r0, r5
    5bcc:	b003      	add	sp, #12
    5bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
    5bd2:	077d      	lsls	r5, r7, #29
    5bd4:	d50a      	bpl.n	5bec <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
    5bd6:	4333      	orrs	r3, r6
    5bd8:	8263      	strh	r3, [r4, #18]
    5bda:	e79d      	b.n	5b18 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5bdc:	0539      	lsls	r1, r7, #20
    5bde:	d5be      	bpl.n	5b5e <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
    5be0:	8b23      	ldrh	r3, [r4, #24]
    5be2:	4333      	orrs	r3, r6
    5be4:	e7b8      	b.n	5b58 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
    5be6:	4333      	orrs	r3, r6
    5be8:	82e3      	strh	r3, [r4, #22]
    5bea:	e7b8      	b.n	5b5e <sx1509b_config+0x9e>
			rc = -ENOTSUP;
    5bec:	f06f 0585 	mvn.w	r5, #133	; 0x85
    5bf0:	e7e8      	b.n	5bc4 <sx1509b_config+0x104>
		return -EWOULDBLOCK;
    5bf2:	f06f 050a 	mvn.w	r5, #10
    5bf6:	e7e8      	b.n	5bca <sx1509b_config+0x10a>
		return -ENOTSUP;
    5bf8:	f06f 0585 	mvn.w	r5, #133	; 0x85
    5bfc:	e7e5      	b.n	5bca <sx1509b_config+0x10a>

00005bfe <port_get>:
{
    5bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c02:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
    5c04:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    5c08:	6907      	ldr	r7, [r0, #16]
{
    5c0a:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
    5c0c:	f000 fb43 	bl	6296 <k_is_in_isr>
    5c10:	4604      	mov	r4, r0
    5c12:	bb78      	cbnz	r0, 5c74 <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
    5c14:	f107 0620 	add.w	r6, r7, #32
    5c18:	4630      	mov	r0, r6
    5c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c22:	f7ff fe41 	bl	58a8 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
    5c26:	f10d 0205 	add.w	r2, sp, #5
    5c2a:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    5c2c:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    5c2e:	6878      	ldr	r0, [r7, #4]
    5c30:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
    5c32:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
    5c34:	f10d 0206 	add.w	r2, sp, #6
    5c38:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5c3c:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    5c3e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
    5c42:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    5c44:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    5c46:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
    5c4a:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5c4c:	f88d 101c 	strb.w	r1, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    5c50:	6881      	ldr	r1, [r0, #8]
    5c52:	688c      	ldr	r4, [r1, #8]
    5c54:	a902      	add	r1, sp, #8
    5c56:	47a0      	blx	r4
	if (rc != 0) {
    5c58:	4604      	mov	r4, r0
    5c5a:	b920      	cbnz	r0, 5c66 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
    5c5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5c60:	ba5b      	rev16	r3, r3
    5c62:	b29b      	uxth	r3, r3
    5c64:	602b      	str	r3, [r5, #0]
    5c66:	4630      	mov	r0, r6
    5c68:	f7fe fcc0 	bl	45ec <z_impl_k_sem_give>
}
    5c6c:	4620      	mov	r0, r4
    5c6e:	b008      	add	sp, #32
    5c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
    5c74:	f06f 040a 	mvn.w	r4, #10
    5c78:	e7f8      	b.n	5c6c <port_get+0x6e>

00005c7a <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    5c7a:	07ca      	lsls	r2, r1, #31
	return dev->config;
    5c7c:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    5c7e:	d405      	bmi.n	5c8c <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    5c80:	f3c1 0242 	ubfx	r2, r1, #1, #3
    5c84:	2a01      	cmp	r2, #1
    5c86:	d004      	beq.n	5c92 <i2c_nrfx_twim_configure+0x18>
    5c88:	2a02      	cmp	r2, #2
    5c8a:	d00b      	beq.n	5ca4 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
    5c8c:	f06f 0015 	mvn.w	r0, #21
}
    5c90:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    5c92:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    5c94:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    5c98:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    5c9c:	6903      	ldr	r3, [r0, #16]
	return 0;
    5c9e:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    5ca0:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    5ca2:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    5caa:	e7f5      	b.n	5c98 <i2c_nrfx_twim_configure+0x1e>

00005cac <z_impl_i2c_transfer>:
{
    5cac:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
    5cae:	6884      	ldr	r4, [r0, #8]
    5cb0:	68a4      	ldr	r4, [r4, #8]
    5cb2:	46a4      	mov	ip, r4
}
    5cb4:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
    5cb6:	4760      	bx	ip

00005cb8 <hts221_sample_fetch>:
{
    5cb8:	b530      	push	{r4, r5, lr}
    5cba:	4603      	mov	r3, r0
    5cbc:	b089      	sub	sp, #36	; 0x24
	struct hts221_data *data = dev->data;
    5cbe:	6905      	ldr	r5, [r0, #16]
	if (i2c_burst_read(data->i2c, cfg->i2c_addr,
    5cc0:	685b      	ldr	r3, [r3, #4]
    5cc2:	6828      	ldr	r0, [r5, #0]
    5cc4:	889b      	ldrh	r3, [r3, #4]
    5cc6:	22a8      	movs	r2, #168	; 0xa8
    5cc8:	f88d 2003 	strb.w	r2, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    5ccc:	f10d 0203 	add.w	r2, sp, #3
    5cd0:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    5cd2:	2201      	movs	r2, #1
    5cd4:	9203      	str	r2, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    5cd6:	aa01      	add	r2, sp, #4
    5cd8:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    5cda:	2204      	movs	r2, #4
	msg[0].flags = I2C_MSG_WRITE;
    5cdc:	2400      	movs	r4, #0
	msg[1].len = num_read;
    5cde:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5ce0:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    5ce2:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5ce6:	f88d 201c 	strb.w	r2, [sp, #28]
    5cea:	2202      	movs	r2, #2
    5cec:	a902      	add	r1, sp, #8
    5cee:	f7ff ffdd 	bl	5cac <z_impl_i2c_transfer>
    5cf2:	42a0      	cmp	r0, r4
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
    5cf4:	bfa1      	itttt	ge
    5cf6:	f8bd 3004 	ldrhge.w	r3, [sp, #4]
    5cfa:	80ab      	strhge	r3, [r5, #4]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
    5cfc:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
    5d00:	80eb      	strhge	r3, [r5, #6]
	return 0;
    5d02:	bfac      	ite	ge
    5d04:	4620      	movge	r0, r4
		return -EIO;
    5d06:	f06f 0004 	mvnlt.w	r0, #4
}
    5d0a:	b009      	add	sp, #36	; 0x24
    5d0c:	bd30      	pop	{r4, r5, pc}

00005d0e <setup_drdy>:
{
    5d0e:	b430      	push	{r4, r5}
	const struct hts221_config *cfg = dev->config;
    5d10:	6843      	ldr	r3, [r0, #4]
	struct hts221_data *data = dev->data;
    5d12:	6904      	ldr	r4, [r0, #16]
		: GPIO_INT_DISABLE;
    5d14:	2900      	cmp	r1, #0
	gpio_pin_interrupt_configure(data->drdy_dev, cfg->drdy_pin, flags);
    5d16:	69e0      	ldr	r0, [r4, #28]
    5d18:	7999      	ldrb	r1, [r3, #6]
		: GPIO_INT_DISABLE;
    5d1a:	bf14      	ite	ne
    5d1c:	f44f 22b8 	movne.w	r2, #376832	; 0x5c000
    5d20:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5d24:	0413      	lsls	r3, r2, #16
	const struct gpio_driver_api *api =
    5d26:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5d28:	d507      	bpl.n	5d3a <setup_drdy+0x2c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5d2a:	6905      	ldr	r5, [r0, #16]
    5d2c:	2301      	movs	r3, #1
    5d2e:	682d      	ldr	r5, [r5, #0]
    5d30:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5d32:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    5d34:	bf18      	it	ne
    5d36:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5d3a:	69a4      	ldr	r4, [r4, #24]
    5d3c:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    5d40:	46a4      	mov	ip, r4
    5d42:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
    5d46:	bc30      	pop	{r4, r5}
    5d48:	4760      	bx	ip

00005d4a <hts221_work_cb>:
{
    5d4a:	b538      	push	{r3, r4, r5, lr}
	process_drdy(data->dev);
    5d4c:	f850 4c1c 	ldr.w	r4, [r0, #-28]
	struct hts221_data *data = dev->data;
    5d50:	6925      	ldr	r5, [r4, #16]
	if (data->data_ready_handler != NULL) {
    5d52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    5d54:	b15b      	cbz	r3, 5d6e <hts221_work_cb+0x24>
		data->data_ready_handler(dev, &data->data_ready_trigger);
    5d56:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    5d5a:	4620      	mov	r0, r4
    5d5c:	4798      	blx	r3
	if (data->data_ready_handler != NULL) {
    5d5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    5d60:	b12b      	cbz	r3, 5d6e <hts221_work_cb+0x24>
		setup_drdy(dev, true);
    5d62:	4620      	mov	r0, r4
    5d64:	2101      	movs	r1, #1
}
    5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		setup_drdy(dev, true);
    5d6a:	f7ff bfd0 	b.w	5d0e <setup_drdy>
}
    5d6e:	bd38      	pop	{r3, r4, r5, pc}

00005d70 <hts221_drdy_callback>:
{
    5d70:	b510      	push	{r4, lr}
	handle_drdy(data->dev);
    5d72:	f851 0c08 	ldr.w	r0, [r1, #-8]
	struct hts221_data *data = dev->data;
    5d76:	6904      	ldr	r4, [r0, #16]
	setup_drdy(dev, false);
    5d78:	2100      	movs	r1, #0
    5d7a:	f7ff ffc8 	bl	5d0e <setup_drdy>
	k_work_submit(&data->work);
    5d7e:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
    5d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->work);
    5d86:	f7fe bd5f 	b.w	4848 <k_work_submit>

00005d8a <hts221_trigger_set>:
{
    5d8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct hts221_data *data = dev->data;
    5d8e:	6906      	ldr	r6, [r0, #16]
	const struct hts221_config *cfg = dev->config;
    5d90:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    5d94:	4615      	mov	r5, r2
    5d96:	460f      	mov	r7, r1
	setup_drdy(dev, false);
    5d98:	2100      	movs	r1, #0
{
    5d9a:	4604      	mov	r4, r0
	setup_drdy(dev, false);
    5d9c:	f7ff ffb7 	bl	5d0e <setup_drdy>
	data->data_ready_handler = handler;
    5da0:	6335      	str	r5, [r6, #48]	; 0x30
	if (handler == NULL) {
    5da2:	b315      	cbz	r5, 5dea <hts221_trigger_set+0x60>
	data->data_ready_trigger = *trig;
    5da4:	6838      	ldr	r0, [r7, #0]
    5da6:	62f0      	str	r0, [r6, #44]	; 0x2c
	setup_drdy(dev, true);
    5da8:	2101      	movs	r1, #1
    5daa:	4620      	mov	r0, r4
    5dac:	f7ff ffaf 	bl	5d0e <setup_drdy>
	if (gpio_pin_get(data->drdy_dev, cfg->drdy_pin) > 0) {
    5db0:	69f0      	ldr	r0, [r6, #28]
    5db2:	f898 5006 	ldrb.w	r5, [r8, #6]
	const struct gpio_driver_data *const data =
    5db6:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
    5db8:	6883      	ldr	r3, [r0, #8]
    5dba:	a901      	add	r1, sp, #4
    5dbc:	685b      	ldr	r3, [r3, #4]
    5dbe:	4798      	blx	r3
	if (ret == 0) {
    5dc0:	b940      	cbnz	r0, 5dd4 <hts221_trigger_set+0x4a>
		*value ^= data->invert;
    5dc2:	6833      	ldr	r3, [r6, #0]
    5dc4:	9a01      	ldr	r2, [sp, #4]
    5dc6:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    5dc8:	2301      	movs	r3, #1
    5dca:	40ab      	lsls	r3, r5
    5dcc:	421a      	tst	r2, r3
    5dce:	bf14      	ite	ne
    5dd0:	2001      	movne	r0, #1
    5dd2:	2000      	moveq	r0, #0
    5dd4:	2800      	cmp	r0, #0
    5dd6:	dd08      	ble.n	5dea <hts221_trigger_set+0x60>
	struct hts221_data *data = dev->data;
    5dd8:	6925      	ldr	r5, [r4, #16]
	setup_drdy(dev, false);
    5dda:	4620      	mov	r0, r4
    5ddc:	2100      	movs	r1, #0
    5dde:	f7ff ff96 	bl	5d0e <setup_drdy>
	k_work_submit(&data->work);
    5de2:	f105 0034 	add.w	r0, r5, #52	; 0x34
    5de6:	f7fe fd2f 	bl	4848 <k_work_submit>
}
    5dea:	2000      	movs	r0, #0
    5dec:	b002      	add	sp, #8
    5dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005df2 <gpio_pin_set_dt>:
{
    5df2:	4603      	mov	r3, r0
    5df4:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    5df6:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5df8:	7919      	ldrb	r1, [r3, #4]
    5dfa:	2301      	movs	r3, #1
    5dfc:	fa03 f101 	lsl.w	r1, r3, r1
    5e00:	6903      	ldr	r3, [r0, #16]
    5e02:	681b      	ldr	r3, [r3, #0]
    5e04:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    5e06:	bf18      	it	ne
    5e08:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    5e0c:	b112      	cbz	r2, 5e14 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    5e0e:	6883      	ldr	r3, [r0, #8]
    5e10:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5e12:	4718      	bx	r3
    5e14:	6883      	ldr	r3, [r0, #8]
    5e16:	691b      	ldr	r3, [r3, #16]
    5e18:	e7fb      	b.n	5e12 <gpio_pin_set_dt+0x20>

00005e1a <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
    5e1a:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
    5e1c:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    5e1e:	6845      	ldr	r5, [r0, #4]
{
    5e20:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    5e22:	a903      	add	r1, sp, #12
    5e24:	4620      	mov	r0, r4
    5e26:	f7ff fb17 	bl	5458 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5e2a:	7d29      	ldrb	r1, [r5, #20]
    5e2c:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
    5e30:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5e32:	d114      	bne.n	5e5e <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
    5e34:	2801      	cmp	r0, #1
    5e36:	d10c      	bne.n	5e52 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    5e38:	f105 000c 	add.w	r0, r5, #12
    5e3c:	f7ff ffd9 	bl	5df2 <gpio_pin_set_dt>
    5e40:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    5e42:	2200      	movs	r2, #0
    5e44:	9903      	ldr	r1, [sp, #12]
    5e46:	9200      	str	r2, [sp, #0]
    5e48:	4620      	mov	r0, r4
    5e4a:	f7ff fb10 	bl	546e <onoff_sync_finalize>
}
    5e4e:	b005      	add	sp, #20
    5e50:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    5e52:	2800      	cmp	r0, #0
    5e54:	bf14      	ite	ne
    5e56:	4603      	movne	r3, r0
    5e58:	f06f 0315 	mvneq.w	r3, #21
    5e5c:	e7f1      	b.n	5e42 <disable_sync+0x28>
		rc = 0;
    5e5e:	2300      	movs	r3, #0
    5e60:	e7ef      	b.n	5e42 <disable_sync+0x28>

00005e62 <enable_sync>:
{
    5e62:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    5e64:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    5e66:	6846      	ldr	r6, [r0, #4]
{
    5e68:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    5e6a:	4628      	mov	r0, r5
    5e6c:	a903      	add	r1, sp, #12
    5e6e:	f7ff faf3 	bl	5458 <onoff_sync_lock>
	if ((rc == 0)
    5e72:	4603      	mov	r3, r0
    5e74:	b940      	cbnz	r0, 5e88 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    5e76:	7d32      	ldrb	r2, [r6, #20]
    5e78:	07d2      	lsls	r2, r2, #31
    5e7a:	d405      	bmi.n	5e88 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    5e7c:	2101      	movs	r1, #1
    5e7e:	f106 000c 	add.w	r0, r6, #12
    5e82:	f7ff ffb6 	bl	5df2 <gpio_pin_set_dt>
    5e86:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    5e88:	2201      	movs	r2, #1
    5e8a:	9200      	str	r2, [sp, #0]
    5e8c:	9903      	ldr	r1, [sp, #12]
    5e8e:	4622      	mov	r2, r4
    5e90:	4628      	mov	r0, r5
    5e92:	f7ff faec 	bl	546e <onoff_sync_finalize>
}
    5e96:	b004      	add	sp, #16
    5e98:	bd70      	pop	{r4, r5, r6, pc}

00005e9a <disable_onoff>:
	return onoff_release(&data->mgr);
    5e9a:	6900      	ldr	r0, [r0, #16]
    5e9c:	3004      	adds	r0, #4
    5e9e:	f7ff bab6 	b.w	540e <onoff_release>

00005ea2 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
    5ea2:	6900      	ldr	r0, [r0, #16]
    5ea4:	3004      	adds	r0, #4
    5ea6:	f7ff ba69 	b.w	537c <onoff_request>

00005eaa <common_init.isra.0>:
static int common_init(const struct device *dev)
    5eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eac:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
    5eae:	68c0      	ldr	r0, [r0, #12]
    5eb0:	f000 f9c0 	bl	6234 <z_device_ready>
    5eb4:	b340      	cbz	r0, 5f08 <common_init.isra.0+0x5e>
	if (on) {
    5eb6:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    5eb8:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
    5eba:	68e8      	ldr	r0, [r5, #12]
    5ebc:	7c29      	ldrb	r1, [r5, #16]
    5ebe:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    5ec2:	bf16      	itet	ne
    5ec4:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
    5ec8:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
    5ecc:	686c      	ldrne	r4, [r5, #4]
    5ece:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
    5ed0:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    5ed2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5ed6:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5ed8:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5eda:	bf48      	it	mi
    5edc:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5ee0:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5ee6:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5ee8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5eea:	bf4c      	ite	mi
    5eec:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5eee:	43b5      	bicpl	r5, r6
    5ef0:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    5ef2:	f8dc 3000 	ldr.w	r3, [ip]
    5ef6:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    5ef8:	4605      	mov	r5, r0
    5efa:	b918      	cbnz	r0, 5f04 <common_init.isra.0+0x5a>
    5efc:	b114      	cbz	r4, 5f04 <common_init.isra.0+0x5a>
	z_impl_k_busy_wait(usec_to_wait);
    5efe:	4620      	mov	r0, r4
    5f00:	f000 fb38 	bl	6574 <z_impl_k_busy_wait>
}
    5f04:	4628      	mov	r0, r5
    5f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    5f08:	f06f 0512 	mvn.w	r5, #18
    5f0c:	e7fa      	b.n	5f04 <common_init.isra.0+0x5a>

00005f0e <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    5f0e:	6840      	ldr	r0, [r0, #4]
    5f10:	f7ff bfcb 	b.w	5eaa <common_init.isra.0>

00005f14 <onoff_worker>:
{
    5f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
    5f18:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
    5f1c:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
    5f20:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
    5f22:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
    5f24:	2901      	cmp	r1, #1
{
    5f26:	4604      	mov	r4, r0
	struct driver_data_onoff *data
    5f28:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
    5f2c:	d10f      	bne.n	5f4e <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    5f2e:	f105 000c 	add.w	r0, r5, #12
    5f32:	f7ff ff5e 	bl	5df2 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
    5f36:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
    5f38:	4603      	mov	r3, r0
	data->notify = NULL;
    5f3a:	2100      	movs	r1, #0
    5f3c:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
    5f3e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
    5f42:	4630      	mov	r0, r6
    5f44:	4639      	mov	r1, r7
}
    5f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    5f4a:	f7fd b871 	b.w	3030 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
    5f4e:	2902      	cmp	r1, #2
    5f50:	d107      	bne.n	5f62 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    5f52:	2100      	movs	r1, #0
    5f54:	f105 000c 	add.w	r0, r5, #12
    5f58:	f7ff ff4b 	bl	5df2 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
    5f5c:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
    5f5e:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
    5f60:	e7eb      	b.n	5f3a <onoff_worker+0x26>
	int rc = 0;
    5f62:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
    5f64:	461a      	mov	r2, r3
    5f66:	e7e8      	b.n	5f3a <onoff_worker+0x26>

00005f68 <stop>:
{
    5f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    5f6c:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    5f70:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    5f72:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
    5f74:	6858      	ldr	r0, [r3, #4]
{
    5f76:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5f78:	7d01      	ldrb	r1, [r0, #20]
    5f7a:	f011 0101 	ands.w	r1, r1, #1
    5f7e:	d113      	bne.n	5fa8 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
    5f80:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
    5f82:	300c      	adds	r0, #12
    5f84:	f7ff ff35 	bl	5df2 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    5f88:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
    5f8c:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    5f8e:	d10d      	bne.n	5fac <stop+0x44>
		data->task = WORK_TASK_DISABLE;
    5f90:	2302      	movs	r3, #2
    5f92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    5f96:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5f98:	f104 001c 	add.w	r0, r4, #28
    5f9c:	2200      	movs	r2, #0
}
    5f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5fa2:	2300      	movs	r3, #0
    5fa4:	f7fe bcb8 	b.w	4918 <k_work_schedule>
	int rc = 0;
    5fa8:	2300      	movs	r3, #0
		delay_us = 0;
    5faa:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
    5fac:	463a      	mov	r2, r7
    5fae:	4629      	mov	r1, r5
    5fb0:	4630      	mov	r0, r6
}
    5fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    5fb6:	f7fd b83b 	b.w	3030 <finalize_transition>

00005fba <start>:
{
    5fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    5fbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    5fc2:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    5fc4:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
    5fc6:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5fc8:	7d03      	ldrb	r3, [r0, #20]
    5fca:	07db      	lsls	r3, r3, #31
{
    5fcc:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5fce:	d414      	bmi.n	5ffa <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
    5fd0:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
    5fd2:	2101      	movs	r1, #1
    5fd4:	300c      	adds	r0, #12
    5fd6:	f7ff ff0c 	bl	5df2 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    5fda:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
    5fde:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    5fe0:	d10d      	bne.n	5ffe <start+0x44>
		data->task = WORK_TASK_ENABLE;
    5fe2:	2301      	movs	r3, #1
    5fe4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    5fe8:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5fea:	f104 001c 	add.w	r0, r4, #28
    5fee:	2200      	movs	r2, #0
}
    5ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5ff4:	2300      	movs	r3, #0
    5ff6:	f7fe bc8f 	b.w	4918 <k_work_schedule>
	int rc = 0;
    5ffa:	2300      	movs	r3, #0
		delay_us = 0;
    5ffc:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
    5ffe:	4632      	mov	r2, r6
    6000:	4629      	mov	r1, r5
    6002:	4638      	mov	r0, r7
}
    6004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    6008:	f7fd b812 	b.w	3030 <finalize_transition>

0000600c <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    600c:	6902      	ldr	r2, [r0, #16]
{
    600e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6010:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6014:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6018:	2000      	movs	r0, #0
    601a:	4770      	bx	lr

0000601c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    601c:	6843      	ldr	r3, [r0, #4]
    601e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6020:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6024:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6028:	4770      	bx	lr

0000602a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    602a:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    602c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    602e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6030:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6034:	b148      	cbz	r0, 604a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    6036:	7c52      	ldrb	r2, [r2, #17]
    6038:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    603a:	2000      	movs	r0, #0
    603c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6040:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6044:	2201      	movs	r2, #1
    6046:	601a      	str	r2, [r3, #0]
	return 0;
    6048:	4770      	bx	lr
		return -1;
    604a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    604e:	4770      	bx	lr

00006050 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6050:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6052:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6054:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6058:	b940      	cbnz	r0, 606c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    605a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    605c:	071b      	lsls	r3, r3, #28
    605e:	d406      	bmi.n	606e <is_tx_ready.isra.0+0x1e>
    6060:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6064:	3800      	subs	r0, #0
    6066:	bf18      	it	ne
    6068:	2001      	movne	r0, #1
    606a:	4770      	bx	lr
    606c:	2001      	movs	r0, #1
}
    606e:	4770      	bx	lr

00006070 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6070:	6843      	ldr	r3, [r0, #4]
    6072:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6074:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6078:	05d1      	lsls	r1, r2, #23
    607a:	d518      	bpl.n	60ae <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    607c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6080:	b1aa      	cbz	r2, 60ae <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6082:	f04f 0120 	mov.w	r1, #32
    6086:	f3ef 8211 	mrs	r2, BASEPRI
    608a:	f381 8812 	msr	BASEPRI_MAX, r1
    608e:	f3bf 8f6f 	isb	sy
    6092:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6096:	b131      	cbz	r1, 60a6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6098:	2100      	movs	r1, #0
    609a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    609e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60a2:	2101      	movs	r1, #1
    60a4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    60a6:	f382 8811 	msr	BASEPRI, r2
    60aa:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    60ae:	6842      	ldr	r2, [r0, #4]
    60b0:	6852      	ldr	r2, [r2, #4]
    60b2:	06d2      	lsls	r2, r2, #27
    60b4:	d515      	bpl.n	60e2 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    60b6:	f04f 0120 	mov.w	r1, #32
    60ba:	f3ef 8211 	mrs	r2, BASEPRI
    60be:	f381 8812 	msr	BASEPRI_MAX, r1
    60c2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    60c6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    60ca:	b111      	cbz	r1, 60d2 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    60cc:	2100      	movs	r1, #0
    60ce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    60d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    60d6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    60da:	f382 8811 	msr	BASEPRI, r2
    60de:	f3bf 8f6f 	isb	sy
}
    60e2:	4770      	bx	lr

000060e4 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    60e4:	4770      	bx	lr

000060e6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    60e6:	4770      	bx	lr

000060e8 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    60e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    60ec:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    60f0:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    60f2:	bf04      	itt	eq
    60f4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    60f8:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    60fc:	1f83      	subs	r3, r0, #6
    60fe:	4258      	negs	r0, r3
    6100:	4158      	adcs	r0, r3
    6102:	4770      	bx	lr

00006104 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6104:	4700      	bx	r0

00006106 <nrfx_busy_wait>:
    6106:	f000 ba35 	b.w	6574 <z_impl_k_busy_wait>

0000610a <nrfx_clock_enable>:
{
    610a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    610c:	2000      	movs	r0, #0
    610e:	f7fb fe09 	bl	1d24 <arch_irq_is_enabled>
    6112:	b918      	cbnz	r0, 611c <nrfx_clock_enable+0x12>
}
    6114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6118:	f7fb bdf4 	b.w	1d04 <arch_irq_enable>
    611c:	bd08      	pop	{r3, pc}

0000611e <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    611e:	7b0a      	ldrb	r2, [r1, #12]
{
    6120:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    6122:	2a03      	cmp	r2, #3
    6124:	d829      	bhi.n	617a <xfer_completeness_check+0x5c>
    6126:	e8df f002 	tbb	[pc, r2]
    612a:	2521      	.short	0x2521
    612c:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    612e:	688a      	ldr	r2, [r1, #8]
    6130:	0350      	lsls	r0, r2, #13
    6132:	d504      	bpl.n	613e <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    6134:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    6138:	6908      	ldr	r0, [r1, #16]
    613a:	4290      	cmp	r0, r2
    613c:	d107      	bne.n	614e <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    613e:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    6140:	0352      	lsls	r2, r2, #13
    6142:	d41a      	bmi.n	617a <xfer_completeness_check+0x5c>
    6144:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6148:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    614a:	4291      	cmp	r1, r2
    614c:	d015      	beq.n	617a <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    614e:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6150:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    6152:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6156:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    615a:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    615c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6160:	6908      	ldr	r0, [r1, #16]
    6162:	4290      	cmp	r0, r2
    6164:	d1f3      	bne.n	614e <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    6166:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    616a:	e7ed      	b.n	6148 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    616c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    6170:	6909      	ldr	r1, [r1, #16]
    6172:	e7ea      	b.n	614a <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    6174:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    6178:	e7fa      	b.n	6170 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    617a:	2001      	movs	r0, #1
}
    617c:	4770      	bx	lr

0000617e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    617e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    6180:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    6182:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    6184:	bf9c      	itt	ls
    6186:	6880      	ldrls	r0, [r0, #8]
    6188:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    618a:	3b01      	subs	r3, #1
    618c:	1a98      	subs	r0, r3, r2
}
    618e:	4770      	bx	lr

00006190 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    6194:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6198:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    619a:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    619e:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    61a0:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    61a2:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    61a4:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    61a6:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    61a8:	d906      	bls.n	61b8 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    61aa:	f7ff fa53 	bl	5654 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    61ae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    61b2:	60ec      	str	r4, [r5, #12]
}
    61b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    61b8:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    61ba:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    61be:	f7ff fa49 	bl	5654 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    61c2:	6868      	ldr	r0, [r5, #4]
    61c4:	4622      	mov	r2, r4
    61c6:	eb07 0108 	add.w	r1, r7, r8
    61ca:	e7ee      	b.n	61aa <_WriteNoCheck+0x1a>

000061cc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    61cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    61d0:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    61d2:	4606      	mov	r6, r0
    61d4:	4689      	mov	r9, r1
    61d6:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    61d8:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    61dc:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    61de:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    61e0:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    61e2:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    61e4:	bf28      	it	cs
    61e6:	18e4      	addcs	r4, r4, r3
    61e8:	3c01      	subs	r4, #1
    61ea:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    61ec:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    61ee:	42bc      	cmp	r4, r7
    61f0:	bf28      	it	cs
    61f2:	463c      	movcs	r4, r7
    61f4:	4294      	cmp	r4, r2
    61f6:	bf28      	it	cs
    61f8:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    61fa:	4649      	mov	r1, r9
    61fc:	4622      	mov	r2, r4
    61fe:	4428      	add	r0, r5
    6200:	f7ff fa28 	bl	5654 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    6204:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    6206:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
    6208:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    620a:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    620c:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
    620e:	42ab      	cmp	r3, r5
    6210:	bf08      	it	eq
    6212:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    6214:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    6218:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    621a:	2f00      	cmp	r7, #0
    621c:	d1de      	bne.n	61dc <_WriteBlocking+0x10>
}
    621e:	4640      	mov	r0, r8
    6220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006224 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6224:	f7fd bfa0 	b.w	4168 <_DoInit>

00006228 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6228:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    622a:	f7ff fffb 	bl	6224 <SEGGER_RTT_Init>

	return 0;
}
    622e:	2000      	movs	r0, #0
    6230:	bd08      	pop	{r3, pc}

00006232 <z_device_state_init>:
}
    6232:	4770      	bx	lr

00006234 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6234:	b138      	cbz	r0, 6246 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6236:	68c3      	ldr	r3, [r0, #12]
    6238:	8818      	ldrh	r0, [r3, #0]
    623a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    623e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6242:	4258      	negs	r0, r3
    6244:	4158      	adcs	r0, r3
}
    6246:	4770      	bx	lr

00006248 <arch_system_halt>:
	__asm__ volatile(
    6248:	f04f 0220 	mov.w	r2, #32
    624c:	f3ef 8311 	mrs	r3, BASEPRI
    6250:	f382 8812 	msr	BASEPRI_MAX, r2
    6254:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    6258:	e7fe      	b.n	6258 <arch_system_halt+0x10>

0000625a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    625a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    625c:	f7ff fff4 	bl	6248 <arch_system_halt>

00006260 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6262:	4605      	mov	r5, r0
    6264:	460e      	mov	r6, r1
    6266:	f04f 0320 	mov.w	r3, #32
    626a:	f3ef 8711 	mrs	r7, BASEPRI
    626e:	f383 8812 	msr	BASEPRI_MAX, r3
    6272:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6276:	f7fe fdfd 	bl	4e74 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    627a:	4631      	mov	r1, r6
    627c:	4604      	mov	r4, r0
    627e:	4628      	mov	r0, r5
    6280:	f7ff ffeb 	bl	625a <k_sys_fatal_error_handler>
	__asm__ volatile(
    6284:	f387 8811 	msr	BASEPRI, r7
    6288:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    628c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    628e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6292:	f7fb bf7d 	b.w	2190 <z_impl_k_thread_abort>

00006296 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6296:	f3ef 8005 	mrs	r0, IPSR
}
    629a:	3800      	subs	r0, #0
    629c:	bf18      	it	ne
    629e:	2001      	movne	r0, #1
    62a0:	4770      	bx	lr

000062a2 <z_impl_k_thread_name_set>:
}
    62a2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    62a6:	4770      	bx	lr

000062a8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    62a8:	f7fe bc78 	b.w	4b9c <z_sched_start>

000062ac <z_pm_save_idle_exit>:
{
    62ac:	b508      	push	{r3, lr}
	pm_system_resume();
    62ae:	f7fb fca1 	bl	1bf4 <pm_system_resume>
}
    62b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    62b6:	f7ff bf16 	b.w	60e6 <sys_clock_idle_exit>

000062ba <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    62ba:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    62bc:	2301      	movs	r3, #1
    62be:	408b      	lsls	r3, r1
    62c0:	ea22 0303 	bic.w	r3, r2, r3
    62c4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    62c6:	fa22 f001 	lsr.w	r0, r2, r1
}
    62ca:	f000 0001 	and.w	r0, r0, #1
    62ce:	4770      	bx	lr

000062d0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    62d0:	b120      	cbz	r0, 62dc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    62d2:	2200      	movs	r2, #0
    62d4:	4611      	mov	r1, r2
    62d6:	3088      	adds	r0, #136	; 0x88
    62d8:	f000 b8eb 	b.w	64b2 <z_sched_wake>
}
    62dc:	4770      	bx	lr

000062de <work_timeout>:
{
    62de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    62e0:	4604      	mov	r4, r0
	__asm__ volatile(
    62e2:	f04f 0320 	mov.w	r3, #32
    62e6:	f3ef 8511 	mrs	r5, BASEPRI
    62ea:	f383 8812 	msr	BASEPRI_MAX, r3
    62ee:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    62f2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    62f4:	f1a0 0610 	sub.w	r6, r0, #16
    62f8:	2103      	movs	r1, #3
    62fa:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    62fc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    62fe:	f7ff ffdc 	bl	62ba <flag_test_and_clear>
    6302:	b128      	cbz	r0, 6310 <work_timeout+0x32>
		queue = dw->queue;
    6304:	69a3      	ldr	r3, [r4, #24]
    6306:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    6308:	a901      	add	r1, sp, #4
    630a:	4630      	mov	r0, r6
    630c:	f7fe fa4c 	bl	47a8 <submit_to_queue_locked>
	__asm__ volatile(
    6310:	f385 8811 	msr	BASEPRI, r5
    6314:	f3bf 8f6f 	isb	sy
}
    6318:	b002      	add	sp, #8
    631a:	bd70      	pop	{r4, r5, r6, pc}

0000631c <k_work_submit_to_queue>:
{
    631c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    631e:	9001      	str	r0, [sp, #4]
    6320:	4608      	mov	r0, r1
	__asm__ volatile(
    6322:	f04f 0320 	mov.w	r3, #32
    6326:	f3ef 8511 	mrs	r5, BASEPRI
    632a:	f383 8812 	msr	BASEPRI_MAX, r3
    632e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    6332:	a901      	add	r1, sp, #4
    6334:	f7fe fa38 	bl	47a8 <submit_to_queue_locked>
    6338:	4604      	mov	r4, r0
	__asm__ volatile(
    633a:	f385 8811 	msr	BASEPRI, r5
    633e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    6342:	2800      	cmp	r0, #0
    6344:	dd04      	ble.n	6350 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    6346:	f7fe fd9b 	bl	4e80 <z_impl_k_is_preempt_thread>
    634a:	b108      	cbz	r0, 6350 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    634c:	f7fe fcf0 	bl	4d30 <z_impl_k_yield>
}
    6350:	4620      	mov	r0, r4
    6352:	b003      	add	sp, #12
    6354:	bd30      	pop	{r4, r5, pc}

00006356 <k_work_init_delayable>:
{
    6356:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    6358:	2230      	movs	r2, #48	; 0x30
{
    635a:	4604      	mov	r4, r0
    635c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    635e:	2100      	movs	r1, #0
    6360:	f7ff f983 	bl	566a <memset>
    6364:	f44f 7380 	mov.w	r3, #256	; 0x100
    6368:	6065      	str	r5, [r4, #4]
    636a:	60e3      	str	r3, [r4, #12]
}
    636c:	bd38      	pop	{r3, r4, r5, pc}

0000636e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    636e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6372:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6374:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6376:	2300      	movs	r3, #0
	node->prev = NULL;
    6378:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    637c:	4770      	bx	lr

0000637e <unpend_thread_no_timeout>:
{
    637e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6380:	f7ff fff5 	bl	636e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6384:	7b43      	ldrb	r3, [r0, #13]
    6386:	f023 0302 	bic.w	r3, r3, #2
    638a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    638c:	2300      	movs	r3, #0
    638e:	6083      	str	r3, [r0, #8]
}
    6390:	bd08      	pop	{r3, pc}

00006392 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6392:	4603      	mov	r3, r0
    6394:	b920      	cbnz	r0, 63a0 <z_reschedule_irqlock+0xe>
    6396:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    639a:	b90a      	cbnz	r2, 63a0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    639c:	f7fb bd10 	b.w	1dc0 <arch_swap>
    63a0:	f383 8811 	msr	BASEPRI, r3
    63a4:	f3bf 8f6f 	isb	sy
}
    63a8:	4770      	bx	lr

000063aa <z_reschedule_unlocked>:
	__asm__ volatile(
    63aa:	f04f 0320 	mov.w	r3, #32
    63ae:	f3ef 8011 	mrs	r0, BASEPRI
    63b2:	f383 8812 	msr	BASEPRI_MAX, r3
    63b6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    63ba:	f7ff bfea 	b.w	6392 <z_reschedule_irqlock>

000063be <z_priq_dumb_best>:
{
    63be:	4603      	mov	r3, r0
	return list->head == list;
    63c0:	6800      	ldr	r0, [r0, #0]
}
    63c2:	4283      	cmp	r3, r0
    63c4:	bf08      	it	eq
    63c6:	2000      	moveq	r0, #0
    63c8:	4770      	bx	lr

000063ca <z_ready_thread>:
{
    63ca:	b510      	push	{r4, lr}
    63cc:	f04f 0320 	mov.w	r3, #32
    63d0:	f3ef 8411 	mrs	r4, BASEPRI
    63d4:	f383 8812 	msr	BASEPRI_MAX, r3
    63d8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    63dc:	f7fe fba8 	bl	4b30 <ready_thread>
	__asm__ volatile(
    63e0:	f384 8811 	msr	BASEPRI, r4
    63e4:	f3bf 8f6f 	isb	sy
}
    63e8:	bd10      	pop	{r4, pc}

000063ea <z_thread_timeout>:
{
    63ea:	b510      	push	{r4, lr}
    63ec:	4601      	mov	r1, r0
	__asm__ volatile(
    63ee:	f04f 0320 	mov.w	r3, #32
    63f2:	f3ef 8411 	mrs	r4, BASEPRI
    63f6:	f383 8812 	msr	BASEPRI_MAX, r3
    63fa:	f3bf 8f6f 	isb	sy
		if (!killed) {
    63fe:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6402:	f013 0f28 	tst.w	r3, #40	; 0x28
    6406:	d10d      	bne.n	6424 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6408:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    640c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    640e:	b10b      	cbz	r3, 6414 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6410:	f7ff ffb5 	bl	637e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6414:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6418:	f023 0314 	bic.w	r3, r3, #20
    641c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6420:	f7fe fb86 	bl	4b30 <ready_thread>
	__asm__ volatile(
    6424:	f384 8811 	msr	BASEPRI, r4
    6428:	f3bf 8f6f 	isb	sy
}
    642c:	bd10      	pop	{r4, pc}

0000642e <add_to_waitq_locked>:
{
    642e:	b538      	push	{r3, r4, r5, lr}
    6430:	4604      	mov	r4, r0
    6432:	460d      	mov	r5, r1
	unready_thread(thread);
    6434:	f7fe fbd0 	bl	4bd8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6438:	7b63      	ldrb	r3, [r4, #13]
    643a:	f043 0302 	orr.w	r3, r3, #2
    643e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6440:	b195      	cbz	r5, 6468 <add_to_waitq_locked+0x3a>
    6442:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6444:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6446:	429d      	cmp	r5, r3
    6448:	d015      	beq.n	6476 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    644a:	b1a3      	cbz	r3, 6476 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    644c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6450:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6454:	4291      	cmp	r1, r2
    6456:	d008      	beq.n	646a <add_to_waitq_locked+0x3c>
		return b2 - b1;
    6458:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    645a:	2a00      	cmp	r2, #0
    645c:	dd05      	ble.n	646a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    645e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6460:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6464:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6466:	605c      	str	r4, [r3, #4]
}
    6468:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    646a:	686a      	ldr	r2, [r5, #4]
    646c:	4293      	cmp	r3, r2
    646e:	d002      	beq.n	6476 <add_to_waitq_locked+0x48>
    6470:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6472:	2b00      	cmp	r3, #0
    6474:	d1ec      	bne.n	6450 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    6476:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6478:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    647c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    647e:	606c      	str	r4, [r5, #4]
}
    6480:	e7f2      	b.n	6468 <add_to_waitq_locked+0x3a>

00006482 <z_unpend_first_thread>:
{
    6482:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6484:	f04f 0320 	mov.w	r3, #32
    6488:	f3ef 8511 	mrs	r5, BASEPRI
    648c:	f383 8812 	msr	BASEPRI_MAX, r3
    6490:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6494:	f7ff ff93 	bl	63be <z_priq_dumb_best>
		if (thread != NULL) {
    6498:	4604      	mov	r4, r0
    649a:	b120      	cbz	r0, 64a6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    649c:	f7ff ff6f 	bl	637e <unpend_thread_no_timeout>
    64a0:	3018      	adds	r0, #24
    64a2:	f000 f823 	bl	64ec <z_abort_timeout>
	__asm__ volatile(
    64a6:	f385 8811 	msr	BASEPRI, r5
    64aa:	f3bf 8f6f 	isb	sy
}
    64ae:	4620      	mov	r0, r4
    64b0:	bd38      	pop	{r3, r4, r5, pc}

000064b2 <z_sched_wake>:
{
    64b2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    64b4:	f04f 0320 	mov.w	r3, #32
    64b8:	f3ef 8511 	mrs	r5, BASEPRI
    64bc:	f383 8812 	msr	BASEPRI_MAX, r3
    64c0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    64c4:	f7ff ff7b 	bl	63be <z_priq_dumb_best>
		if (thread != NULL) {
    64c8:	4604      	mov	r4, r0
    64ca:	b150      	cbz	r0, 64e2 <z_sched_wake+0x30>
    64cc:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    64ce:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    64d0:	f7ff ff55 	bl	637e <unpend_thread_no_timeout>
    64d4:	3018      	adds	r0, #24
    64d6:	f000 f809 	bl	64ec <z_abort_timeout>
			ready_thread(thread);
    64da:	4620      	mov	r0, r4
    64dc:	f7fe fb28 	bl	4b30 <ready_thread>
			ret = true;
    64e0:	2001      	movs	r0, #1
	__asm__ volatile(
    64e2:	f385 8811 	msr	BASEPRI, r5
    64e6:	f3bf 8f6f 	isb	sy
}
    64ea:	bd38      	pop	{r3, r4, r5, pc}

000064ec <z_abort_timeout>:
{
    64ec:	b510      	push	{r4, lr}
	__asm__ volatile(
    64ee:	f04f 0220 	mov.w	r2, #32
    64f2:	f3ef 8411 	mrs	r4, BASEPRI
    64f6:	f382 8812 	msr	BASEPRI_MAX, r2
    64fa:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    64fe:	6803      	ldr	r3, [r0, #0]
    6500:	b13b      	cbz	r3, 6512 <z_abort_timeout+0x26>
			remove_timeout(to);
    6502:	f7fe fd7d 	bl	5000 <remove_timeout>
			ret = 0;
    6506:	2000      	movs	r0, #0
	__asm__ volatile(
    6508:	f384 8811 	msr	BASEPRI, r4
    650c:	f3bf 8f6f 	isb	sy
}
    6510:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6512:	f06f 0015 	mvn.w	r0, #21
    6516:	e7f7      	b.n	6508 <z_abort_timeout+0x1c>

00006518 <z_get_next_timeout_expiry>:
{
    6518:	b510      	push	{r4, lr}
	__asm__ volatile(
    651a:	f04f 0320 	mov.w	r3, #32
    651e:	f3ef 8411 	mrs	r4, BASEPRI
    6522:	f383 8812 	msr	BASEPRI_MAX, r3
    6526:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    652a:	f7fe fd41 	bl	4fb0 <next_timeout>
	__asm__ volatile(
    652e:	f384 8811 	msr	BASEPRI, r4
    6532:	f3bf 8f6f 	isb	sy
}
    6536:	bd10      	pop	{r4, pc}

00006538 <z_set_timeout_expiry>:
{
    6538:	b570      	push	{r4, r5, r6, lr}
    653a:	4604      	mov	r4, r0
    653c:	460d      	mov	r5, r1
	__asm__ volatile(
    653e:	f04f 0320 	mov.w	r3, #32
    6542:	f3ef 8611 	mrs	r6, BASEPRI
    6546:	f383 8812 	msr	BASEPRI_MAX, r3
    654a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    654e:	f7fe fd2f 	bl	4fb0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6552:	2801      	cmp	r0, #1
    6554:	dd05      	ble.n	6562 <z_set_timeout_expiry+0x2a>
    6556:	42a0      	cmp	r0, r4
    6558:	db03      	blt.n	6562 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    655a:	4629      	mov	r1, r5
    655c:	4620      	mov	r0, r4
    655e:	f7fd f807 	bl	3570 <sys_clock_set_timeout>
	__asm__ volatile(
    6562:	f386 8811 	msr	BASEPRI, r6
    6566:	f3bf 8f6f 	isb	sy
}
    656a:	bd70      	pop	{r4, r5, r6, pc}

0000656c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    656c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    656e:	f7fe fe37 	bl	51e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6572:	bd08      	pop	{r3, pc}

00006574 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6574:	b108      	cbz	r0, 657a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6576:	f7fb befd 	b.w	2374 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    657a:	4770      	bx	lr

0000657c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    657c:	f7fd b854 	b.w	3628 <SystemInit>
