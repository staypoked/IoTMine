
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 0e 00 20 09 13 00 00 65 44 00 00 dd 12 00 00     @.. ....eD......
  10:	dd 12 00 00 dd 12 00 00 dd 12 00 00 00 00 00 00     ................
	...
  2c:	f1 0f 00 00 dd 12 00 00 00 00 00 00 9d 0f 00 00     ................
  3c:	09 4e 00 00                                         .N..

00000040 <_irq_vector_table>:
  40:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  50:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  60:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  70:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  80:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  90:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  a0:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  b0:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  c0:	a1 10 00 00 a1 10 00 00 a1 10 00 00 a1 10 00 00     ................
  d0:	a1 10 00 00 a1 10 00 00 a1 10 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	4607      	mov	r7, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     11c:	4615      	mov	r5, r2
     11e:	463c      	mov	r4, r7
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c6 	bne.w	2b4 <CONFIG_FLASH_SIZE+0xb4>
     128:	4282      	cmp	r2, r0
     12a:	fab2 f782 	clz	r7, r2
     12e:	d946      	bls.n	1be <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x74>
     130:	b14f      	cbz	r7, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c7 0e20 	rsb	lr, r7, #32
     136:	fa24 fe0e 	lsr.w	lr, r4, lr
     13a:	fa00 f307 	lsl.w	r3, r0, r7
     13e:	40bd      	lsls	r5, r7
     140:	ea4e 0c03 	orr.w	ip, lr, r3
     144:	40bc      	lsls	r4, r7
     146:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14a:	fa1f fe85 	uxth.w	lr, r5
     14e:	fbbc f9f8 	udiv	r9, ip, r8
     152:	0c22      	lsrs	r2, r4, #16
     154:	fb08 c319 	mls	r3, r8, r9, ip
     158:	fb09 fa0e 	mul.w	sl, r9, lr
     15c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     160:	459a      	cmp	sl, r3
     162:	d928      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     164:	18eb      	adds	r3, r5, r3
     166:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     16a:	d204      	bcs.n	176 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2c>
     16c:	459a      	cmp	sl, r3
     16e:	d902      	bls.n	176 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2c>
     170:	f1a9 0002 	sub.w	r0, r9, #2
     174:	442b      	add	r3, r5
     176:	eba3 030a 	sub.w	r3, r3, sl
     17a:	b2a4      	uxth	r4, r4
     17c:	fbb3 f2f8 	udiv	r2, r3, r8
     180:	fb08 3312 	mls	r3, r8, r2, r3
     184:	fb02 fe0e 	mul.w	lr, r2, lr
     188:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18c:	45a6      	cmp	lr, r4
     18e:	d914      	bls.n	1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     190:	192c      	adds	r4, r5, r4
     192:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     196:	d203      	bcs.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     198:	45a6      	cmp	lr, r4
     19a:	d901      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     19c:	1e93      	subs	r3, r2, #2
     19e:	442c      	add	r4, r5
     1a0:	eba4 040e 	sub.w	r4, r4, lr
     1a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40fc      	lsrs	r4, r7
     1ac:	2300      	movs	r3, #0
     1ae:	6034      	str	r4, [r6, #0]
     1b0:	6073      	str	r3, [r6, #4]
     1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1b6:	4648      	mov	r0, r9
     1b8:	e7dd      	b.n	176 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2c>
     1ba:	4613      	mov	r3, r2
     1bc:	e7f0      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     1be:	b902      	cbnz	r2, 1c2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x78>
     1c0:	deff      	udf	#255	; 0xff
     1c2:	bb87      	cbnz	r7, 226 <CONFIG_FLASH_SIZE+0x26>
     1c4:	1a83      	subs	r3, r0, r2
     1c6:	2101      	movs	r1, #1
     1c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1cc:	b2aa      	uxth	r2, r5
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c20      	lsrs	r0, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	fb0c f802 	mul.w	r8, ip, r2
     1dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e0:	4598      	cmp	r8, r3
     1e2:	d963      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     1e4:	18eb      	adds	r3, r5, r3
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1ea:	d204      	bcs.n	1f6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xac>
     1ec:	4598      	cmp	r8, r3
     1ee:	d902      	bls.n	1f6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xac>
     1f0:	f1ac 0002 	sub.w	r0, ip, #2
     1f4:	442b      	add	r3, r5
     1f6:	eba3 0308 	sub.w	r3, r3, r8
     1fa:	b2a4      	uxth	r4, r4
     1fc:	fbb3 fcfe 	udiv	ip, r3, lr
     200:	fb0e 331c 	mls	r3, lr, ip, r3
     204:	fb0c f202 	mul.w	r2, ip, r2
     208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     20c:	42a2      	cmp	r2, r4
     20e:	d94f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     210:	192c      	adds	r4, r5, r4
     212:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     216:	d204      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     218:	42a2      	cmp	r2, r4
     21a:	d902      	bls.n	222 <CONFIG_FLASH_SIZE+0x22>
     21c:	f1ac 0302 	sub.w	r3, ip, #2
     220:	442c      	add	r4, r5
     222:	1aa4      	subs	r4, r4, r2
     224:	e7be      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     226:	f1c7 0c20 	rsb	ip, r7, #32
     22a:	fa20 f80c 	lsr.w	r8, r0, ip
     22e:	fa00 f307 	lsl.w	r3, r0, r7
     232:	fa24 fc0c 	lsr.w	ip, r4, ip
     236:	40bd      	lsls	r5, r7
     238:	ea4c 0203 	orr.w	r2, ip, r3
     23c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     240:	b2ab      	uxth	r3, r5
     242:	fbb8 fcfe 	udiv	ip, r8, lr
     246:	0c11      	lsrs	r1, r2, #16
     248:	fb0e 801c 	mls	r0, lr, ip, r8
     24c:	fb0c f903 	mul.w	r9, ip, r3
     250:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     254:	4581      	cmp	r9, r0
     256:	fa04 f407 	lsl.w	r4, r4, r7
     25a:	d923      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
     25c:	1828      	adds	r0, r5, r0
     25e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     262:	d204      	bcs.n	26e <CONFIG_FLASH_SIZE+0x6e>
     264:	4581      	cmp	r9, r0
     266:	d902      	bls.n	26e <CONFIG_FLASH_SIZE+0x6e>
     268:	f1ac 0102 	sub.w	r1, ip, #2
     26c:	4428      	add	r0, r5
     26e:	eba0 0009 	sub.w	r0, r0, r9
     272:	b292      	uxth	r2, r2
     274:	fbb0 fcfe 	udiv	ip, r0, lr
     278:	fb0e 001c 	mls	r0, lr, ip, r0
     27c:	fb0c f803 	mul.w	r8, ip, r3
     280:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     284:	4598      	cmp	r8, r3
     286:	d90f      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     288:	18eb      	adds	r3, r5, r3
     28a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     28e:	d204      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     290:	4598      	cmp	r8, r3
     292:	d902      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     294:	f1ac 0202 	sub.w	r2, ip, #2
     298:	442b      	add	r3, r5
     29a:	eba3 0308 	sub.w	r3, r3, r8
     29e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a2:	e791      	b.n	1c8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x7e>
     2a4:	4661      	mov	r1, ip
     2a6:	e7e2      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     2a8:	4662      	mov	r2, ip
     2aa:	e7f6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     2ac:	4660      	mov	r0, ip
     2ae:	e7a2      	b.n	1f6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xac>
     2b0:	4663      	mov	r3, ip
     2b2:	e7b6      	b.n	222 <CONFIG_FLASH_SIZE+0x22>
     2b4:	4283      	cmp	r3, r0
     2b6:	d905      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2b8:	b10e      	cbz	r6, 2be <CONFIG_FLASH_SIZE+0xbe>
     2ba:	e9c6 7000 	strd	r7, r0, [r6]
     2be:	2100      	movs	r1, #0
     2c0:	4608      	mov	r0, r1
     2c2:	e776      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     2c4:	fab3 f183 	clz	r1, r3
     2c8:	b981      	cbnz	r1, 2ec <CONFIG_FLASH_SIZE+0xec>
     2ca:	4283      	cmp	r3, r0
     2cc:	d301      	bcc.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     2ce:	42ba      	cmp	r2, r7
     2d0:	d80a      	bhi.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2d2:	1abc      	subs	r4, r7, r2
     2d4:	eb60 0303 	sbc.w	r3, r0, r3
     2d8:	2001      	movs	r0, #1
     2da:	469c      	mov	ip, r3
     2dc:	2e00      	cmp	r6, #0
     2de:	d068      	beq.n	3b2 <CONFIG_FLASH_SIZE+0x1b2>
     2e0:	e9c6 4c00 	strd	r4, ip, [r6]
     2e4:	2100      	movs	r1, #0
     2e6:	e764      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     2e8:	4608      	mov	r0, r1
     2ea:	e7f7      	b.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     2ec:	f1c1 0c20 	rsb	ip, r1, #32
     2f0:	408b      	lsls	r3, r1
     2f2:	fa22 f40c 	lsr.w	r4, r2, ip
     2f6:	431c      	orrs	r4, r3
     2f8:	fa02 f501 	lsl.w	r5, r2, r1
     2fc:	fa00 f301 	lsl.w	r3, r0, r1
     300:	fa27 f20c 	lsr.w	r2, r7, ip
     304:	fa20 fb0c 	lsr.w	fp, r0, ip
     308:	ea4f 4914 	mov.w	r9, r4, lsr #16
     30c:	4313      	orrs	r3, r2
     30e:	fbbb f8f9 	udiv	r8, fp, r9
     312:	fa1f fe84 	uxth.w	lr, r4
     316:	fb09 bb18 	mls	fp, r9, r8, fp
     31a:	0c1a      	lsrs	r2, r3, #16
     31c:	fb08 fa0e 	mul.w	sl, r8, lr
     320:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     324:	4592      	cmp	sl, r2
     326:	fa07 f701 	lsl.w	r7, r7, r1
     32a:	d93e      	bls.n	3aa <CONFIG_FLASH_SIZE+0x1aa>
     32c:	18a2      	adds	r2, r4, r2
     32e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     332:	d204      	bcs.n	33e <CONFIG_FLASH_SIZE+0x13e>
     334:	4592      	cmp	sl, r2
     336:	d902      	bls.n	33e <CONFIG_FLASH_SIZE+0x13e>
     338:	f1a8 0002 	sub.w	r0, r8, #2
     33c:	4422      	add	r2, r4
     33e:	eba2 020a 	sub.w	r2, r2, sl
     342:	b29b      	uxth	r3, r3
     344:	fbb2 f8f9 	udiv	r8, r2, r9
     348:	fb09 2218 	mls	r2, r9, r8, r2
     34c:	fb08 fe0e 	mul.w	lr, r8, lr
     350:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     354:	4596      	cmp	lr, r2
     356:	d92a      	bls.n	3ae <CONFIG_FLASH_SIZE+0x1ae>
     358:	18a2      	adds	r2, r4, r2
     35a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     35e:	d204      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     360:	4596      	cmp	lr, r2
     362:	d902      	bls.n	36a <CONFIG_FLASH_SIZE+0x16a>
     364:	f1a8 0302 	sub.w	r3, r8, #2
     368:	4422      	add	r2, r4
     36a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     36e:	fba0 9305 	umull	r9, r3, r0, r5
     372:	eba2 020e 	sub.w	r2, r2, lr
     376:	429a      	cmp	r2, r3
     378:	46ce      	mov	lr, r9
     37a:	4698      	mov	r8, r3
     37c:	d302      	bcc.n	384 <CONFIG_FLASH_SIZE+0x184>
     37e:	d106      	bne.n	38e <CONFIG_FLASH_SIZE+0x18e>
     380:	454f      	cmp	r7, r9
     382:	d204      	bcs.n	38e <CONFIG_FLASH_SIZE+0x18e>
     384:	ebb9 0e05 	subs.w	lr, r9, r5
     388:	eb63 0804 	sbc.w	r8, r3, r4
     38c:	3801      	subs	r0, #1
     38e:	b186      	cbz	r6, 3b2 <CONFIG_FLASH_SIZE+0x1b2>
     390:	ebb7 030e 	subs.w	r3, r7, lr
     394:	eb62 0708 	sbc.w	r7, r2, r8
     398:	fa07 fc0c 	lsl.w	ip, r7, ip
     39c:	40cb      	lsrs	r3, r1
     39e:	ea4c 0303 	orr.w	r3, ip, r3
     3a2:	40cf      	lsrs	r7, r1
     3a4:	e9c6 3700 	strd	r3, r7, [r6]
     3a8:	e79c      	b.n	2e4 <CONFIG_FLASH_SIZE+0xe4>
     3aa:	4640      	mov	r0, r8
     3ac:	e7c7      	b.n	33e <CONFIG_FLASH_SIZE+0x13e>
     3ae:	4643      	mov	r3, r8
     3b0:	e7db      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3b2:	4631      	mov	r1, r6
     3b4:	e6fd      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
	...

000003b8 <main>:
#include <zephyr.h>

int main() {
     3b8:	b508      	push	{r3, lr}
	// Additionally install the rtt viewer of jegger to see the output
	printk("Welcome, starting system.\n");
     3ba:	4806      	ldr	r0, [pc, #24]	; (3d4 <main+0x1c>)

	while(true){
		printk("Thingy52 is running.\n");
     3bc:	4c06      	ldr	r4, [pc, #24]	; (3d8 <main+0x20>)
	printk("Welcome, starting system.\n");
     3be:	f003 fed2 	bl	4166 <printk>
		printk("Thingy52 is running.\n");
     3c2:	4620      	mov	r0, r4
     3c4:	f003 fecf 	bl	4166 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3c8:	2100      	movs	r1, #0
     3ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     3ce:	f003 fcab 	bl	3d28 <z_impl_k_sleep>
     3d2:	e7f6      	b.n	3c2 <main+0xa>
     3d4:	000057c8 	.word	0x000057c8
     3d8:	000057e3 	.word	0x000057e3

000003dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     3dc:	680b      	ldr	r3, [r1, #0]
     3de:	3301      	adds	r3, #1
     3e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     3e2:	4b01      	ldr	r3, [pc, #4]	; (3e8 <char_out+0xc>)
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	4718      	bx	r3
     3e8:	20000000 	.word	0x20000000

000003ec <__printk_hook_install>:
	_char_out = fn;
     3ec:	4b01      	ldr	r3, [pc, #4]	; (3f4 <__printk_hook_install+0x8>)
     3ee:	6018      	str	r0, [r3, #0]
}
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	20000000 	.word	0x20000000

000003f8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     3f8:	b507      	push	{r0, r1, r2, lr}
     3fa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     3fc:	2100      	movs	r1, #0
{
     3fe:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     400:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     402:	4803      	ldr	r0, [pc, #12]	; (410 <CONFIG_MAIN_STACK_SIZE+0x10>)
     404:	a901      	add	r1, sp, #4
     406:	f000 f8e5 	bl	5d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     40a:	b003      	add	sp, #12
     40c:	f85d fb04 	ldr.w	pc, [sp], #4
     410:	000003dd 	.word	0x000003dd

00000414 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     418:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     41c:	f019 0808 	ands.w	r8, r9, #8
{
     420:	4604      	mov	r4, r0
     422:	4693      	mov	fp, r2
	if (processing) {
     424:	d00d      	beq.n	442 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     426:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     428:	bf0c      	ite	eq
     42a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     42e:	f049 0920 	orrne.w	r9, r9, #32
     432:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     436:	f38b 8811 	msr	BASEPRI, fp
     43a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     43e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     442:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     446:	2902      	cmp	r1, #2
     448:	d107      	bne.n	45a <process_event+0x46>
			evt = process_recheck(mgr);
     44a:	4620      	mov	r0, r4
     44c:	f003 fe98 	bl	4180 <process_recheck>
		if (evt == EVT_NOP) {
     450:	2800      	cmp	r0, #0
     452:	d0f0      	beq.n	436 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     454:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     456:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     458:	d14e      	bne.n	4f8 <process_event+0xe4>
			res = mgr->last_res;
     45a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     45c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     45e:	2f00      	cmp	r7, #0
     460:	da15      	bge.n	48e <process_event+0x7a>
		*clients = mgr->clients;
     462:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     464:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     468:	e9c4 8800 	strd	r8, r8, [r4]
     46c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     470:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     472:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     474:	8b21      	ldrh	r1, [r4, #24]
     476:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     47a:	45ca      	cmp	sl, r9
     47c:	d002      	beq.n	484 <process_event+0x70>
		if (do_monitors
     47e:	68a3      	ldr	r3, [r4, #8]
     480:	2b00      	cmp	r3, #0
     482:	d15a      	bne.n	53a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     484:	b90d      	cbnz	r5, 48a <process_event+0x76>
		    || (transit != NULL)) {
     486:	2e00      	cmp	r6, #0
     488:	d071      	beq.n	56e <process_event+0x15a>
     48a:	2300      	movs	r3, #0
     48c:	e056      	b.n	53c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     48e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     492:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     494:	2a01      	cmp	r2, #1
     496:	d81e      	bhi.n	4d6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     498:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     49c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     49e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4a0:	b289      	uxth	r1, r1
     4a2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4a6:	d10a      	bne.n	4be <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4a8:	b13d      	cbz	r5, 4ba <process_event+0xa6>
     4aa:	8b63      	ldrh	r3, [r4, #26]
     4ac:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     4ae:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     4b0:	3301      	adds	r3, #1
     4b2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4b4:	2a00      	cmp	r2, #0
     4b6:	d1fa      	bne.n	4ae <process_event+0x9a>
     4b8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4ba:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     4be:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     4c0:	4620      	mov	r0, r4
     4c2:	f003 fe5d 	bl	4180 <process_recheck>
     4c6:	4606      	mov	r6, r0
     4c8:	2800      	cmp	r0, #0
     4ca:	d0d3      	beq.n	474 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4cc:	8b23      	ldrh	r3, [r4, #24]
     4ce:	f043 0320 	orr.w	r3, r3, #32
     4d2:	8323      	strh	r3, [r4, #24]
     4d4:	e7cd      	b.n	472 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     4d6:	2b04      	cmp	r3, #4
     4d8:	d10c      	bne.n	4f4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4da:	f021 0107 	bic.w	r1, r1, #7
     4de:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     4e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     4e2:	4620      	mov	r0, r4
     4e4:	f003 fe4c 	bl	4180 <process_recheck>
     4e8:	4605      	mov	r5, r0
     4ea:	2800      	cmp	r0, #0
     4ec:	d0c1      	beq.n	472 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4ee:	f041 0120 	orr.w	r1, r1, #32
     4f2:	8321      	strh	r1, [r4, #24]
     4f4:	2500      	movs	r5, #0
     4f6:	e7bc      	b.n	472 <process_event+0x5e>
		} else if (evt == EVT_START) {
     4f8:	2803      	cmp	r0, #3
     4fa:	d109      	bne.n	510 <process_event+0xfc>
			transit = mgr->transitions->start;
     4fc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4fe:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     502:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     504:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     508:	8323      	strh	r3, [r4, #24]
}
     50a:	2500      	movs	r5, #0
		res = 0;
     50c:	462f      	mov	r7, r5
     50e:	e7b1      	b.n	474 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     510:	2804      	cmp	r0, #4
     512:	d106      	bne.n	522 <process_event+0x10e>
			transit = mgr->transitions->stop;
     514:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     516:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     51a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     51c:	f043 0304 	orr.w	r3, r3, #4
     520:	e7f2      	b.n	508 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     522:	2805      	cmp	r0, #5
     524:	d106      	bne.n	534 <process_event+0x120>
			transit = mgr->transitions->reset;
     526:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     528:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     52c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     52e:	f043 0305 	orr.w	r3, r3, #5
     532:	e7e9      	b.n	508 <process_event+0xf4>
     534:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     536:	462e      	mov	r6, r5
     538:	e7e8      	b.n	50c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     53a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     53c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     540:	8321      	strh	r1, [r4, #24]
     542:	f38b 8811 	msr	BASEPRI, fp
     546:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     54a:	b9fb      	cbnz	r3, 58c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     54c:	bb85      	cbnz	r5, 5b0 <process_event+0x19c>
			if (transit != NULL) {
     54e:	b116      	cbz	r6, 556 <process_event+0x142>
				transit(mgr, transition_complete);
     550:	491f      	ldr	r1, [pc, #124]	; (5d0 <process_event+0x1bc>)
     552:	4620      	mov	r0, r4
     554:	47b0      	blx	r6
	__asm__ volatile(
     556:	f04f 0320 	mov.w	r3, #32
     55a:	f3ef 8b11 	mrs	fp, BASEPRI
     55e:	f383 8812 	msr	BASEPRI_MAX, r3
     562:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     566:	8b23      	ldrh	r3, [r4, #24]
     568:	f023 0308 	bic.w	r3, r3, #8
     56c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     56e:	8b23      	ldrh	r3, [r4, #24]
     570:	06da      	lsls	r2, r3, #27
     572:	d525      	bpl.n	5c0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     574:	f023 0310 	bic.w	r3, r3, #16
     578:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     57a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     57c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     580:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     584:	2900      	cmp	r1, #0
     586:	f47f af5e 	bne.w	446 <process_event+0x32>
out:
     58a:	e754      	b.n	436 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     58c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     58e:	2900      	cmp	r1, #0
     590:	d0dc      	beq.n	54c <process_event+0x138>
	return node->next;
     592:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     596:	f8d1 b004 	ldr.w	fp, [r1, #4]
     59a:	463b      	mov	r3, r7
     59c:	4652      	mov	r2, sl
     59e:	4620      	mov	r0, r4
     5a0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5a2:	f1b9 0f00 	cmp.w	r9, #0
     5a6:	d0d1      	beq.n	54c <process_event+0x138>
     5a8:	4649      	mov	r1, r9
     5aa:	f8d9 9000 	ldr.w	r9, [r9]
     5ae:	e7f2      	b.n	596 <process_event+0x182>
     5b0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     5b2:	463b      	mov	r3, r7
     5b4:	4652      	mov	r2, sl
     5b6:	4620      	mov	r0, r4
     5b8:	682d      	ldr	r5, [r5, #0]
     5ba:	f003 fdfd 	bl	41b8 <notify_one>
     5be:	e7c5      	b.n	54c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5c0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5c4:	bf1e      	ittt	ne
     5c6:	f023 0320 	bicne.w	r3, r3, #32
     5ca:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     5cc:	2102      	movne	r1, #2
     5ce:	e7d5      	b.n	57c <process_event+0x168>
     5d0:	000041e5 	.word	0x000041e5

000005d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d8:	b091      	sub	sp, #68	; 0x44
     5da:	468b      	mov	fp, r1
     5dc:	9002      	str	r0, [sp, #8]
     5de:	4692      	mov	sl, r2
     5e0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     5e2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5e4:	f89a 0000 	ldrb.w	r0, [sl]
     5e8:	b908      	cbnz	r0, 5ee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     5ea:	4628      	mov	r0, r5
     5ec:	e35f      	b.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
		if (*fp != '%') {
     5ee:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     5f0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     5f4:	d007      	beq.n	606 <cbvprintf+0x32>
			OUTC('%');
     5f6:	9b02      	ldr	r3, [sp, #8]
     5f8:	4659      	mov	r1, fp
     5fa:	4798      	blx	r3
     5fc:	2800      	cmp	r0, #0
     5fe:	f2c0 8356 	blt.w	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     602:	3501      	adds	r5, #1
			break;
     604:	e212      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
		} state = {
     606:	2218      	movs	r2, #24
     608:	2100      	movs	r1, #0
     60a:	a80a      	add	r0, sp, #40	; 0x28
     60c:	f003 ff62 	bl	44d4 <memset>
	if (*sp == '%') {
     610:	f89a 3001 	ldrb.w	r3, [sl, #1]
     614:	2b25      	cmp	r3, #37	; 0x25
     616:	d078      	beq.n	70a <cbvprintf+0x136>
     618:	2200      	movs	r2, #0
     61a:	4610      	mov	r0, r2
     61c:	4696      	mov	lr, r2
     61e:	4694      	mov	ip, r2
     620:	4616      	mov	r6, r2
     622:	4639      	mov	r1, r7
		switch (*sp) {
     624:	f817 3b01 	ldrb.w	r3, [r7], #1
     628:	2b2b      	cmp	r3, #43	; 0x2b
     62a:	f000 809d 	beq.w	768 <cbvprintf+0x194>
     62e:	f200 8094 	bhi.w	75a <cbvprintf+0x186>
     632:	2b20      	cmp	r3, #32
     634:	f000 809b 	beq.w	76e <cbvprintf+0x19a>
     638:	2b23      	cmp	r3, #35	; 0x23
     63a:	f000 809b 	beq.w	774 <cbvprintf+0x1a0>
     63e:	b12e      	cbz	r6, 64c <cbvprintf+0x78>
     640:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     644:	f046 0604 	orr.w	r6, r6, #4
     648:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     64c:	f1bc 0f00 	cmp.w	ip, #0
     650:	d005      	beq.n	65e <cbvprintf+0x8a>
     652:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     656:	f046 0608 	orr.w	r6, r6, #8
     65a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     65e:	f1be 0f00 	cmp.w	lr, #0
     662:	d005      	beq.n	670 <cbvprintf+0x9c>
     664:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     668:	f046 0610 	orr.w	r6, r6, #16
     66c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     670:	b128      	cbz	r0, 67e <cbvprintf+0xaa>
     672:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     676:	f040 0020 	orr.w	r0, r0, #32
     67a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     67e:	b12a      	cbz	r2, 68c <cbvprintf+0xb8>
     680:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     688:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     68c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     690:	f002 0044 	and.w	r0, r2, #68	; 0x44
     694:	2844      	cmp	r0, #68	; 0x44
     696:	d103      	bne.n	6a0 <cbvprintf+0xcc>
		conv->flag_zero = false;
     698:	f36f 1286 	bfc	r2, #6, #1
     69c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     6a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6a4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     6a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     6aa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6ae:	d17b      	bne.n	7a8 <cbvprintf+0x1d4>
		conv->width_star = true;
     6b0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6b4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     6b8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     6ba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     6be:	781a      	ldrb	r2, [r3, #0]
     6c0:	2a2e      	cmp	r2, #46	; 0x2e
     6c2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6c6:	bf0c      	ite	eq
     6c8:	2101      	moveq	r1, #1
     6ca:	2100      	movne	r1, #0
     6cc:	f361 0241 	bfi	r2, r1, #1, #1
     6d0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     6d4:	d174      	bne.n	7c0 <cbvprintf+0x1ec>
	if (*sp == '*') {
     6d6:	785a      	ldrb	r2, [r3, #1]
     6d8:	2a2a      	cmp	r2, #42	; 0x2a
     6da:	d06a      	beq.n	7b2 <cbvprintf+0x1de>
	++sp;
     6dc:	3301      	adds	r3, #1
	size_t val = 0;
     6de:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     6e0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     6e2:	4618      	mov	r0, r3
     6e4:	f810 2b01 	ldrb.w	r2, [r0], #1
     6e8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     6ec:	2f09      	cmp	r7, #9
     6ee:	f240 808e 	bls.w	80e <CONFIG_ISR_STACK_SIZE+0xe>
	conv->unsupported |= ((conv->prec_value < 0)
     6f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     6f6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     6f8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     6fc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     700:	f361 0241 	bfi	r2, r1, #1, #1
     704:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     708:	e05a      	b.n	7c0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     70a:	f10a 0702 	add.w	r7, sl, #2
     70e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     712:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     716:	07d9      	lsls	r1, r3, #31
     718:	f140 8149 	bpl.w	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
			width = va_arg(ap, int);
     71c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     720:	f1b9 0f00 	cmp.w	r9, #0
     724:	da07      	bge.n	736 <cbvprintf+0x162>
				conv->flag_dash = true;
     726:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     72a:	f042 0204 	orr.w	r2, r2, #4
     72e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     732:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     736:	075a      	lsls	r2, r3, #29
     738:	f140 8142 	bpl.w	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
			int arg = va_arg(ap, int);
     73c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     740:	f1b8 0f00 	cmp.w	r8, #0
     744:	f280 8141 	bge.w	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
				conv->prec_present = false;
     748:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     74c:	f36f 0341 	bfc	r3, #1, #1
     750:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     754:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     758:	e137      	b.n	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
		switch (*sp) {
     75a:	2b2d      	cmp	r3, #45	; 0x2d
     75c:	d00c      	beq.n	778 <cbvprintf+0x1a4>
     75e:	2b30      	cmp	r3, #48	; 0x30
     760:	f47f af6d 	bne.w	63e <cbvprintf+0x6a>
			conv->flag_zero = true;
     764:	2201      	movs	r2, #1
	} while (loop);
     766:	e75c      	b.n	622 <cbvprintf+0x4e>
			conv->flag_plus = true;
     768:	f04f 0c01 	mov.w	ip, #1
     76c:	e759      	b.n	622 <cbvprintf+0x4e>
			conv->flag_space = true;
     76e:	f04f 0e01 	mov.w	lr, #1
     772:	e756      	b.n	622 <cbvprintf+0x4e>
			conv->flag_hash = true;
     774:	2001      	movs	r0, #1
     776:	e754      	b.n	622 <cbvprintf+0x4e>
		switch (*sp) {
     778:	2601      	movs	r6, #1
     77a:	e752      	b.n	622 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     77c:	fb0c 0202 	mla	r2, ip, r2, r0
     780:	3a30      	subs	r2, #48	; 0x30
     782:	4633      	mov	r3, r6
     784:	461e      	mov	r6, r3
     786:	f816 0b01 	ldrb.w	r0, [r6], #1
     78a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     78e:	2f09      	cmp	r7, #9
     790:	d9f4      	bls.n	77c <cbvprintf+0x1a8>
	if (sp != wp) {
     792:	4299      	cmp	r1, r3
     794:	d093      	beq.n	6be <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     796:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     79a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     79c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     79e:	f362 0141 	bfi	r1, r2, #1, #1
     7a2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     7a6:	e78a      	b.n	6be <cbvprintf+0xea>
     7a8:	460b      	mov	r3, r1
	size_t val = 0;
     7aa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7ac:	f04f 0c0a 	mov.w	ip, #10
     7b0:	e7e8      	b.n	784 <cbvprintf+0x1b0>
		conv->prec_star = true;
     7b2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7b6:	f042 0204 	orr.w	r2, r2, #4
     7ba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     7be:	3302      	adds	r3, #2
	switch (*sp) {
     7c0:	461f      	mov	r7, r3
     7c2:	f817 2b01 	ldrb.w	r2, [r7], #1
     7c6:	2a6c      	cmp	r2, #108	; 0x6c
     7c8:	d041      	beq.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     7ca:	d825      	bhi.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
     7cc:	2a68      	cmp	r2, #104	; 0x68
     7ce:	d02b      	beq.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     7d0:	2a6a      	cmp	r2, #106	; 0x6a
     7d2:	d046      	beq.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     7d4:	2a4c      	cmp	r2, #76	; 0x4c
     7d6:	d04c      	beq.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
     7d8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     7da:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     7de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     7e2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     7e6:	2a78      	cmp	r2, #120	; 0x78
     7e8:	f200 80d9 	bhi.w	99e <CONFIG_ISR_STACK_SIZE+0x19e>
     7ec:	2a57      	cmp	r2, #87	; 0x57
     7ee:	d84d      	bhi.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     7f0:	2a41      	cmp	r2, #65	; 0x41
     7f2:	d003      	beq.n	7fc <cbvprintf+0x228>
     7f4:	3a45      	subs	r2, #69	; 0x45
     7f6:	2a02      	cmp	r2, #2
     7f8:	f200 80d1 	bhi.w	99e <CONFIG_ISR_STACK_SIZE+0x19e>
		conv->specifier_cat = SPECIFIER_FP;
     7fc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     800:	2204      	movs	r2, #4
     802:	f362 0302 	bfi	r3, r2, #0, #3
     806:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     80a:	2301      	movs	r3, #1
			break;
     80c:	e09e      	b.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
		val = 10U * val + *sp++ - '0';
     80e:	fb06 2101 	mla	r1, r6, r1, r2
     812:	3930      	subs	r1, #48	; 0x30
     814:	4603      	mov	r3, r0
     816:	e764      	b.n	6e2 <cbvprintf+0x10e>
	switch (*sp) {
     818:	2a74      	cmp	r2, #116	; 0x74
     81a:	d026      	beq.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
     81c:	2a7a      	cmp	r2, #122	; 0x7a
     81e:	d1db      	bne.n	7d8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     820:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     824:	2206      	movs	r2, #6
     826:	e00d      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		if (*++sp == 'h') {
     828:	785a      	ldrb	r2, [r3, #1]
     82a:	2a68      	cmp	r2, #104	; 0x68
     82c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     830:	d106      	bne.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			conv->length_mod = LENGTH_HH;
     832:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     834:	f361 02c6 	bfi	r2, r1, #3, #4
     838:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     83c:	1c9f      	adds	r7, r3, #2
     83e:	e7cc      	b.n	7da <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     840:	4613      	mov	r3, r2
     842:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     844:	f362 03c6 	bfi	r3, r2, #3, #4
     848:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     84c:	e7c5      	b.n	7da <cbvprintf+0x206>
		if (*++sp == 'l') {
     84e:	785a      	ldrb	r2, [r3, #1]
     850:	2a6c      	cmp	r2, #108	; 0x6c
     852:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     856:	d101      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
			conv->length_mod = LENGTH_LL;
     858:	2104      	movs	r1, #4
     85a:	e7eb      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
			conv->length_mod = LENGTH_L;
     85c:	4613      	mov	r3, r2
     85e:	2203      	movs	r2, #3
     860:	e7f0      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		conv->length_mod = LENGTH_J;
     862:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     866:	2205      	movs	r2, #5
     868:	e7ec      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		conv->length_mod = LENGTH_T;
     86a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     86e:	2207      	movs	r2, #7
     870:	e7e8      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		conv->unsupported = true;
     872:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     876:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     87a:	f023 0302 	bic.w	r3, r3, #2
     87e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     882:	f043 0302 	orr.w	r3, r3, #2
     886:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     88a:	e7a6      	b.n	7da <cbvprintf+0x206>
	switch (conv->specifier) {
     88c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     890:	2920      	cmp	r1, #32
     892:	f200 8084 	bhi.w	99e <CONFIG_ISR_STACK_SIZE+0x19e>
     896:	a001      	add	r0, pc, #4	; (adr r0, 89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     898:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     89c:	00000961 	.word	0x00000961
     8a0:	0000099f 	.word	0x0000099f
     8a4:	0000099f 	.word	0x0000099f
     8a8:	0000099f 	.word	0x0000099f
     8ac:	0000099f 	.word	0x0000099f
     8b0:	0000099f 	.word	0x0000099f
     8b4:	0000099f 	.word	0x0000099f
     8b8:	0000099f 	.word	0x0000099f
     8bc:	0000099f 	.word	0x0000099f
     8c0:	000007fd 	.word	0x000007fd
     8c4:	0000099f 	.word	0x0000099f
     8c8:	00000961 	.word	0x00000961
     8cc:	00000921 	.word	0x00000921
     8d0:	000007fd 	.word	0x000007fd
     8d4:	000007fd 	.word	0x000007fd
     8d8:	000007fd 	.word	0x000007fd
     8dc:	0000099f 	.word	0x0000099f
     8e0:	00000921 	.word	0x00000921
     8e4:	0000099f 	.word	0x0000099f
     8e8:	0000099f 	.word	0x0000099f
     8ec:	0000099f 	.word	0x0000099f
     8f0:	0000099f 	.word	0x0000099f
     8f4:	00000969 	.word	0x00000969
     8f8:	00000961 	.word	0x00000961
     8fc:	00000985 	.word	0x00000985
     900:	0000099f 	.word	0x0000099f
     904:	0000099f 	.word	0x0000099f
     908:	00000985 	.word	0x00000985
     90c:	0000099f 	.word	0x0000099f
     910:	00000961 	.word	0x00000961
     914:	0000099f 	.word	0x0000099f
     918:	0000099f 	.word	0x0000099f
     91c:	00000961 	.word	0x00000961
		conv->specifier_cat = SPECIFIER_SINT;
     920:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     924:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     926:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     92a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     92e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     930:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     934:	bf02      	ittt	eq
     936:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     93a:	f041 0101 	orreq.w	r1, r1, #1
     93e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     942:	2a63      	cmp	r2, #99	; 0x63
     944:	d131      	bne.n	9aa <CONFIG_ISR_STACK_SIZE+0x1aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
     946:	3b00      	subs	r3, #0
     948:	bf18      	it	ne
     94a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     94c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     950:	f3c2 0140 	ubfx	r1, r2, #1, #1
     954:	430b      	orrs	r3, r1
     956:	f363 0241 	bfi	r2, r3, #1, #1
     95a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     95e:	e6d8      	b.n	712 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     960:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     964:	2002      	movs	r0, #2
     966:	e7de      	b.n	926 <CONFIG_ISR_STACK_SIZE+0x126>
		conv->specifier_cat = SPECIFIER_PTR;
     968:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     96c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     970:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     974:	2103      	movs	r1, #3
     976:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     97a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     97c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     980:	4143      	adcs	r3, r0
     982:	e7e3      	b.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
		conv->specifier_cat = SPECIFIER_PTR;
     984:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     988:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     98a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     98e:	f361 0202 	bfi	r2, r1, #0, #3
     992:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     996:	bf14      	ite	ne
     998:	2301      	movne	r3, #1
     99a:	2300      	moveq	r3, #0
     99c:	e7d6      	b.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
		conv->invalid = true;
     99e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9a2:	f043 0301 	orr.w	r3, r3, #1
     9a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     9aa:	2300      	movs	r3, #0
     9ac:	e7ce      	b.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
		} else if (conv->width_present) {
     9ae:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     9b2:	2a00      	cmp	r2, #0
			width = conv->width_value;
     9b4:	bfb4      	ite	lt
     9b6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     9ba:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     9be:	e6ba      	b.n	736 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     9c0:	079b      	lsls	r3, r3, #30
     9c2:	f57f aec7 	bpl.w	754 <cbvprintf+0x180>
			precision = conv->prec_value;
     9c6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     9ca:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     9ce:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     9d0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     9d4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     9d8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     9dc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     9de:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     9e2:	d138      	bne.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
			switch (length_mod) {
     9e4:	1ecb      	subs	r3, r1, #3
     9e6:	2b04      	cmp	r3, #4
     9e8:	d822      	bhi.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
     9ea:	e8df f003 	tbb	[pc, r3]
     9ee:	0903      	.short	0x0903
     9f0:	2109      	.short	0x2109
     9f2:	21          	.byte	0x21
     9f3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     9f4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     9f8:	17da      	asrs	r2, r3, #31
     9fa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     9fe:	e006      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
					(sint_value_type)va_arg(ap, intmax_t);
     a00:	3407      	adds	r4, #7
     a02:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a06:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     a0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a0e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a12:	f013 0603 	ands.w	r6, r3, #3
     a16:	d056      	beq.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
			OUTS(sp, fp);
     a18:	9802      	ldr	r0, [sp, #8]
     a1a:	463b      	mov	r3, r7
     a1c:	4652      	mov	r2, sl
     a1e:	4659      	mov	r1, fp
     a20:	f003 fcfa 	bl	4418 <outs>
     a24:	2800      	cmp	r0, #0
     a26:	f2c0 8142 	blt.w	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     a2a:	4405      	add	r5, r0
			continue;
     a2c:	46ba      	mov	sl, r7
     a2e:	e5d9      	b.n	5e4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a30:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a34:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a36:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a3a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a3e:	d105      	bne.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
				value->uint = (unsigned char)value->uint;
     a40:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a44:	930a      	str	r3, [sp, #40]	; 0x28
     a46:	2300      	movs	r3, #0
     a48:	930b      	str	r3, [sp, #44]	; 0x2c
     a4a:	e7e0      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
			} else if (length_mod == LENGTH_H) {
     a4c:	2902      	cmp	r1, #2
     a4e:	d1de      	bne.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
				value->sint = (short)value->sint;
     a50:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     a54:	e7d0      	b.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a56:	2b02      	cmp	r3, #2
     a58:	d123      	bne.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
			switch (length_mod) {
     a5a:	1ecb      	subs	r3, r1, #3
     a5c:	2b04      	cmp	r3, #4
     a5e:	d813      	bhi.n	a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a60:	e8df f003 	tbb	[pc, r3]
     a64:	120a0a03 	.word	0x120a0a03
     a68:	12          	.byte	0x12
     a69:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     a6a:	6822      	ldr	r2, [r4, #0]
     a6c:	920a      	str	r2, [sp, #40]	; 0x28
     a6e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     a70:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     a72:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a74:	4604      	mov	r4, r0
     a76:	e7ca      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
					(uint_value_type)va_arg(ap,
     a78:	1de0      	adds	r0, r4, #7
     a7a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     a7e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     a82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     a86:	e7f5      	b.n	a74 <CONFIG_ISR_STACK_SIZE+0x274>
					(uint_value_type)va_arg(ap, size_t);
     a88:	f854 3b04 	ldr.w	r3, [r4], #4
     a8c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a8e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     a90:	f04f 0300 	mov.w	r3, #0
     a94:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a96:	d0d3      	beq.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
			} else if (length_mod == LENGTH_H) {
     a98:	2902      	cmp	r1, #2
     a9a:	d1b8      	bne.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
				value->uint = (unsigned short)value->uint;
     a9c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     aa0:	e7d0      	b.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
		} else if (specifier_cat == SPECIFIER_FP) {
     aa2:	2b04      	cmp	r3, #4
     aa4:	d109      	bne.n	aba <CONFIG_ISR_STACK_SIZE+0x2ba>
					(sint_value_type)va_arg(ap, long long);
     aa6:	1de3      	adds	r3, r4, #7
     aa8:	f023 0307 	bic.w	r3, r3, #7
     aac:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ab4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     ab8:	e7a9      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     aba:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     abc:	bf04      	itt	eq
     abe:	f854 3b04 	ldreq.w	r3, [r4], #4
     ac2:	930a      	streq	r3, [sp, #40]	; 0x28
     ac4:	e7a3      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
		switch (conv->specifier) {
     ac6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     aca:	2878      	cmp	r0, #120	; 0x78
     acc:	d8ae      	bhi.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
     ace:	2862      	cmp	r0, #98	; 0x62
     ad0:	d822      	bhi.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
     ad2:	2825      	cmp	r0, #37	; 0x25
     ad4:	f43f ad8f 	beq.w	5f6 <cbvprintf+0x22>
     ad8:	2858      	cmp	r0, #88	; 0x58
     ada:	d1a7      	bne.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
			bps = encode_uint(value->uint, conv, buf, bpe);
     adc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ae0:	9300      	str	r3, [sp, #0]
     ae2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     ae6:	ab04      	add	r3, sp, #16
     ae8:	aa0c      	add	r2, sp, #48	; 0x30
     aea:	f003 fc4f 	bl	438c <encode_uint>
     aee:	4682      	mov	sl, r0
			if (precision >= 0) {
     af0:	f1b8 0f00 	cmp.w	r8, #0
     af4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     af8:	db0c      	blt.n	b14 <CONFIG_ISR_STACK_SIZE+0x314>
				conv->flag_zero = false;
     afa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     afe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b02:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b06:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b0c:	d902      	bls.n	b14 <CONFIG_ISR_STACK_SIZE+0x314>
					conv->pad0_value = precision - (int)len;
     b0e:	eba8 0303 	sub.w	r3, r8, r3
     b12:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b14:	4680      	mov	r8, r0
     b16:	e03d      	b.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
		switch (conv->specifier) {
     b18:	3863      	subs	r0, #99	; 0x63
     b1a:	2815      	cmp	r0, #21
     b1c:	d886      	bhi.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
     b1e:	a201      	add	r2, pc, #4	; (adr r2, b24 <CONFIG_ISR_STACK_SIZE+0x324>)
     b20:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     b24:	00000ba5 	.word	0x00000ba5
     b28:	00000c09 	.word	0x00000c09
     b2c:	00000a2d 	.word	0x00000a2d
     b30:	00000a2d 	.word	0x00000a2d
     b34:	00000a2d 	.word	0x00000a2d
     b38:	00000a2d 	.word	0x00000a2d
     b3c:	00000c09 	.word	0x00000c09
     b40:	00000a2d 	.word	0x00000a2d
     b44:	00000a2d 	.word	0x00000a2d
     b48:	00000a2d 	.word	0x00000a2d
     b4c:	00000a2d 	.word	0x00000a2d
     b50:	00000c63 	.word	0x00000c63
     b54:	00000c31 	.word	0x00000c31
     b58:	00000c35 	.word	0x00000c35
     b5c:	00000a2d 	.word	0x00000a2d
     b60:	00000a2d 	.word	0x00000a2d
     b64:	00000b7d 	.word	0x00000b7d
     b68:	00000a2d 	.word	0x00000a2d
     b6c:	00000c31 	.word	0x00000c31
     b70:	00000a2d 	.word	0x00000a2d
     b74:	00000a2d 	.word	0x00000a2d
     b78:	00000c31 	.word	0x00000c31
			if (precision >= 0) {
     b7c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b84:	db0a      	blt.n	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
				len = strnlen(bps, precision);
     b86:	4641      	mov	r1, r8
     b88:	4650      	mov	r0, sl
     b8a:	f003 fc83 	bl	4494 <strnlen>
			bpe = bps + len;
     b8e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     b92:	2600      	movs	r6, #0
		if (bps == NULL) {
     b94:	f1ba 0f00 	cmp.w	sl, #0
     b98:	d10c      	bne.n	bb4 <CONFIG_ISR_STACK_SIZE+0x3b4>
     b9a:	e747      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
				len = strlen(bps);
     b9c:	4650      	mov	r0, sl
     b9e:	f003 fc72 	bl	4486 <strlen>
     ba2:	e7f4      	b.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ba6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     baa:	2600      	movs	r6, #0
			bps = buf;
     bac:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     bb0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     bb4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     bb8:	b106      	cbz	r6, bbc <CONFIG_ISR_STACK_SIZE+0x3bc>
			nj_len += 1U;
     bba:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     bbc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     bc0:	06d0      	lsls	r0, r2, #27
     bc2:	d568      	bpl.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
			nj_len += 2U;
     bc4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     bc6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     bc8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     bca:	bf48      	it	mi
     bcc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     bce:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     bd0:	bf48      	it	mi
     bd2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     bd4:	f1b9 0f00 	cmp.w	r9, #0
     bd8:	dd76      	ble.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
			if (!conv->flag_dash) {
     bda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     bde:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     be2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     be6:	9303      	str	r3, [sp, #12]
     be8:	0753      	lsls	r3, r2, #29
     bea:	d46d      	bmi.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
				if (conv->flag_zero) {
     bec:	0650      	lsls	r0, r2, #25
     bee:	d561      	bpl.n	cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>
					if (sign != 0) {
     bf0:	b146      	cbz	r6, c04 <CONFIG_ISR_STACK_SIZE+0x404>
						OUTC(sign);
     bf2:	9b02      	ldr	r3, [sp, #8]
     bf4:	4659      	mov	r1, fp
     bf6:	4630      	mov	r0, r6
     bf8:	4798      	blx	r3
     bfa:	2800      	cmp	r0, #0
     bfc:	db57      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
						sign = 0;
     bfe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c00:	3501      	adds	r5, #1
						sign = 0;
     c02:	461e      	mov	r6, r3
					pad = '0';
     c04:	2330      	movs	r3, #48	; 0x30
     c06:	e056      	b.n	cb6 <CONFIG_ISR_STACK_SIZE+0x4b6>
			if (conv->flag_plus) {
     c08:	071e      	lsls	r6, r3, #28
     c0a:	d40f      	bmi.n	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
				sign = ' ';
     c0c:	f013 0610 	ands.w	r6, r3, #16
     c10:	bf18      	it	ne
     c12:	2620      	movne	r6, #32
			sint = value->sint;
     c14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     c18:	2b00      	cmp	r3, #0
     c1a:	f6bf af5f 	bge.w	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
				value->uint = (uint_value_type)-sint;
     c1e:	4252      	negs	r2, r2
     c20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c28:	262d      	movs	r6, #45	; 0x2d
     c2a:	e757      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
				sign = '+';
     c2c:	262b      	movs	r6, #43	; 0x2b
     c2e:	e7f1      	b.n	c14 <CONFIG_ISR_STACK_SIZE+0x414>
		switch (conv->specifier) {
     c30:	2600      	movs	r6, #0
     c32:	e753      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
			if (value->ptr != NULL) {
     c34:	980a      	ldr	r0, [sp, #40]	; 0x28
     c36:	b340      	cbz	r0, c8a <CONFIG_ISR_STACK_SIZE+0x48a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c38:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c3c:	9300      	str	r3, [sp, #0]
     c3e:	aa0c      	add	r2, sp, #48	; 0x30
     c40:	ab04      	add	r3, sp, #16
     c42:	2100      	movs	r1, #0
     c44:	f003 fba2 	bl	438c <encode_uint>
				conv->altform_0c = true;
     c48:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     c4c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c50:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c54:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c58:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c5a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     c5e:	2600      	movs	r6, #0
				goto prec_int_pad0;
     c60:	e746      	b.n	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
				store_count(conv, value->ptr, count);
     c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c64:	2907      	cmp	r1, #7
     c66:	f63f aee1 	bhi.w	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
     c6a:	e8df f001 	tbb	[pc, r1]
     c6e:	040c      	.short	0x040c
     c70:	08080c06 	.word	0x08080c06
     c74:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     c76:	701d      	strb	r5, [r3, #0]
		break;
     c78:	e6d8      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
		*(short *)dp = (short)count;
     c7a:	801d      	strh	r5, [r3, #0]
		break;
     c7c:	e6d6      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
		*(intmax_t *)dp = (intmax_t)count;
     c7e:	17ea      	asrs	r2, r5, #31
     c80:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     c84:	e6d2      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c86:	601d      	str	r5, [r3, #0]
		break;
     c88:	e6d0      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
			bps = "(nil)";
     c8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d54 <CONFIG_ISR_STACK_SIZE+0x554>
     c8e:	4606      	mov	r6, r0
			bpe = bps + 5;
     c90:	f10a 0805 	add.w	r8, sl, #5
     c94:	e78e      	b.n	bb4 <CONFIG_ISR_STACK_SIZE+0x3b4>
		} else if (conv->altform_0) {
     c96:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     c98:	bf48      	it	mi
     c9a:	3301      	addmi	r3, #1
     c9c:	e793      	b.n	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
					OUTC(pad);
     c9e:	4618      	mov	r0, r3
     ca0:	9303      	str	r3, [sp, #12]
     ca2:	4659      	mov	r1, fp
     ca4:	9b02      	ldr	r3, [sp, #8]
     ca6:	4798      	blx	r3
     ca8:	2800      	cmp	r0, #0
     caa:	9b03      	ldr	r3, [sp, #12]
     cac:	da04      	bge.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
#undef OUTS
#undef OUTC
}
     cae:	b011      	add	sp, #68	; 0x44
     cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     cb4:	2320      	movs	r3, #32
     cb6:	444d      	add	r5, r9
     cb8:	464a      	mov	r2, r9
				while (width-- > 0) {
     cba:	2a00      	cmp	r2, #0
     cbc:	eba5 0109 	sub.w	r1, r5, r9
     cc0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     cc4:	dceb      	bgt.n	c9e <CONFIG_ISR_STACK_SIZE+0x49e>
     cc6:	460d      	mov	r5, r1
		if (sign != 0) {
     cc8:	b136      	cbz	r6, cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
			OUTC(sign);
     cca:	9b02      	ldr	r3, [sp, #8]
     ccc:	4659      	mov	r1, fp
     cce:	4630      	mov	r0, r6
     cd0:	4798      	blx	r3
     cd2:	2800      	cmp	r0, #0
     cd4:	dbeb      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     cd6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     cd8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cdc:	06d9      	lsls	r1, r3, #27
     cde:	d401      	bmi.n	ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
     ce0:	071a      	lsls	r2, r3, #28
     ce2:	d506      	bpl.n	cf2 <CONFIG_ISR_STACK_SIZE+0x4f2>
				OUTC('0');
     ce4:	9b02      	ldr	r3, [sp, #8]
     ce6:	4659      	mov	r1, fp
     ce8:	2030      	movs	r0, #48	; 0x30
     cea:	4798      	blx	r3
     cec:	2800      	cmp	r0, #0
     cee:	dbde      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     cf0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     cf2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cf6:	06db      	lsls	r3, r3, #27
     cf8:	d507      	bpl.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
				OUTC(conv->specifier);
     cfa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cfe:	9b02      	ldr	r3, [sp, #8]
     d00:	4659      	mov	r1, fp
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	dbd2      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     d08:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d0a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d0c:	442e      	add	r6, r5
     d0e:	1b73      	subs	r3, r6, r5
     d10:	2b00      	cmp	r3, #0
     d12:	dc16      	bgt.n	d42 <CONFIG_ISR_STACK_SIZE+0x542>
			OUTS(bps, bpe);
     d14:	9802      	ldr	r0, [sp, #8]
     d16:	4643      	mov	r3, r8
     d18:	4652      	mov	r2, sl
     d1a:	4659      	mov	r1, fp
     d1c:	f003 fb7c 	bl	4418 <outs>
     d20:	2800      	cmp	r0, #0
     d22:	dbc4      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     d24:	4405      	add	r5, r0
		while (width > 0) {
     d26:	44a9      	add	r9, r5
     d28:	eba9 0305 	sub.w	r3, r9, r5
     d2c:	2b00      	cmp	r3, #0
     d2e:	f77f ae7d 	ble.w	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
			OUTC(' ');
     d32:	9b02      	ldr	r3, [sp, #8]
     d34:	4659      	mov	r1, fp
     d36:	2020      	movs	r0, #32
     d38:	4798      	blx	r3
     d3a:	2800      	cmp	r0, #0
     d3c:	dbb7      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     d3e:	3501      	adds	r5, #1
			--width;
     d40:	e7f2      	b.n	d28 <CONFIG_ISR_STACK_SIZE+0x528>
				OUTC('0');
     d42:	9b02      	ldr	r3, [sp, #8]
     d44:	4659      	mov	r1, fp
     d46:	2030      	movs	r0, #48	; 0x30
     d48:	4798      	blx	r3
     d4a:	2800      	cmp	r0, #0
     d4c:	dbaf      	blt.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     d4e:	3501      	adds	r5, #1
     d50:	e7dd      	b.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
     d52:	bf00      	nop
     d54:	000057f9 	.word	0x000057f9

00000d58 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d5a:	4605      	mov	r5, r0
     d5c:	f04f 0320 	mov.w	r3, #32
     d60:	f3ef 8611 	mrs	r6, BASEPRI
     d64:	f383 8812 	msr	BASEPRI_MAX, r3
     d68:	f3bf 8f6f 	isb	sy
	return list->head;
     d6c:	4b09      	ldr	r3, [pc, #36]	; (d94 <pm_state_notify+0x3c>)
     d6e:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     d70:	b15c      	cbz	r4, d8a <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
     d72:	4f09      	ldr	r7, [pc, #36]	; (d98 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
     d74:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     d78:	2d00      	cmp	r5, #0
     d7a:	bf08      	it	eq
     d7c:	4613      	moveq	r3, r2
		if (callback) {
     d7e:	b10b      	cbz	r3, d84 <pm_state_notify+0x2c>
			callback(z_power_state.state);
     d80:	7838      	ldrb	r0, [r7, #0]
     d82:	4798      	blx	r3
	return node->next;
     d84:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     d86:	2c00      	cmp	r4, #0
     d88:	d1f4      	bne.n	d74 <pm_state_notify+0x1c>
	__asm__ volatile(
     d8a:	f386 8811 	msr	BASEPRI, r6
     d8e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d94:	20000398 	.word	0x20000398
     d98:	200003a0 	.word	0x200003a0

00000d9c <pm_system_resume>:

void pm_system_resume(void)
{
     d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
     d9e:	4b0f      	ldr	r3, [pc, #60]	; (ddc <pm_system_resume+0x40>)
     da0:	681a      	ldr	r2, [r3, #0]
     da2:	b9ba      	cbnz	r2, dd4 <pm_system_resume+0x38>
		post_ops_done = 1;
     da4:	2201      	movs	r2, #1
     da6:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
     da8:	4a0d      	ldr	r2, [pc, #52]	; (de0 <pm_system_resume+0x44>)
     daa:	ca07      	ldmia	r2, {r0, r1, r2}
     dac:	ab01      	add	r3, sp, #4
     dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     db2:	4a0c      	ldr	r2, [pc, #48]	; (de4 <pm_system_resume+0x48>)
     db4:	b14a      	cbz	r2, dca <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
     db6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     dba:	f003 fbaa 	bl	4512 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     dbe:	2000      	movs	r0, #0
	}
}
     dc0:	b005      	add	sp, #20
     dc2:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
     dc6:	f7ff bfc7 	b.w	d58 <pm_state_notify>
     dca:	f382 8811 	msr	BASEPRI, r2
     dce:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     dd2:	e7f4      	b.n	dbe <pm_system_resume+0x22>
}
     dd4:	b005      	add	sp, #20
     dd6:	f85d fb04 	ldr.w	pc, [sp], #4
     dda:	bf00      	nop
     ddc:	20000004 	.word	0x20000004
     de0:	200003a0 	.word	0x200003a0
     de4:	00004513 	.word	0x00004513

00000de8 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
     de8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dea:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
     dec:	466e      	mov	r6, sp
     dee:	4601      	mov	r1, r0
{
     df0:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
     df2:	4630      	mov	r0, r6
     df4:	f003 fb27 	bl	4446 <pm_policy_next_state>
     df8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     dfc:	4c17      	ldr	r4, [pc, #92]	; (e5c <pm_system_suspend+0x74>)
     dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
     e02:	7820      	ldrb	r0, [r4, #0]
     e04:	4627      	mov	r7, r4
     e06:	b338      	cbz	r0, e58 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
     e08:	4b15      	ldr	r3, [pc, #84]	; (e60 <pm_system_suspend+0x78>)
     e0a:	2100      	movs	r1, #0
     e0c:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
     e0e:	1c6b      	adds	r3, r5, #1
     e10:	d00d      	beq.n	e2e <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     e12:	4814      	ldr	r0, [pc, #80]	; (e64 <pm_system_suspend+0x7c>)
     e14:	4616      	mov	r6, r2
     e16:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
     e1a:	4a13      	ldr	r2, [pc, #76]	; (e68 <pm_system_suspend+0x80>)
     e1c:	2300      	movs	r3, #0
     e1e:	fbe6 010c 	umlal	r0, r1, r6, ip
     e22:	f7ff f95b 	bl	dc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     e26:	2101      	movs	r1, #1
     e28:	1a28      	subs	r0, r5, r0
     e2a:	f004 f9fa 	bl	5222 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     e2e:	f002 fd45 	bl	38bc <k_sched_lock>
	pm_start_timer();
	/* Enter power state */
	pm_state_notify(true);
     e32:	2001      	movs	r0, #1
     e34:	f7ff ff90 	bl	d58 <pm_state_notify>
	pm_state_set(z_power_state);
     e38:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
     e3c:	ab05      	add	r3, sp, #20
     e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
     e42:	4a0a      	ldr	r2, [pc, #40]	; (e6c <pm_system_suspend+0x84>)
     e44:	b11a      	cbz	r2, e4e <pm_system_suspend+0x66>
		pm_power_state_set(info);
     e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     e4a:	f003 fb4f 	bl	44ec <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_state.state);
	pm_system_resume();
     e4e:	f7ff ffa5 	bl	d9c <pm_system_resume>
	k_sched_unlock();
     e52:	f002 feb9 	bl	3bc8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
     e56:	7820      	ldrb	r0, [r4, #0]
}
     e58:	b009      	add	sp, #36	; 0x24
     e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e5c:	200003a0 	.word	0x200003a0
     e60:	20000004 	.word	0x20000004
     e64:	000f423f 	.word	0x000f423f
     e68:	000f4240 	.word	0x000f4240
     e6c:	000044ed 	.word	0x000044ed

00000e70 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     e70:	4901      	ldr	r1, [pc, #4]	; (e78 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     e72:	2210      	movs	r2, #16
	str	r2, [r1]
     e74:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     e76:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     e78:	e000ed10 	.word	0xe000ed10

00000e7c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
     e7c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
     e7e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
     e80:	f380 8811 	msr	BASEPRI, r0
	isb
     e84:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
     e88:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
     e8c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     e8e:	b662      	cpsie	i
	isb
     e90:	f3bf 8f6f 	isb	sy

	bx	lr
     e94:	4770      	bx	lr
     e96:	bf00      	nop

00000e98 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
     e98:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
     e9a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
     e9c:	f381 8811 	msr	BASEPRI, r1

	wfe
     ea0:	bf20      	wfe

	msr	BASEPRI, r0
     ea2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
     ea6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
     ea8:	4770      	bx	lr
     eaa:	bf00      	nop

00000eac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     eac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     eae:	2b00      	cmp	r3, #0
     eb0:	db08      	blt.n	ec4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eb2:	2201      	movs	r2, #1
     eb4:	f000 001f 	and.w	r0, r0, #31
     eb8:	fa02 f000 	lsl.w	r0, r2, r0
     ebc:	095b      	lsrs	r3, r3, #5
     ebe:	4a02      	ldr	r2, [pc, #8]	; (ec8 <arch_irq_enable+0x1c>)
     ec0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     ec4:	4770      	bx	lr
     ec6:	bf00      	nop
     ec8:	e000e100 	.word	0xe000e100

00000ecc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <arch_irq_is_enabled+0x18>)
     ece:	0942      	lsrs	r2, r0, #5
     ed0:	f000 001f 	and.w	r0, r0, #31
     ed4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     ed8:	2301      	movs	r3, #1
     eda:	fa03 f000 	lsl.w	r0, r3, r0
}
     ede:	4010      	ands	r0, r2
     ee0:	4770      	bx	lr
     ee2:	bf00      	nop
     ee4:	e000e100 	.word	0xe000e100

00000ee8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     ee8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     eea:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     eec:	bfa8      	it	ge
     eee:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
     ef2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ef6:	bfb8      	it	lt
     ef8:	4b06      	ldrlt	r3, [pc, #24]	; (f14 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     efa:	ea4f 1141 	mov.w	r1, r1, lsl #5
     efe:	bfac      	ite	ge
     f00:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f04:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f08:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f0a:	bfb4      	ite	lt
     f0c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f0e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
     f12:	4770      	bx	lr
     f14:	e000ed14 	.word	0xe000ed14

00000f18 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     f18:	bf30      	wfi
    b z_SysNmiOnReset
     f1a:	f7ff bffd 	b.w	f18 <z_SysNmiOnReset>
     f1e:	bf00      	nop

00000f20 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f20:	4a0f      	ldr	r2, [pc, #60]	; (f60 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     f22:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f24:	4b0f      	ldr	r3, [pc, #60]	; (f64 <z_arm_prep_c+0x44>)
     f26:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     f2a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f30:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
     f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     f38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
     f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     f40:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
     f44:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     f48:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
     f4c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     f50:	f002 f97a 	bl	3248 <z_bss_zero>
	z_data_copy();
     f54:	f002 ff6c 	bl	3e30 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     f58:	f000 f9ca 	bl	12f0 <z_arm_interrupt_init>
	z_cstart();
     f5c:	f002 f97e 	bl	325c <z_cstart>
     f60:	00000000 	.word	0x00000000
     f64:	e000ed00 	.word	0xe000ed00

00000f68 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
     f68:	4a09      	ldr	r2, [pc, #36]	; (f90 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     f6a:	490a      	ldr	r1, [pc, #40]	; (f94 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     f6c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     f6e:	6809      	ldr	r1, [r1, #0]
     f70:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f72:	4909      	ldr	r1, [pc, #36]	; (f98 <arch_swap+0x30>)
	_current->arch.basepri = key;
     f74:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f76:	684b      	ldr	r3, [r1, #4]
     f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     f7c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
     f7e:	2300      	movs	r3, #0
     f80:	f383 8811 	msr	BASEPRI, r3
     f84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     f88:	6893      	ldr	r3, [r2, #8]
}
     f8a:	6f98      	ldr	r0, [r3, #120]	; 0x78
     f8c:	4770      	bx	lr
     f8e:	bf00      	nop
     f90:	200005c0 	.word	0x200005c0
     f94:	000057c4 	.word	0x000057c4
     f98:	e000ed00 	.word	0xe000ed00

00000f9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     f9c:	4912      	ldr	r1, [pc, #72]	; (fe8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     f9e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     fa0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
     fa4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     fa6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     faa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     fae:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
     fb0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     fb4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     fb8:	4f0c      	ldr	r7, [pc, #48]	; (fec <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     fba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     fbe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     fc0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     fc2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     fc4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
     fc6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     fc8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     fca:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
     fce:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     fd0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     fd2:	f000 f9cf 	bl	1374 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     fd6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     fda:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
     fde:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     fe2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
     fe6:	4770      	bx	lr
    ldr r1, =_kernel
     fe8:	200005c0 	.word	0x200005c0
    ldr v4, =_SCS_ICSR
     fec:	e000ed04 	.word	0xe000ed04

00000ff0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
     ff0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     ff4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     ff6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     ffa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     ffe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1000:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1004:	2902      	cmp	r1, #2
    beq _oops
    1006:	d0ff      	beq.n	1008 <_oops>

00001008 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1008:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    100a:	f003 fa23 	bl	4454 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    100e:	bd01      	pop	{r0, pc}

00001010 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1010:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1014:	9b00      	ldr	r3, [sp, #0]
    1016:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    101a:	490a      	ldr	r1, [pc, #40]	; (1044 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    101c:	9b01      	ldr	r3, [sp, #4]
    101e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1022:	9b02      	ldr	r3, [sp, #8]
    1024:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1028:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    102c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1030:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1034:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1038:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    103a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    103c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    103e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1040:	4770      	bx	lr
    1042:	bf00      	nop
    1044:	00004379 	.word	0x00004379

00001048 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1048:	4a09      	ldr	r2, [pc, #36]	; (1070 <z_check_thread_stack_fail+0x28>)
{
    104a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    104c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    104e:	b170      	cbz	r0, 106e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1050:	f113 0f16 	cmn.w	r3, #22
    1054:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1056:	d005      	beq.n	1064 <z_check_thread_stack_fail+0x1c>
    1058:	f1a0 0220 	sub.w	r2, r0, #32
    105c:	429a      	cmp	r2, r3
    105e:	d805      	bhi.n	106c <z_check_thread_stack_fail+0x24>
    1060:	4283      	cmp	r3, r0
    1062:	d203      	bcs.n	106c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1064:	4281      	cmp	r1, r0
    1066:	bf28      	it	cs
    1068:	2000      	movcs	r0, #0
    106a:	4770      	bx	lr
    106c:	2000      	movs	r0, #0
}
    106e:	4770      	bx	lr
    1070:	200005c0 	.word	0x200005c0

00001074 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1074:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1076:	4b09      	ldr	r3, [pc, #36]	; (109c <arch_switch_to_main_thread+0x28>)
    1078:	6098      	str	r0, [r3, #8]
{
    107a:	460d      	mov	r5, r1
    107c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    107e:	f000 f979 	bl	1374 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1082:	4620      	mov	r0, r4
    1084:	f385 8809 	msr	PSP, r5
    1088:	2100      	movs	r1, #0
    108a:	b663      	cpsie	if
    108c:	f381 8811 	msr	BASEPRI, r1
    1090:	f3bf 8f6f 	isb	sy
    1094:	2200      	movs	r2, #0
    1096:	2300      	movs	r3, #0
    1098:	f003 f96e 	bl	4378 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    109c:	200005c0 	.word	0x200005c0

000010a0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    10a0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    10a2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    10a4:	4a0b      	ldr	r2, [pc, #44]	; (10d4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    10a6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    10a8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    10aa:	bf1e      	ittt	ne
	movne	r1, #0
    10ac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    10ae:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    10b0:	f003 ff8e 	blne	4fd0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    10b4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    10b6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    10ba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    10be:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    10c2:	4905      	ldr	r1, [pc, #20]	; (10d8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    10c4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    10c6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    10c8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    10ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    10ce:	4903      	ldr	r1, [pc, #12]	; (10dc <_isr_wrapper+0x3c>)
	bx r1
    10d0:	4708      	bx	r1
    10d2:	0000      	.short	0x0000
	ldr r2, =_kernel
    10d4:	200005c0 	.word	0x200005c0
	ldr r1, =_sw_isr_table
    10d8:	00005434 	.word	0x00005434
	ldr r1, =z_arm_int_exit
    10dc:	000010e1 	.word	0x000010e1

000010e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    10e0:	4b04      	ldr	r3, [pc, #16]	; (10f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    10e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    10e4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    10e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    10e8:	d003      	beq.n	10f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    10ea:	4903      	ldr	r1, [pc, #12]	; (10f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    10ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    10f0:	600a      	str	r2, [r1, #0]

000010f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    10f2:	4770      	bx	lr
	ldr r3, =_kernel
    10f4:	200005c0 	.word	0x200005c0
	ldr r1, =_SCS_ICSR
    10f8:	e000ed04 	.word	0xe000ed04

000010fc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    10fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    10fe:	4b19      	ldr	r3, [pc, #100]	; (1164 <mem_manage_fault+0x68>)
{
    1100:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1108:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    110a:	0790      	lsls	r0, r2, #30
    110c:	d519      	bpl.n	1142 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    110e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1112:	0612      	lsls	r2, r2, #24
    1114:	d515      	bpl.n	1142 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1116:	b119      	cbz	r1, 1120 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    111a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    111e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1126:	06d1      	lsls	r1, r2, #27
    1128:	d40e      	bmi.n	1148 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    112c:	079a      	lsls	r2, r3, #30
    112e:	d40b      	bmi.n	1148 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1130:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1132:	4a0c      	ldr	r2, [pc, #48]	; (1164 <mem_manage_fault+0x68>)
    1134:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1136:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    113a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    113c:	2300      	movs	r3, #0
    113e:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1140:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1142:	f06f 0015 	mvn.w	r0, #21
    1146:	e7eb      	b.n	1120 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1148:	4b06      	ldr	r3, [pc, #24]	; (1164 <mem_manage_fault+0x68>)
    114a:	685b      	ldr	r3, [r3, #4]
    114c:	051b      	lsls	r3, r3, #20
    114e:	d5ef      	bpl.n	1130 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1150:	4629      	mov	r1, r5
    1152:	f7ff ff79 	bl	1048 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1156:	2800      	cmp	r0, #0
    1158:	d0ea      	beq.n	1130 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    115a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    115e:	2002      	movs	r0, #2
    1160:	e7e7      	b.n	1132 <mem_manage_fault+0x36>
    1162:	bf00      	nop
    1164:	e000ed00 	.word	0xe000ed00

00001168 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1168:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <bus_fault.constprop.0+0x38>)
    116a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    116c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    116e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1170:	0592      	lsls	r2, r2, #22
    1172:	d508      	bpl.n	1186 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1174:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1178:	0412      	lsls	r2, r2, #16
    117a:	d504      	bpl.n	1186 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    117c:	b118      	cbz	r0, 1186 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    117e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1184:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1186:	4b06      	ldr	r3, [pc, #24]	; (11a0 <bus_fault.constprop.0+0x38>)
    1188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    118a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    118c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    118e:	bf58      	it	pl
    1190:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1192:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1194:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1196:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    119a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    119c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    119e:	4770      	bx	lr
    11a0:	e000ed00 	.word	0xe000ed00

000011a4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    11a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    11a6:	4b48      	ldr	r3, [pc, #288]	; (12c8 <z_arm_fault+0x124>)
    11a8:	685b      	ldr	r3, [r3, #4]
{
    11aa:	b08a      	sub	sp, #40	; 0x28
    11ac:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    11ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
    11b2:	2600      	movs	r6, #0
    11b4:	f386 8811 	msr	BASEPRI, r6
    11b8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    11bc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    11c0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    11c4:	d111      	bne.n	11ea <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    11c6:	f002 010c 	and.w	r1, r2, #12
    11ca:	2908      	cmp	r1, #8
    11cc:	d00d      	beq.n	11ea <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    11ce:	0711      	lsls	r1, r2, #28
    11d0:	d401      	bmi.n	11d6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    11d2:	4605      	mov	r5, r0
			*nested_exc = true;
    11d4:	2601      	movs	r6, #1
	*recoverable = false;
    11d6:	2200      	movs	r2, #0
	switch (fault) {
    11d8:	3b03      	subs	r3, #3
	*recoverable = false;
    11da:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    11de:	2b03      	cmp	r3, #3
    11e0:	d86b      	bhi.n	12ba <z_arm_fault+0x116>
    11e2:	e8df f003 	tbb	[pc, r3]
    11e6:	5504      	.short	0x5504
    11e8:	5d59      	.short	0x5d59
		return NULL;
    11ea:	4635      	mov	r5, r6
    11ec:	e7f3      	b.n	11d6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    11ee:	4b36      	ldr	r3, [pc, #216]	; (12c8 <z_arm_fault+0x124>)
    11f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    11f2:	f014 0402 	ands.w	r4, r4, #2
    11f6:	d160      	bne.n	12ba <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    11f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    11fa:	2a00      	cmp	r2, #0
    11fc:	db15      	blt.n	122a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    11fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1200:	0052      	lsls	r2, r2, #1
    1202:	d512      	bpl.n	122a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    1204:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1206:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    120a:	f64d 7202 	movw	r2, #57090	; 0xdf02
    120e:	4291      	cmp	r1, r2
    1210:	d00a      	beq.n	1228 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    1212:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1216:	b30a      	cbz	r2, 125c <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1218:	f10d 0207 	add.w	r2, sp, #7
    121c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    121e:	4628      	mov	r0, r5
    1220:	f7ff ff6c 	bl	10fc <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1224:	4604      	mov	r4, r0
		break;
    1226:	e000      	b.n	122a <z_arm_fault+0x86>
			reason = esf->basic.r0;
    1228:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    122a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    122e:	b99b      	cbnz	r3, 1258 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1230:	2220      	movs	r2, #32
    1232:	4629      	mov	r1, r5
    1234:	a802      	add	r0, sp, #8
    1236:	f003 f942 	bl	44be <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    123a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    123c:	2e00      	cmp	r6, #0
    123e:	d03e      	beq.n	12be <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1240:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1244:	b922      	cbnz	r2, 1250 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1246:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    124a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    124e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1250:	a902      	add	r1, sp, #8
    1252:	4620      	mov	r0, r4
    1254:	f003 f8fc 	bl	4450 <z_arm_fatal_error>
}
    1258:	b00a      	add	sp, #40	; 0x28
    125a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    125c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1260:	b12a      	cbz	r2, 126e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    1262:	f10d 0107 	add.w	r1, sp, #7
    1266:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1268:	f7ff ff7e 	bl	1168 <bus_fault.constprop.0>
    126c:	e7da      	b.n	1224 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    126e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1270:	b292      	uxth	r2, r2
    1272:	2a00      	cmp	r2, #0
    1274:	d0d9      	beq.n	122a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    127a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    127c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    127e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1284:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1288:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    128c:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    128e:	e7cc      	b.n	122a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1290:	f10d 0207 	add.w	r2, sp, #7
    1294:	2100      	movs	r1, #0
    1296:	e7c2      	b.n	121e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    1298:	f10d 0107 	add.w	r1, sp, #7
    129c:	2000      	movs	r0, #0
    129e:	e7e3      	b.n	1268 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    12a0:	4b09      	ldr	r3, [pc, #36]	; (12c8 <z_arm_fault+0x124>)
    12a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    12a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    12a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    12a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    12aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    12ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    12ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    12b4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    12b8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    12ba:	2400      	movs	r4, #0
    12bc:	e7b5      	b.n	122a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    12be:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    12c2:	f023 0301 	bic.w	r3, r3, #1
    12c6:	e7c2      	b.n	124e <z_arm_fault+0xaa>
    12c8:	e000ed00 	.word	0xe000ed00

000012cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    12cc:	4a02      	ldr	r2, [pc, #8]	; (12d8 <z_arm_fault_init+0xc>)
    12ce:	6953      	ldr	r3, [r2, #20]
    12d0:	f043 0310 	orr.w	r3, r3, #16
    12d4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    12d6:	4770      	bx	lr
    12d8:	e000ed00 	.word	0xe000ed00

000012dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    12dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    12e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    12e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    12e6:	4672      	mov	r2, lr
	bl z_arm_fault
    12e8:	f7ff ff5c 	bl	11a4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    12ec:	bd01      	pop	{r0, pc}
    12ee:	bf00      	nop

000012f0 <z_arm_interrupt_init>:
    12f0:	4804      	ldr	r0, [pc, #16]	; (1304 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    12f2:	2300      	movs	r3, #0
    12f4:	2120      	movs	r1, #32
    12f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    12f8:	3301      	adds	r3, #1
    12fa:	2b27      	cmp	r3, #39	; 0x27
    12fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1300:	d1f9      	bne.n	12f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1302:	4770      	bx	lr
    1304:	e000e100 	.word	0xe000e100

00001308 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1308:	f003 ffae 	bl	5268 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    130c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    130e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1312:	4808      	ldr	r0, [pc, #32]	; (1334 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1314:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1318:	1840      	adds	r0, r0, r1
    msr PSP, r0
    131a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    131e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1322:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1324:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1326:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    132a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    132e:	f7ff fdf7 	bl	f20 <z_arm_prep_c>
    1332:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1334:	20000fc0 	.word	0x20000fc0

00001338 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <z_impl_k_thread_abort+0x1c>)
    133a:	689b      	ldr	r3, [r3, #8]
    133c:	4283      	cmp	r3, r0
    133e:	d107      	bne.n	1350 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1340:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1344:	b123      	cbz	r3, 1350 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1346:	4a04      	ldr	r2, [pc, #16]	; (1358 <z_impl_k_thread_abort+0x20>)
    1348:	6853      	ldr	r3, [r2, #4]
    134a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    134e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1350:	f002 bd0a 	b.w	3d68 <z_thread_abort>
    1354:	200005c0 	.word	0x200005c0
    1358:	e000ed00 	.word	0xe000ed00

0000135c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    135c:	4b02      	ldr	r3, [pc, #8]	; (1368 <z_arm_configure_static_mpu_regions+0xc>)
    135e:	4a03      	ldr	r2, [pc, #12]	; (136c <z_arm_configure_static_mpu_regions+0x10>)
    1360:	4803      	ldr	r0, [pc, #12]	; (1370 <z_arm_configure_static_mpu_regions+0x14>)
    1362:	2101      	movs	r1, #1
    1364:	f000 b86e 	b.w	1444 <arm_core_mpu_configure_static_mpu_regions>
    1368:	20010000 	.word	0x20010000
    136c:	20000000 	.word	0x20000000
    1370:	000055d8 	.word	0x000055d8

00001374 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1374:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1376:	4b05      	ldr	r3, [pc, #20]	; (138c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1378:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    137a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    137c:	4a04      	ldr	r2, [pc, #16]	; (1390 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    137e:	2120      	movs	r1, #32
    1380:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1384:	4618      	mov	r0, r3
    1386:	2101      	movs	r1, #1
    1388:	f000 b866 	b.w	1458 <arm_core_mpu_configure_dynamic_mpu_regions>
    138c:	200003ac 	.word	0x200003ac
    1390:	150b0000 	.word	0x150b0000

00001394 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1394:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1396:	4f1f      	ldr	r7, [pc, #124]	; (1414 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1398:	2600      	movs	r6, #0
    139a:	428e      	cmp	r6, r1
    139c:	db01      	blt.n	13a2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    139e:	4610      	mov	r0, r2
    13a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    13a2:	6844      	ldr	r4, [r0, #4]
    13a4:	b39c      	cbz	r4, 140e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    13a6:	b153      	cbz	r3, 13be <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    13a8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    13ac:	ea14 0f0c 	tst.w	r4, ip
    13b0:	d118      	bne.n	13e4 <mpu_configure_regions+0x50>
		&&
    13b2:	2c1f      	cmp	r4, #31
    13b4:	d916      	bls.n	13e4 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    13b6:	6805      	ldr	r5, [r0, #0]
		&&
    13b8:	ea1c 0f05 	tst.w	ip, r5
    13bc:	d112      	bne.n	13e4 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    13be:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    13c0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    13c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    13c6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    13c8:	d90f      	bls.n	13ea <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    13ca:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    13ce:	d80e      	bhi.n	13ee <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    13d0:	3c01      	subs	r4, #1
    13d2:	fab4 f484 	clz	r4, r4
    13d6:	f1c4 041f 	rsb	r4, r4, #31
    13da:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    13dc:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    13de:	ea4c 0404 	orr.w	r4, ip, r4
    13e2:	d906      	bls.n	13f2 <mpu_configure_regions+0x5e>
			return -EINVAL;
    13e4:	f06f 0215 	mvn.w	r2, #21
    13e8:	e7d9      	b.n	139e <mpu_configure_regions+0xa>
		return REGION_32B;
    13ea:	2408      	movs	r4, #8
    13ec:	e7f6      	b.n	13dc <mpu_configure_regions+0x48>
		return REGION_4G;
    13ee:	243e      	movs	r4, #62	; 0x3e
    13f0:	e7f4      	b.n	13dc <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    13f2:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    13f6:	4315      	orrs	r5, r2
    13f8:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    13fc:	f044 0401 	orr.w	r4, r4, #1
    1400:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1404:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1408:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    140a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    140e:	3601      	adds	r6, #1
    1410:	300c      	adds	r0, #12
    1412:	e7c2      	b.n	139a <mpu_configure_regions+0x6>
    1414:	e000ed00 	.word	0xe000ed00

00001418 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1418:	4b04      	ldr	r3, [pc, #16]	; (142c <arm_core_mpu_enable+0x14>)
    141a:	2205      	movs	r2, #5
    141c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1424:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1428:	4770      	bx	lr
    142a:	bf00      	nop
    142c:	e000ed00 	.word	0xe000ed00

00001430 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1430:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1434:	4b02      	ldr	r3, [pc, #8]	; (1440 <arm_core_mpu_disable+0x10>)
    1436:	2200      	movs	r2, #0
    1438:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    143c:	4770      	bx	lr
    143e:	bf00      	nop
    1440:	e000ed00 	.word	0xe000ed00

00001444 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1444:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1446:	4c03      	ldr	r4, [pc, #12]	; (1454 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1448:	2301      	movs	r3, #1
    144a:	7822      	ldrb	r2, [r4, #0]
    144c:	f7ff ffa2 	bl	1394 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1450:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1452:	bd10      	pop	{r4, pc}
    1454:	20000600 	.word	0x20000600

00001458 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1458:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    145a:	4a09      	ldr	r2, [pc, #36]	; (1480 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    145c:	2300      	movs	r3, #0
    145e:	7812      	ldrb	r2, [r2, #0]
    1460:	f7ff ff98 	bl	1394 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1464:	f110 0f16 	cmn.w	r0, #22
    1468:	d002      	beq.n	1470 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    146a:	4a06      	ldr	r2, [pc, #24]	; (1484 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    146c:	2807      	cmp	r0, #7
    146e:	dd00      	ble.n	1472 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1470:	bd08      	pop	{r3, pc}
    1472:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1476:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    147a:	3001      	adds	r0, #1
    147c:	e7f6      	b.n	146c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    147e:	bf00      	nop
    1480:	20000600 	.word	0x20000600
    1484:	e000ed00 	.word	0xe000ed00

00001488 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1488:	4914      	ldr	r1, [pc, #80]	; (14dc <z_arm_mpu_init+0x54>)
    148a:	6808      	ldr	r0, [r1, #0]
    148c:	2808      	cmp	r0, #8
{
    148e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1490:	d821      	bhi.n	14d6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1492:	f7ff ffcd 	bl	1430 <arm_core_mpu_disable>
    1496:	4c12      	ldr	r4, [pc, #72]	; (14e0 <z_arm_mpu_init+0x58>)
    1498:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    149a:	2200      	movs	r2, #0
    149c:	4290      	cmp	r0, r2
    149e:	f101 010c 	add.w	r1, r1, #12
    14a2:	d105      	bne.n	14b0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    14a4:	4b0f      	ldr	r3, [pc, #60]	; (14e4 <z_arm_mpu_init+0x5c>)
    14a6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    14a8:	f7ff ffb6 	bl	1418 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    14ac:	2000      	movs	r0, #0
}
    14ae:	bd10      	pop	{r4, pc}
    14b0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    14b4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    14b8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    14bc:	4313      	orrs	r3, r2
    14be:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    14c2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    14c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    14ca:	f043 0301 	orr.w	r3, r3, #1
    14ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    14d2:	3201      	adds	r2, #1
    14d4:	e7e2      	b.n	149c <z_arm_mpu_init+0x14>
		return -1;
    14d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14da:	e7e8      	b.n	14ae <z_arm_mpu_init+0x26>
    14dc:	000055e4 	.word	0x000055e4
    14e0:	e000ed00 	.word	0xe000ed00
    14e4:	20000600 	.word	0x20000600

000014e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    14e8:	4b01      	ldr	r3, [pc, #4]	; (14f0 <__stdout_hook_install+0x8>)
    14ea:	6018      	str	r0, [r3, #0]
}
    14ec:	4770      	bx	lr
    14ee:	bf00      	nop
    14f0:	20000008 	.word	0x20000008

000014f4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    14f4:	f04f 0220 	mov.w	r2, #32
    14f8:	f3ef 8311 	mrs	r3, BASEPRI
    14fc:	f382 8812 	msr	BASEPRI_MAX, r2
    1500:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1504:	4a04      	ldr	r2, [pc, #16]	; (1518 <nordicsemi_nrf52_init+0x24>)
    1506:	2101      	movs	r1, #1
    1508:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    150c:	f383 8811 	msr	BASEPRI, r3
    1510:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1514:	2000      	movs	r0, #0
    1516:	4770      	bx	lr
    1518:	4001e000 	.word	0x4001e000

0000151c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    151c:	b120      	cbz	r0, 1528 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    151e:	4b03      	ldr	r3, [pc, #12]	; (152c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1520:	0180      	lsls	r0, r0, #6
    1522:	f043 0301 	orr.w	r3, r3, #1
    1526:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	000055d0 	.word	0x000055d0

00001530 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    1530:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    1532:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    1534:	6820      	ldr	r0, [r4, #0]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1536:	f001 fe17 	bl	3168 <z_impl_device_get_binding>
	if (!gpio) {
    153a:	b930      	cbnz	r0, 154a <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    153c:	480d      	ldr	r0, [pc, #52]	; (1574 <pwr_ctrl_init+0x44>)
    153e:	6821      	ldr	r1, [r4, #0]
    1540:	f002 fe11 	bl	4166 <printk>
		return -ENODEV;
    1544:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    1548:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    154a:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    154c:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    154e:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    1550:	b2c9      	uxtb	r1, r1
    1552:	2301      	movs	r3, #1
    1554:	fa03 f201 	lsl.w	r2, r3, r1
    1558:	6823      	ldr	r3, [r4, #0]
    155a:	ea23 0302 	bic.w	r3, r3, r2
    155e:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    1560:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    1564:	682b      	ldr	r3, [r5, #0]
    1566:	4798      	blx	r3
    1568:	2021      	movs	r0, #33	; 0x21
    156a:	2100      	movs	r1, #0
    156c:	f002 fbdc 	bl	3d28 <z_impl_k_sleep>
	return 0;
    1570:	2000      	movs	r0, #0
    1572:	e7e9      	b.n	1548 <pwr_ctrl_init+0x18>
    1574:	0000580e 	.word	0x0000580e

00001578 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1578:	4b08      	ldr	r3, [pc, #32]	; (159c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    157a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    157c:	1ac3      	subs	r3, r0, r3
{
    157e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1580:	4907      	ldr	r1, [pc, #28]	; (15a0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1582:	109b      	asrs	r3, r3, #2
{
    1584:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1586:	4359      	muls	r1, r3
    1588:	4806      	ldr	r0, [pc, #24]	; (15a4 <onoff_stop+0x2c>)
    158a:	2240      	movs	r2, #64	; 0x40
    158c:	f002 ffe8 	bl	4560 <stop>
	notify(mgr, res);
    1590:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1592:	4601      	mov	r1, r0
	notify(mgr, res);
    1594:	4620      	mov	r0, r4
}
    1596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    159a:	4718      	bx	r3
    159c:	200003c8 	.word	0x200003c8
    15a0:	b6db6db7 	.word	0xb6db6db7
    15a4:	000052fc 	.word	0x000052fc

000015a8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    15a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    15aa:	4c0c      	ldr	r4, [pc, #48]	; (15dc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    15ac:	4a0c      	ldr	r2, [pc, #48]	; (15e0 <onoff_start+0x38>)
    15ae:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    15b0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    15b2:	9300      	str	r3, [sp, #0]
{
    15b4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    15b6:	460b      	mov	r3, r1
    15b8:	490a      	ldr	r1, [pc, #40]	; (15e4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    15ba:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    15bc:	4361      	muls	r1, r4
{
    15be:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    15c0:	4809      	ldr	r0, [pc, #36]	; (15e8 <onoff_start+0x40>)
    15c2:	f002 fff9 	bl	45b8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    15c6:	1e01      	subs	r1, r0, #0
    15c8:	da05      	bge.n	15d6 <onoff_start+0x2e>
		notify(mgr, err);
    15ca:	4630      	mov	r0, r6
    15cc:	462b      	mov	r3, r5
	}
}
    15ce:	b002      	add	sp, #8
    15d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    15d4:	4718      	bx	r3
}
    15d6:	b002      	add	sp, #8
    15d8:	bd70      	pop	{r4, r5, r6, pc}
    15da:	bf00      	nop
    15dc:	200003c8 	.word	0x200003c8
    15e0:	00004629 	.word	0x00004629
    15e4:	b6db6db7 	.word	0xb6db6db7
    15e8:	000052fc 	.word	0x000052fc

000015ec <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    15ec:	2200      	movs	r2, #0
{
    15ee:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    15f0:	2101      	movs	r1, #1
{
    15f2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    15f4:	4610      	mov	r0, r2
    15f6:	f7ff fc77 	bl	ee8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    15fa:	2000      	movs	r0, #0
    15fc:	f7ff fc56 	bl	eac <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1600:	480f      	ldr	r0, [pc, #60]	; (1640 <clk_init+0x54>)
    1602:	f001 f8cf 	bl	27a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1606:	4b0f      	ldr	r3, [pc, #60]	; (1644 <clk_init+0x58>)
    1608:	4298      	cmp	r0, r3
    160a:	d115      	bne.n	1638 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    160c:	f003 fc0f 	bl	4e2e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1610:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1612:	490d      	ldr	r1, [pc, #52]	; (1648 <clk_init+0x5c>)
    1614:	4630      	mov	r0, r6
    1616:	f002 fe02 	bl	421e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    161a:	2800      	cmp	r0, #0
    161c:	db0b      	blt.n	1636 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    161e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1620:	4909      	ldr	r1, [pc, #36]	; (1648 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1622:	2501      	movs	r5, #1
    1624:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1626:	f104 001c 	add.w	r0, r4, #28
    162a:	f002 fdf8 	bl	421e <onoff_manager_init>
		if (err < 0) {
    162e:	2800      	cmp	r0, #0
    1630:	db01      	blt.n	1636 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1632:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1634:	2000      	movs	r0, #0
}
    1636:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1638:	f06f 0004 	mvn.w	r0, #4
    163c:	e7fb      	b.n	1636 <clk_init+0x4a>
    163e:	bf00      	nop
    1640:	00001681 	.word	0x00001681
    1644:	0bad0000 	.word	0x0bad0000
    1648:	00005630 	.word	0x00005630

0000164c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    164c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    164e:	230c      	movs	r3, #12
    1650:	4809      	ldr	r0, [pc, #36]	; (1678 <clkstarted_handle.constprop.0+0x2c>)
    1652:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1654:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1656:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1658:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    165c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    165e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1660:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1662:	4418      	add	r0, r3
    1664:	f002 ff69 	bl	453a <set_on_state>
	if (callback) {
    1668:	b12d      	cbz	r5, 1676 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    166a:	4632      	mov	r2, r6
    166c:	462b      	mov	r3, r5
    166e:	4803      	ldr	r0, [pc, #12]	; (167c <clkstarted_handle.constprop.0+0x30>)
}
    1670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1674:	4718      	bx	r3
}
    1676:	bd70      	pop	{r4, r5, r6, pc}
    1678:	200003c8 	.word	0x200003c8
    167c:	000052fc 	.word	0x000052fc

00001680 <clock_event_handler>:
	switch (event) {
    1680:	b110      	cbz	r0, 1688 <clock_event_handler+0x8>
    1682:	2801      	cmp	r0, #1
    1684:	d004      	beq.n	1690 <clock_event_handler+0x10>
    1686:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1688:	4b03      	ldr	r3, [pc, #12]	; (1698 <clock_event_handler+0x18>)
    168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    168c:	075b      	lsls	r3, r3, #29
    168e:	d101      	bne.n	1694 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1690:	f7ff bfdc 	b.w	164c <clkstarted_handle.constprop.0>
}
    1694:	4770      	bx	lr
    1696:	bf00      	nop
    1698:	200003c8 	.word	0x200003c8

0000169c <generic_hfclk_start>:
{
    169c:	b508      	push	{r3, lr}
	__asm__ volatile(
    169e:	f04f 0320 	mov.w	r3, #32
    16a2:	f3ef 8111 	mrs	r1, BASEPRI
    16a6:	f383 8812 	msr	BASEPRI_MAX, r3
    16aa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    16ae:	4a12      	ldr	r2, [pc, #72]	; (16f8 <generic_hfclk_start+0x5c>)
    16b0:	6813      	ldr	r3, [r2, #0]
    16b2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    16b6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    16ba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    16bc:	d00c      	beq.n	16d8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    16be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    16c2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    16c6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    16ca:	f013 0301 	ands.w	r3, r3, #1
    16ce:	d003      	beq.n	16d8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    16d0:	480a      	ldr	r0, [pc, #40]	; (16fc <generic_hfclk_start+0x60>)
    16d2:	f002 ff32 	bl	453a <set_on_state>
			already_started = true;
    16d6:	2301      	movs	r3, #1
	__asm__ volatile(
    16d8:	f381 8811 	msr	BASEPRI, r1
    16dc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    16e0:	b123      	cbz	r3, 16ec <generic_hfclk_start+0x50>
}
    16e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    16e6:	2000      	movs	r0, #0
    16e8:	f7ff bfb0 	b.w	164c <clkstarted_handle.constprop.0>
}
    16ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    16f0:	2001      	movs	r0, #1
    16f2:	f001 b867 	b.w	27c4 <nrfx_clock_start>
    16f6:	bf00      	nop
    16f8:	20000418 	.word	0x20000418
    16fc:	20000408 	.word	0x20000408

00001700 <api_blocking_start>:
{
    1700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1702:	2200      	movs	r2, #0
    1704:	2301      	movs	r3, #1
    1706:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    170a:	4a09      	ldr	r2, [pc, #36]	; (1730 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    170c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1710:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1712:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1716:	f002 ff80 	bl	461a <api_start>
	if (err < 0) {
    171a:	2800      	cmp	r0, #0
    171c:	db05      	blt.n	172a <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    171e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1722:	2300      	movs	r3, #0
    1724:	4668      	mov	r0, sp
    1726:	f001 fefb 	bl	3520 <z_impl_k_sem_take>
}
    172a:	b005      	add	sp, #20
    172c:	f85d fb04 	ldr.w	pc, [sp], #4
    1730:	00004641 	.word	0x00004641

00001734 <lfclk_start>:
{
    1734:	b510      	push	{r4, lr}
	if (!once) {
    1736:	4c07      	ldr	r4, [pc, #28]	; (1754 <lfclk_start+0x20>)
    1738:	7823      	ldrb	r3, [r4, #0]
    173a:	b92b      	cbnz	r3, 1748 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    173c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1740:	f003 fd8d 	bl	525e <z_impl_k_busy_wait>
		once = true;
    1744:	2301      	movs	r3, #1
    1746:	7023      	strb	r3, [r4, #0]
}
    1748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    174c:	2000      	movs	r0, #0
    174e:	f001 b839 	b.w	27c4 <nrfx_clock_start>
    1752:	bf00      	nop
    1754:	20000601 	.word	0x20000601

00001758 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1758:	4b09      	ldr	r3, [pc, #36]	; (1780 <generic_hfclk_stop+0x28>)
    175a:	f3bf 8f5b 	dmb	ish
    175e:	e853 2f00 	ldrex	r2, [r3]
    1762:	f022 0102 	bic.w	r1, r2, #2
    1766:	e843 1000 	strex	r0, r1, [r3]
    176a:	2800      	cmp	r0, #0
    176c:	d1f7      	bne.n	175e <generic_hfclk_stop+0x6>
    176e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1772:	07d3      	lsls	r3, r2, #31
    1774:	d402      	bmi.n	177c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1776:	2001      	movs	r0, #1
    1778:	f001 b86c 	b.w	2854 <nrfx_clock_stop>
}
    177c:	4770      	bx	lr
    177e:	bf00      	nop
    1780:	20000418 	.word	0x20000418

00001784 <z_nrf_clock_control_lf_on>:
{
    1784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1788:	4939      	ldr	r1, [pc, #228]	; (1870 <z_nrf_clock_control_lf_on+0xec>)
    178a:	f3bf 8f5b 	dmb	ish
    178e:	4607      	mov	r7, r0
    1790:	2201      	movs	r2, #1
    1792:	e851 3f00 	ldrex	r3, [r1]
    1796:	e841 2000 	strex	r0, r2, [r1]
    179a:	2800      	cmp	r0, #0
    179c:	d1f9      	bne.n	1792 <z_nrf_clock_control_lf_on+0xe>
    179e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    17a2:	b933      	cbnz	r3, 17b2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    17a4:	4933      	ldr	r1, [pc, #204]	; (1874 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    17a6:	4834      	ldr	r0, [pc, #208]	; (1878 <z_nrf_clock_control_lf_on+0xf4>)
    17a8:	604b      	str	r3, [r1, #4]
    17aa:	60cb      	str	r3, [r1, #12]
    17ac:	608a      	str	r2, [r1, #8]
    17ae:	f002 fd49 	bl	4244 <onoff_request>
	switch (start_mode) {
    17b2:	1e7b      	subs	r3, r7, #1
    17b4:	2b01      	cmp	r3, #1
    17b6:	d82f      	bhi.n	1818 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    17b8:	2f01      	cmp	r7, #1
    17ba:	d107      	bne.n	17cc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    17bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17c0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    17c4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    17c8:	2b01      	cmp	r3, #1
    17ca:	d025      	beq.n	1818 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    17cc:	f003 fbf5 	bl	4fba <k_is_in_isr>
    17d0:	4604      	mov	r4, r0
    17d2:	b918      	cbnz	r0, 17dc <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    17d4:	4b29      	ldr	r3, [pc, #164]	; (187c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    17d6:	781b      	ldrb	r3, [r3, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d141      	bne.n	1860 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    17dc:	f04f 0320 	mov.w	r3, #32
    17e0:	f3ef 8611 	mrs	r6, BASEPRI
    17e4:	f383 8812 	msr	BASEPRI_MAX, r3
    17e8:	f3bf 8f6f 	isb	sy
    17ec:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17ee:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1880 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    17f2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    17f6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    17fa:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    17fe:	03d2      	lsls	r2, r2, #15
    1800:	d50c      	bpl.n	181c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1802:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1806:	2b01      	cmp	r3, #1
    1808:	d001      	beq.n	180e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    180a:	2f01      	cmp	r7, #1
    180c:	d106      	bne.n	181c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    180e:	b30c      	cbz	r4, 1854 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1810:	f386 8811 	msr	BASEPRI, r6
    1814:	f3bf 8f6f 	isb	sy
}
    1818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    181c:	b1ac      	cbz	r4, 184a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    181e:	4630      	mov	r0, r6
    1820:	f7ff fb3a 	bl	e98 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1824:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1828:	2b00      	cmp	r3, #0
    182a:	d1e4      	bne.n	17f6 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    182c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1830:	2a00      	cmp	r2, #0
    1832:	d0e0      	beq.n	17f6 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1834:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1838:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    183c:	2301      	movs	r3, #1
    183e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    1842:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1846:	60ab      	str	r3, [r5, #8]
}
    1848:	e7d5      	b.n	17f6 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    184a:	2100      	movs	r1, #0
    184c:	2021      	movs	r0, #33	; 0x21
    184e:	f002 fa6b 	bl	3d28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1852:	e7e7      	b.n	1824 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    1854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1858:	2202      	movs	r2, #2
    185a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    185e:	e7db      	b.n	1818 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    1860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1864:	2202      	movs	r2, #2
    1866:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    186a:	4606      	mov	r6, r0
}
    186c:	e7bf      	b.n	17ee <z_nrf_clock_control_lf_on+0x6a>
    186e:	bf00      	nop
    1870:	2000041c 	.word	0x2000041c
    1874:	200003b8 	.word	0x200003b8
    1878:	200003e4 	.word	0x200003e4
    187c:	20000a34 	.word	0x20000a34
    1880:	e000e100 	.word	0xe000e100

00001884 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    1884:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    1886:	4c04      	ldr	r4, [pc, #16]	; (1898 <rtt_console_init+0x14>)
    1888:	4620      	mov	r0, r4
    188a:	f7fe fdaf 	bl	3ec <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    188e:	4620      	mov	r0, r4
    1890:	f7ff fe2a 	bl	14e8 <__stdout_hook_install>

	return 0;
}
    1894:	2000      	movs	r0, #0
    1896:	bd10      	pop	{r4, pc}
    1898:	0000189d 	.word	0x0000189d

0000189c <rtt_console_out>:
{
    189c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    189e:	4e14      	ldr	r6, [pc, #80]	; (18f0 <rtt_console_out+0x54>)
	char c = (char)character;
    18a0:	f88d 0007 	strb.w	r0, [sp, #7]
{
    18a4:	4604      	mov	r4, r0
	char c = (char)character;
    18a6:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    18a8:	f3ef 8711 	mrs	r7, BASEPRI
    18ac:	f04f 0120 	mov.w	r1, #32
    18b0:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    18b4:	2201      	movs	r2, #1
    18b6:	f10d 0107 	add.w	r1, sp, #7
    18ba:	2000      	movs	r0, #0
    18bc:	f001 fc04 	bl	30c8 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    18c0:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    18c4:	b120      	cbz	r0, 18d0 <rtt_console_out+0x34>
			host_present = true;
    18c6:	2301      	movs	r3, #1
    18c8:	7033      	strb	r3, [r6, #0]
}
    18ca:	4620      	mov	r0, r4
    18cc:	b003      	add	sp, #12
    18ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    18d0:	7833      	ldrb	r3, [r6, #0]
    18d2:	2b00      	cmp	r3, #0
    18d4:	d0f9      	beq.n	18ca <rtt_console_out+0x2e>
			if (max_cnt) {
    18d6:	3d01      	subs	r5, #1
    18d8:	d008      	beq.n	18ec <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    18da:	f003 fb6e 	bl	4fba <k_is_in_isr>
    18de:	2800      	cmp	r0, #0
    18e0:	d1e2      	bne.n	18a8 <rtt_console_out+0xc>
    18e2:	2100      	movs	r1, #0
    18e4:	2042      	movs	r0, #66	; 0x42
    18e6:	f002 fa1f 	bl	3d28 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    18ea:	e7dd      	b.n	18a8 <rtt_console_out+0xc>
				host_present = false;
    18ec:	7035      	strb	r5, [r6, #0]
    18ee:	e7ec      	b.n	18ca <rtt_console_out+0x2e>
    18f0:	20000602 	.word	0x20000602

000018f4 <gpio_nrfx_init>:


#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    18f4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    18f6:	4b09      	ldr	r3, [pc, #36]	; (191c <gpio_nrfx_init+0x28>)
    18f8:	781a      	ldrb	r2, [r3, #0]
    18fa:	b96a      	cbnz	r2, 1918 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    18fc:	2101      	movs	r1, #1
    18fe:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1900:	2006      	movs	r0, #6
    1902:	2105      	movs	r1, #5
    1904:	f7ff faf0 	bl	ee8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1908:	2006      	movs	r0, #6
    190a:	f7ff facf 	bl	eac <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    190e:	4b04      	ldr	r3, [pc, #16]	; (1920 <gpio_nrfx_init+0x2c>)
    1910:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1918:	2000      	movs	r0, #0
    191a:	bd08      	pop	{r3, pc}
    191c:	20000603 	.word	0x20000603
    1920:	40006000 	.word	0x40006000

00001924 <gpio_nrfx_pin_interrupt_configure>:
{
    1924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1926:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1928:	6842      	ldr	r2, [r0, #4]
	return port->data;
    192a:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    192c:	7a12      	ldrb	r2, [r2, #8]
    192e:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1932:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
    1936:	460d      	mov	r5, r1
    1938:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    193c:	d10c      	bne.n	1958 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    193e:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1942:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    1946:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    194a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    194e:	07d0      	lsls	r0, r2, #31
    1950:	d507      	bpl.n	1962 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    1952:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1956:	e09a      	b.n	1a8e <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1958:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    195c:	68f1      	ldr	r1, [r6, #12]
    195e:	f000 8098 	beq.w	1a92 <gpio_nrfx_pin_interrupt_configure+0x16e>
    1962:	68f2      	ldr	r2, [r6, #12]
    1964:	2101      	movs	r1, #1
    1966:	40a9      	lsls	r1, r5
    1968:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    196a:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    196c:	60f1      	str	r1, [r6, #12]
    196e:	2101      	movs	r1, #1
    1970:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1972:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    1976:	bf0c      	ite	eq
    1978:	430a      	orreq	r2, r1
    197a:	438a      	bicne	r2, r1
    197c:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    197e:	69b2      	ldr	r2, [r6, #24]
    1980:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1984:	bf0c      	ite	eq
    1986:	430a      	orreq	r2, r1
    1988:	438a      	bicne	r2, r1
    198a:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    198c:	6932      	ldr	r2, [r6, #16]
    198e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1992:	bf0c      	ite	eq
    1994:	4311      	orreq	r1, r2
    1996:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    199a:	4a4a      	ldr	r2, [pc, #296]	; (1ac4 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    199c:	6131      	str	r1, [r6, #16]
    199e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    19a2:	2000      	movs	r0, #0
    19a4:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    19a6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    19aa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    19ae:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    19b2:	428c      	cmp	r4, r1
    19b4:	d172      	bne.n	1a9c <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
    19b6:	fa23 f100 	lsr.w	r1, r3, r0
    19ba:	07c9      	lsls	r1, r1, #31
    19bc:	d56e      	bpl.n	1a9c <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    19be:	0083      	lsls	r3, r0, #2
    19c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    19c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    19c8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    19cc:	f021 0101 	bic.w	r1, r1, #1
    19d0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    19d4:	2301      	movs	r3, #1
    19d6:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    19d8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    19dc:	b2c0      	uxtb	r0, r0
    19de:	f000 ffa9 	bl	2934 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    19e2:	4620      	mov	r0, r4
    19e4:	2100      	movs	r1, #0
    19e6:	f002 fe2e 	bl	4646 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    19ea:	68f0      	ldr	r0, [r6, #12]
    19ec:	40e8      	lsrs	r0, r5
    19ee:	f010 0001 	ands.w	r0, r0, #1
    19f2:	d04c      	beq.n	1a8e <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    19f4:	6970      	ldr	r0, [r6, #20]
    19f6:	40e8      	lsrs	r0, r5
    19f8:	f010 0201 	ands.w	r2, r0, #1
    19fc:	d055      	beq.n	1aaa <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
    19fe:	69b3      	ldr	r3, [r6, #24]
    1a00:	40eb      	lsrs	r3, r5
    1a02:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1a04:	bf5f      	itttt	pl
    1a06:	6931      	ldrpl	r1, [r6, #16]
    1a08:	fa21 f505 	lsrpl.w	r5, r1, r5
    1a0c:	f005 0501 	andpl.w	r5, r5, #1
    1a10:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1a14:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1a18:	bf54      	ite	pl
    1a1a:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1a1c:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1a1e:	f000 ffa9 	bl	2974 <nrfx_gpiote_channel_alloc>
    1a22:	4b29      	ldr	r3, [pc, #164]	; (1ac8 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
    1a24:	4298      	cmp	r0, r3
    1a26:	d13d      	bne.n	1aa4 <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1a28:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1a2c:	0093      	lsls	r3, r2, #2
    1a2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1a32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1a36:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1a38:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1a3c:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    1a40:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    1a44:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1a48:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1a4c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    1a50:	430c      	orrs	r4, r1
    1a52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1a56:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1a5a:	0093      	lsls	r3, r2, #2
    1a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1a60:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1a64:	2000      	movs	r0, #0
    1a66:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    1a68:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1a6c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1a6e:	008b      	lsls	r3, r1, #2
    1a70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1a74:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1a78:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1a7c:	f042 0201 	orr.w	r2, r2, #1
    1a80:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    1a84:	4a0f      	ldr	r2, [pc, #60]	; (1ac4 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1a86:	2301      	movs	r3, #1
    1a88:	408b      	lsls	r3, r1
    1a8a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1a8e:	b003      	add	sp, #12
    1a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1a92:	2201      	movs	r2, #1
    1a94:	40aa      	lsls	r2, r5
    1a96:	ea21 0102 	bic.w	r1, r1, r2
    1a9a:	e766      	b.n	196a <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1a9c:	3001      	adds	r0, #1
    1a9e:	2808      	cmp	r0, #8
    1aa0:	d181      	bne.n	19a6 <gpio_nrfx_pin_interrupt_configure+0x82>
    1aa2:	e79e      	b.n	19e2 <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
    1aa4:	f06f 0012 	mvn.w	r0, #18
    1aa8:	e7f1      	b.n	1a8e <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1aaa:	6931      	ldr	r1, [r6, #16]
    1aac:	40e9      	lsrs	r1, r5
    1aae:	f001 0101 	and.w	r1, r1, #1
    1ab2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1ab6:	4620      	mov	r0, r4
    1ab8:	b2c9      	uxtb	r1, r1
    1aba:	f002 fdc4 	bl	4646 <nrf_gpio_cfg_sense_set>
	int res = 0;
    1abe:	4610      	mov	r0, r2
    1ac0:	e7e5      	b.n	1a8e <gpio_nrfx_pin_interrupt_configure+0x16a>
    1ac2:	bf00      	nop
    1ac4:	40006000 	.word	0x40006000
    1ac8:	0bad0000 	.word	0x0bad0000

00001acc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1acc:	4b2a      	ldr	r3, [pc, #168]	; (1b78 <gpio_nrfx_config+0xac>)
{
    1ace:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    1ad0:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1ad2:	482a      	ldr	r0, [pc, #168]	; (1b7c <gpio_nrfx_config+0xb0>)
    1ad4:	4013      	ands	r3, r2
    1ad6:	4283      	cmp	r3, r0
    1ad8:	d03e      	beq.n	1b58 <gpio_nrfx_config+0x8c>
    1ada:	d80d      	bhi.n	1af8 <gpio_nrfx_config+0x2c>
    1adc:	2b06      	cmp	r3, #6
    1ade:	d015      	beq.n	1b0c <gpio_nrfx_config+0x40>
    1ae0:	d805      	bhi.n	1aee <gpio_nrfx_config+0x22>
    1ae2:	b19b      	cbz	r3, 1b0c <gpio_nrfx_config+0x40>
    1ae4:	2b02      	cmp	r3, #2
    1ae6:	d039      	beq.n	1b5c <gpio_nrfx_config+0x90>
    1ae8:	f06f 0015 	mvn.w	r0, #21
    1aec:	e033      	b.n	1b56 <gpio_nrfx_config+0x8a>
    1aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1af2:	d1f9      	bne.n	1ae8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1af4:	2301      	movs	r3, #1
    1af6:	e009      	b.n	1b0c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1af8:	4821      	ldr	r0, [pc, #132]	; (1b80 <gpio_nrfx_config+0xb4>)
    1afa:	4283      	cmp	r3, r0
    1afc:	d030      	beq.n	1b60 <gpio_nrfx_config+0x94>
    1afe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1b02:	d02f      	beq.n	1b64 <gpio_nrfx_config+0x98>
    1b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1b08:	d1ee      	bne.n	1ae8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1b0a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1b0c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    1b0e:	bf54      	ite	pl
    1b10:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1b14:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1b16:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1b1a:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    1b1e:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1b22:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1b26:	d007      	beq.n	1b38 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1b28:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1b2c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1b2e:	d01b      	beq.n	1b68 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1b30:	2201      	movs	r2, #1
    1b32:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    1b34:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1b38:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    1b3c:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1b40:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    1b44:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    1b48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1b4c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    1b50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    1b54:	2000      	movs	r0, #0
}
    1b56:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1b58:	2307      	movs	r3, #7
    1b5a:	e7d7      	b.n	1b0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1b5c:	2304      	movs	r3, #4
    1b5e:	e7d5      	b.n	1b0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1b60:	2305      	movs	r3, #5
    1b62:	e7d3      	b.n	1b0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1b64:	2303      	movs	r3, #3
    1b66:	e7d1      	b.n	1b0c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1b68:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1b6a:	bf42      	ittt	mi
    1b6c:	2201      	movmi	r2, #1
    1b6e:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1b70:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    1b74:	e7e0      	b.n	1b38 <gpio_nrfx_config+0x6c>
    1b76:	bf00      	nop
    1b78:	00f00006 	.word	0x00f00006
    1b7c:	00100006 	.word	0x00100006
    1b80:	00400002 	.word	0x00400002

00001b84 <gpiote_event_handler>:
{
    1b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1b88:	4b41      	ldr	r3, [pc, #260]	; (1c90 <gpiote_event_handler+0x10c>)
    1b8a:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
    1b8e:	2d00      	cmp	r5, #0
    1b90:	d059      	beq.n	1c46 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    1b92:	4b40      	ldr	r3, [pc, #256]	; (1c94 <gpiote_event_handler+0x110>)
    return p_reg->IN;
    1b94:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
    1b98:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    1b9c:	68df      	ldr	r7, [r3, #12]
    1b9e:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1ba2:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    1ba4:	430a      	orrs	r2, r1
    1ba6:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1baa:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    1bac:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
    1bb0:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
    1bb2:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    1bb4:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
    1bb8:	bb82      	cbnz	r2, 1c1c <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1bba:	4b35      	ldr	r3, [pc, #212]	; (1c90 <gpiote_event_handler+0x10c>)
    1bbc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    1bc0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1bc4:	4a34      	ldr	r2, [pc, #208]	; (1c98 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
    1bc6:	4832      	ldr	r0, [pc, #200]	; (1c90 <gpiote_event_handler+0x10c>)
    1bc8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1bca:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1bcc:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    1bce:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    1bd2:	fa06 fc03 	lsl.w	ip, r6, r3
    1bd6:	ea1c 0f01 	tst.w	ip, r1
    1bda:	d00c      	beq.n	1bf6 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1bdc:	6811      	ldr	r1, [r2, #0]
    1bde:	b151      	cbz	r1, 1bf6 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1be0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    1be4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1be8:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1bea:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1bee:	fa06 f101 	lsl.w	r1, r6, r1
    1bf2:	430c      	orrs	r4, r1
    1bf4:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1bf6:	3301      	adds	r3, #1
    1bf8:	2b08      	cmp	r3, #8
    1bfa:	f102 0204 	add.w	r2, r2, #4
    1bfe:	d1e6      	bne.n	1bce <gpiote_event_handler+0x4a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_FIRE_CALLBACKS)
    1c00:	bb1c      	cbnz	r4, 1c4a <gpiote_event_handler+0xc6>
	if (port_event) {
    1c02:	b14d      	cbz	r5, 1c18 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
    1c04:	4e23      	ldr	r6, [pc, #140]	; (1c94 <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
    1c06:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
    1c0a:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    1c0c:	430b      	orrs	r3, r1
    1c0e:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
    1c12:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    1c14:	2500      	movs	r5, #0
	while (level_pins) {
    1c16:	bb4a      	cbnz	r2, 1c6c <gpiote_event_handler+0xe8>
}
    1c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
    1c1c:	4216      	tst	r6, r2
    1c1e:	d00e      	beq.n	1c3e <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    1c20:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1c22:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    1c26:	bf08      	it	eq
    1c28:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1c2c:	f04f 0100 	mov.w	r1, #0
    1c30:	bf08      	it	eq
    1c32:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    1c36:	f002 fd06 	bl	4646 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    1c3a:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    1c3e:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    1c42:	0076      	lsls	r6, r6, #1
    1c44:	e7b8      	b.n	1bb8 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1c46:	462c      	mov	r4, r5
    1c48:	e7bc      	b.n	1bc4 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    1c4a:	4b12      	ldr	r3, [pc, #72]	; (1c94 <gpiote_event_handler+0x110>)
    1c4c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1c4e:	2900      	cmp	r1, #0
    1c50:	d0d7      	beq.n	1c02 <gpiote_event_handler+0x7e>
    1c52:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1c54:	4f11      	ldr	r7, [pc, #68]	; (1c9c <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
    1c56:	688a      	ldr	r2, [r1, #8]
    1c58:	4022      	ands	r2, r4
    1c5a:	d002      	beq.n	1c62 <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
    1c5c:	684b      	ldr	r3, [r1, #4]
    1c5e:	4638      	mov	r0, r7
    1c60:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1c62:	2e00      	cmp	r6, #0
    1c64:	d0cd      	beq.n	1c02 <gpiote_event_handler+0x7e>
    1c66:	4631      	mov	r1, r6
    1c68:	6836      	ldr	r6, [r6, #0]
    1c6a:	e7f4      	b.n	1c56 <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    1c6c:	4214      	tst	r4, r2
    1c6e:	d00c      	beq.n	1c8a <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1c70:	6931      	ldr	r1, [r6, #16]
    1c72:	40e9      	lsrs	r1, r5
    1c74:	f001 0101 	and.w	r1, r1, #1
    1c78:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1c7c:	b2c9      	uxtb	r1, r1
    1c7e:	f005 001f 	and.w	r0, r5, #31
    1c82:	f002 fce0 	bl	4646 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    1c86:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
    1c8a:	3501      	adds	r5, #1
		bit <<= 1;
    1c8c:	0064      	lsls	r4, r4, #1
    1c8e:	e7c2      	b.n	1c16 <gpiote_event_handler+0x92>
    1c90:	40006000 	.word	0x40006000
    1c94:	20000420 	.word	0x20000420
    1c98:	40006100 	.word	0x40006100
    1c9c:	00005344 	.word	0x00005344

00001ca0 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    1ca0:	b508      	push	{r3, lr}
	return dev->config;
    1ca2:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    1ca4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    1ca8:	f001 f990 	bl	2fcc <nrfx_twi_twim_bus_recover>
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    1cac:	4b03      	ldr	r3, [pc, #12]	; (1cbc <i2c_nrfx_twim_recover_bus+0x1c>)
    1cae:	4298      	cmp	r0, r3
}
    1cb0:	bf14      	ite	ne
    1cb2:	f06f 000f 	mvnne.w	r0, #15
    1cb6:	2000      	moveq	r0, #0
    1cb8:	bd08      	pop	{r3, pc}
    1cba:	bf00      	nop
    1cbc:	0bad0000 	.word	0x0bad0000

00001cc0 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    1cc0:	b510      	push	{r4, lr}
    1cc2:	4604      	mov	r4, r0
    1cc4:	2200      	movs	r2, #0
    1cc6:	2101      	movs	r1, #1
    1cc8:	2003      	movs	r0, #3
    1cca:	f7ff f90d 	bl	ee8 <z_arm_irq_priority_set>
	return dev->config;
    1cce:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    1cd0:	6923      	ldr	r3, [r4, #16]
    1cd2:	4a06      	ldr	r2, [pc, #24]	; (1cec <twim_0_init+0x2c>)
    1cd4:	f100 0108 	add.w	r1, r0, #8
    1cd8:	f000 ff76 	bl	2bc8 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    1cdc:	4b04      	ldr	r3, [pc, #16]	; (1cf0 <twim_0_init+0x30>)
		return -EBUSY;
    1cde:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
    1ce0:	bf14      	ite	ne
    1ce2:	f06f 000f 	mvnne.w	r0, #15
    1ce6:	2000      	moveq	r0, #0
    1ce8:	bd10      	pop	{r4, pc}
    1cea:	bf00      	nop
    1cec:	00001cf5 	.word	0x00001cf5
    1cf0:	0bad0000 	.word	0x0bad0000

00001cf4 <event_handler>:
	switch (p_event->type) {
    1cf4:	7803      	ldrb	r3, [r0, #0]
    1cf6:	2b01      	cmp	r3, #1
    1cf8:	d008      	beq.n	1d0c <event_handler+0x18>
    1cfa:	2b02      	cmp	r3, #2
    1cfc:	d008      	beq.n	1d10 <event_handler+0x1c>
    1cfe:	b94b      	cbnz	r3, 1d14 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    1d00:	4b05      	ldr	r3, [pc, #20]	; (1d18 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1d02:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1d04:	f101 0010 	add.w	r0, r1, #16
    1d08:	f001 bbea 	b.w	34e0 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <event_handler+0x28>)
    1d0e:	e7f8      	b.n	1d02 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1d10:	4b03      	ldr	r3, [pc, #12]	; (1d20 <event_handler+0x2c>)
    1d12:	e7f6      	b.n	1d02 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    1d14:	4b03      	ldr	r3, [pc, #12]	; (1d24 <event_handler+0x30>)
    1d16:	e7f4      	b.n	1d02 <event_handler+0xe>
    1d18:	0bad0000 	.word	0x0bad0000
    1d1c:	0bae0001 	.word	0x0bae0001
    1d20:	0bae0002 	.word	0x0bae0002
    1d24:	0bad0001 	.word	0x0bad0001

00001d28 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    1d28:	b510      	push	{r4, lr}
    1d2a:	4604      	mov	r4, r0
    1d2c:	2200      	movs	r2, #0
    1d2e:	2101      	movs	r1, #1
    1d30:	2004      	movs	r0, #4
    1d32:	f7ff f8d9 	bl	ee8 <z_arm_irq_priority_set>
	return dev->config;
    1d36:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    1d38:	6923      	ldr	r3, [r4, #16]
    1d3a:	4a06      	ldr	r2, [pc, #24]	; (1d54 <twim_1_init+0x2c>)
    1d3c:	f100 0108 	add.w	r1, r0, #8
    1d40:	f000 ff42 	bl	2bc8 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    1d44:	4b04      	ldr	r3, [pc, #16]	; (1d58 <twim_1_init+0x30>)
		return -EBUSY;
    1d46:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(1);
    1d48:	bf14      	ite	ne
    1d4a:	f06f 000f 	mvnne.w	r0, #15
    1d4e:	2000      	moveq	r0, #0
    1d50:	bd10      	pop	{r4, pc}
    1d52:	bf00      	nop
    1d54:	00001cf5 	.word	0x00001cf5
    1d58:	0bad0000 	.word	0x0bad0000

00001d5c <i2c_nrfx_twim_transfer>:
{
    1d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return dev->config;
    1d60:	6846      	ldr	r6, [r0, #4]
	return dev->data;
    1d62:	6907      	ldr	r7, [r0, #16]
{
    1d64:	b089      	sub	sp, #36	; 0x24
    1d66:	461d      	mov	r5, r3
    1d68:	460c      	mov	r4, r1
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    1d6a:	8b33      	ldrh	r3, [r6, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    1d6c:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    1d70:	9300      	str	r3, [sp, #0]
{
    1d72:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    1d74:	2100      	movs	r1, #0
    1d76:	2214      	movs	r2, #20
    1d78:	a803      	add	r0, sp, #12
    1d7a:	f002 fbab 	bl	44d4 <memset>
    1d7e:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
    1d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d8a:	4638      	mov	r0, r7
    1d8c:	f001 fbc8 	bl	3520 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    1d90:	f107 0a10 	add.w	sl, r7, #16
    1d94:	2200      	movs	r2, #0
    1d96:	2300      	movs	r3, #0
    1d98:	4650      	mov	r0, sl
    1d9a:	f001 fbc1 	bl	3520 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    1d9e:	4630      	mov	r0, r6
    1da0:	f000 ff58 	bl	2c54 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    1da4:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    1da8:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    1daa:	45d8      	cmp	r8, fp
    1dac:	d301      	bcc.n	1db2 <i2c_nrfx_twim_transfer+0x56>
    1dae:	2400      	movs	r4, #0
    1db0:	e049      	b.n	1e46 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    1db2:	7a21      	ldrb	r1, [r4, #8]
    1db4:	070a      	lsls	r2, r1, #28
    1db6:	f100 808f 	bmi.w	1ed8 <i2c_nrfx_twim_transfer+0x17c>
		bool concat_next = ((i + 1) < num_msgs)
    1dba:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    1dbe:	45d8      	cmp	r8, fp
    1dc0:	6862      	ldr	r2, [r4, #4]
    1dc2:	d20a      	bcs.n	1dda <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    1dc4:	078b      	lsls	r3, r1, #30
    1dc6:	d408      	bmi.n	1dda <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    1dc8:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    1dca:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    1dce:	f000 0001 	and.w	r0, r0, #1
    1dd2:	f003 0304 	and.w	r3, r3, #4
    1dd6:	4303      	orrs	r3, r0
    1dd8:	d016      	beq.n	1e08 <i2c_nrfx_twim_transfer+0xac>
		if (concat_next || (msg_buf_used != 0)) {
    1dda:	b1bd      	cbz	r5, 1e0c <i2c_nrfx_twim_transfer+0xb0>
				&& ((msgs[i].flags & I2C_MSG_READ)
    1ddc:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    1dde:	f8dd c000 	ldr.w	ip, [sp]
    1de2:	18a8      	adds	r0, r5, r2
    1de4:	4560      	cmp	r0, ip
    1de6:	d87a      	bhi.n	1ede <i2c_nrfx_twim_transfer+0x182>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    1de8:	07c8      	lsls	r0, r1, #31
    1dea:	d406      	bmi.n	1dfa <i2c_nrfx_twim_transfer+0x9e>
				memcpy(msg_buf + msg_buf_used,
    1dec:	6821      	ldr	r1, [r4, #0]
    1dee:	9301      	str	r3, [sp, #4]
    1df0:	eb09 0005 	add.w	r0, r9, r5
    1df4:	f002 fb63 	bl	44be <memcpy>
    1df8:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    1dfa:	6862      	ldr	r2, [r4, #4]
    1dfc:	4415      	add	r5, r2
    1dfe:	b2ad      	uxth	r5, r5
		if (concat_next) {
    1e00:	2b00      	cmp	r3, #0
    1e02:	d037      	beq.n	1e74 <i2c_nrfx_twim_transfer+0x118>
    1e04:	340c      	adds	r4, #12
    1e06:	e7d0      	b.n	1daa <i2c_nrfx_twim_transfer+0x4e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    1e08:	2301      	movs	r3, #1
    1e0a:	e7e8      	b.n	1dde <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    1e0c:	07c9      	lsls	r1, r1, #31
    1e0e:	d524      	bpl.n	1e5a <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
    1e10:	6823      	ldr	r3, [r4, #0]
    1e12:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    1e14:	6863      	ldr	r3, [r4, #4]
    1e16:	9304      	str	r3, [sp, #16]
    1e18:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    1e1a:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    1e1c:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    1e20:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    1e24:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    1e28:	a903      	add	r1, sp, #12
    1e2a:	bf0c      	ite	eq
    1e2c:	2220      	moveq	r2, #32
    1e2e:	2200      	movne	r2, #0
    1e30:	4630      	mov	r0, r6
    1e32:	f000 ff3d 	bl	2cb0 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    1e36:	4b2e      	ldr	r3, [pc, #184]	; (1ef0 <i2c_nrfx_twim_transfer+0x194>)
    1e38:	4298      	cmp	r0, r3
    1e3a:	d021      	beq.n	1e80 <i2c_nrfx_twim_transfer+0x124>
			if (res == NRFX_ERROR_BUSY) {
    1e3c:	330b      	adds	r3, #11
    1e3e:	4298      	cmp	r0, r3
    1e40:	d053      	beq.n	1eea <i2c_nrfx_twim_transfer+0x18e>
			ret = -EIO;
    1e42:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    1e46:	4630      	mov	r0, r6
    1e48:	f000 ff14 	bl	2c74 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    1e4c:	4638      	mov	r0, r7
    1e4e:	f001 fb47 	bl	34e0 <z_impl_k_sem_give>
}
    1e52:	4620      	mov	r0, r4
    1e54:	b009      	add	sp, #36	; 0x24
    1e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    1e5a:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    1e5c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    1e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1e64:	d0d4      	beq.n	1e10 <i2c_nrfx_twim_transfer+0xb4>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    1e66:	8b73      	ldrh	r3, [r6, #26]
    1e68:	4293      	cmp	r3, r2
    1e6a:	d33b      	bcc.n	1ee4 <i2c_nrfx_twim_transfer+0x188>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    1e6c:	4648      	mov	r0, r9
    1e6e:	f002 fb26 	bl	44be <memcpy>
			msg_buf_used = msgs[i].len;
    1e72:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    1e74:	2d00      	cmp	r5, #0
    1e76:	d0cb      	beq.n	1e10 <i2c_nrfx_twim_transfer+0xb4>
			cur_xfer.p_primary_buf = msg_buf;
    1e78:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    1e7c:	9504      	str	r5, [sp, #16]
    1e7e:	e7cc      	b.n	1e1a <i2c_nrfx_twim_transfer+0xbe>
	return z_impl_k_sem_take(sem, timeout);
    1e80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1e84:	2300      	movs	r3, #0
    1e86:	4650      	mov	r0, sl
    1e88:	f001 fb4a 	bl	3520 <z_impl_k_sem_take>
		if (ret != 0) {
    1e8c:	b138      	cbz	r0, 1e9e <i2c_nrfx_twim_transfer+0x142>
			nrfx_twim_disable(&dev_config->twim);
    1e8e:	4630      	mov	r0, r6
    1e90:	f000 fef0 	bl	2c74 <nrfx_twim_disable>
    1e94:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    1e98:	f001 f898 	bl	2fcc <nrfx_twi_twim_bus_recover>
    1e9c:	e7d1      	b.n	1e42 <i2c_nrfx_twim_transfer+0xe6>
		res = dev_data->res;
    1e9e:	6a3b      	ldr	r3, [r7, #32]
		if (res != NRFX_SUCCESS) {
    1ea0:	4a13      	ldr	r2, [pc, #76]	; (1ef0 <i2c_nrfx_twim_transfer+0x194>)
    1ea2:	4293      	cmp	r3, r2
    1ea4:	d1cd      	bne.n	1e42 <i2c_nrfx_twim_transfer+0xe6>
		if ((msgs[i].flags & I2C_MSG_READ)
    1ea6:	7a23      	ldrb	r3, [r4, #8]
    1ea8:	07db      	lsls	r3, r3, #31
    1eaa:	d401      	bmi.n	1eb0 <i2c_nrfx_twim_transfer+0x154>
		msg_buf_used = 0;
    1eac:	2500      	movs	r5, #0
    1eae:	e7a9      	b.n	1e04 <i2c_nrfx_twim_transfer+0xa8>
		    && cur_xfer.p_primary_buf == msg_buf) {
    1eb0:	9b06      	ldr	r3, [sp, #24]
    1eb2:	4599      	cmp	r9, r3
    1eb4:	d1fa      	bne.n	1eac <i2c_nrfx_twim_transfer+0x150>
    1eb6:	4623      	mov	r3, r4
    1eb8:	e008      	b.n	1ecc <i2c_nrfx_twim_transfer+0x170>
				msg_buf_used -= msgs[j].len;
    1eba:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    1ebc:	68d8      	ldr	r0, [r3, #12]
    1ebe:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
    1ec0:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    1ec2:	fa19 f181 	uxtah	r1, r9, r1
    1ec6:	f002 fafa 	bl	44be <memcpy>
				j--;
    1eca:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    1ecc:	685a      	ldr	r2, [r3, #4]
    1ece:	4295      	cmp	r5, r2
    1ed0:	f1a3 030c 	sub.w	r3, r3, #12
    1ed4:	d2f1      	bcs.n	1eba <i2c_nrfx_twim_transfer+0x15e>
    1ed6:	e7e9      	b.n	1eac <i2c_nrfx_twim_transfer+0x150>
			ret = -ENOTSUP;
    1ed8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    1edc:	e7b3      	b.n	1e46 <i2c_nrfx_twim_transfer+0xea>
				ret = -ENOSPC;
    1ede:	f06f 041b 	mvn.w	r4, #27
    1ee2:	e7b0      	b.n	1e46 <i2c_nrfx_twim_transfer+0xea>
				ret = -EINVAL;
    1ee4:	f06f 0415 	mvn.w	r4, #21
    1ee8:	e7ad      	b.n	1e46 <i2c_nrfx_twim_transfer+0xea>
				ret = -EBUSY;
    1eea:	f06f 040f 	mvn.w	r4, #15
    1eee:	e7aa      	b.n	1e46 <i2c_nrfx_twim_transfer+0xea>
    1ef0:	0bad0000 	.word	0x0bad0000

00001ef4 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
    1ef4:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
    1ef6:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
    1ef8:	4908      	ldr	r1, [pc, #32]	; (1f1c <regulator_fixed_init_onoff+0x28>)
{
    1efa:	4604      	mov	r4, r0
	data->dev = dev;
    1efc:	4628      	mov	r0, r5
    1efe:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
    1f02:	f002 f98c 	bl	421e <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
    1f06:	4906      	ldr	r1, [pc, #24]	; (1f20 <regulator_fixed_init_onoff+0x2c>)
    1f08:	f105 0020 	add.w	r0, r5, #32
    1f0c:	f003 f898 	bl	5040 <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
    1f10:	6860      	ldr	r0, [r4, #4]
    1f12:	f002 fe5c 	bl	4bce <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
    1f16:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    1f1a:	bd38      	pop	{r3, r4, r5, pc}
    1f1c:	00005774 	.word	0x00005774
    1f20:	00004c39 	.word	0x00004c39

00001f24 <finalize_transition>:
{
    1f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
    1f28:	1e1c      	subs	r4, r3, #0
{
    1f2a:	4605      	mov	r5, r0
    1f2c:	460f      	mov	r7, r1
    1f2e:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
    1f30:	db10      	blt.n	1f54 <finalize_transition+0x30>
    1f32:	b17a      	cbz	r2, 1f54 <finalize_transition+0x30>
    1f34:	ea4f 4952 	mov.w	r9, r2, lsr #17
    1f38:	03d6      	lsls	r6, r2, #15
    1f3a:	2300      	movs	r3, #0
    1f3c:	4a14      	ldr	r2, [pc, #80]	; (1f90 <finalize_transition+0x6c>)
    1f3e:	4630      	mov	r0, r6
    1f40:	4649      	mov	r1, r9
    1f42:	f7fe f8cb 	bl	dc <__aeabi_uldivmod>
		    || k_is_pre_kernel()
    1f46:	b110      	cbz	r0, 1f4e <finalize_transition+0x2a>
	return !z_sys_post_kernel;
    1f48:	4b12      	ldr	r3, [pc, #72]	; (1f94 <finalize_transition+0x70>)
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	b943      	cbnz	r3, 1f60 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    1f4e:	4640      	mov	r0, r8
    1f50:	f003 f985 	bl	525e <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
    1f54:	4621      	mov	r1, r4
    1f56:	1d28      	adds	r0, r5, #4
    1f58:	463b      	mov	r3, r7
}
    1f5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
    1f5e:	4718      	bx	r3
		} else {
			return (t * to_hz + off) / from_hz;
    1f60:	480d      	ldr	r0, [pc, #52]	; (1f98 <finalize_transition+0x74>)
    1f62:	4a0b      	ldr	r2, [pc, #44]	; (1f90 <finalize_transition+0x6c>)
			data->notify = notify;
    1f64:	652f      	str	r7, [r5, #80]	; 0x50
    1f66:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
    1f68:	f04f 0303 	mov.w	r3, #3
    1f6c:	f149 0100 	adc.w	r1, r9, #0
    1f70:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    1f74:	2300      	movs	r3, #0
    1f76:	f7fe f8b1 	bl	dc <__aeabi_uldivmod>
    1f7a:	4602      	mov	r2, r0
    1f7c:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
    1f7e:	f105 0020 	add.w	r0, r5, #32
    1f82:	f001 fc3d 	bl	3800 <k_work_schedule>
			if (rc >= 0) {
    1f86:	1e04      	subs	r4, r0, #0
    1f88:	dbe4      	blt.n	1f54 <finalize_transition+0x30>
}
    1f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f8e:	bf00      	nop
    1f90:	000f4240 	.word	0x000f4240
    1f94:	20000a34 	.word	0x20000a34
    1f98:	000f423f 	.word	0x000f423f

00001f9c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1f9e:	794b      	ldrb	r3, [r1, #5]
    1fa0:	2b01      	cmp	r3, #1
    1fa2:	d124      	bne.n	1fee <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1fa4:	798b      	ldrb	r3, [r1, #6]
    1fa6:	2b03      	cmp	r3, #3
    1fa8:	d121      	bne.n	1fee <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1faa:	79cc      	ldrb	r4, [r1, #7]
    1fac:	b12c      	cbz	r4, 1fba <uarte_nrfx_configure+0x1e>
    1fae:	2c01      	cmp	r4, #1
    1fb0:	d11d      	bne.n	1fee <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    1fb2:	6843      	ldr	r3, [r0, #4]
    1fb4:	685b      	ldr	r3, [r3, #4]
    1fb6:	079b      	lsls	r3, r3, #30
    1fb8:	d019      	beq.n	1fee <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1fba:	790a      	ldrb	r2, [r1, #4]
    1fbc:	b112      	cbz	r2, 1fc4 <uarte_nrfx_configure+0x28>
    1fbe:	2a02      	cmp	r2, #2
    1fc0:	d115      	bne.n	1fee <uarte_nrfx_configure+0x52>
    1fc2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1fc4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1fc6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1fc8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1fcc:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1fce:	d062      	beq.n	2096 <uarte_nrfx_configure+0xfa>
    1fd0:	d82b      	bhi.n	202a <uarte_nrfx_configure+0x8e>
    1fd2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1fd6:	d061      	beq.n	209c <uarte_nrfx_configure+0x100>
    1fd8:	d814      	bhi.n	2004 <uarte_nrfx_configure+0x68>
    1fda:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1fde:	d05f      	beq.n	20a0 <uarte_nrfx_configure+0x104>
    1fe0:	d808      	bhi.n	1ff4 <uarte_nrfx_configure+0x58>
    1fe2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1fe6:	d05e      	beq.n	20a6 <uarte_nrfx_configure+0x10a>
    1fe8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1fec:	d05e      	beq.n	20ac <uarte_nrfx_configure+0x110>
    1fee:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1ff2:	e04f      	b.n	2094 <uarte_nrfx_configure+0xf8>
    1ff4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1ff8:	d05b      	beq.n	20b2 <uarte_nrfx_configure+0x116>
    1ffa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ffe:	d1f6      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2000:	4b36      	ldr	r3, [pc, #216]	; (20dc <uarte_nrfx_configure+0x140>)
    2002:	e03c      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2004:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2008:	d056      	beq.n	20b8 <uarte_nrfx_configure+0x11c>
    200a:	d807      	bhi.n	201c <uarte_nrfx_configure+0x80>
    200c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2010:	d054      	beq.n	20bc <uarte_nrfx_configure+0x120>
    2012:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2016:	d1ea      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2018:	4b31      	ldr	r3, [pc, #196]	; (20e0 <uarte_nrfx_configure+0x144>)
    201a:	e030      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    201c:	f647 2612 	movw	r6, #31250	; 0x7a12
    2020:	42b3      	cmp	r3, r6
    2022:	d1e4      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2024:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2028:	e029      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    202a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    202e:	d047      	beq.n	20c0 <uarte_nrfx_configure+0x124>
    2030:	d813      	bhi.n	205a <uarte_nrfx_configure+0xbe>
    2032:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2036:	d046      	beq.n	20c6 <uarte_nrfx_configure+0x12a>
    2038:	d809      	bhi.n	204e <uarte_nrfx_configure+0xb2>
    203a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    203e:	42b3      	cmp	r3, r6
    2040:	d043      	beq.n	20ca <uarte_nrfx_configure+0x12e>
    2042:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2046:	d1d2      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2048:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    204c:	e017      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    204e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2052:	d1cc      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2054:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2058:	e011      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    205a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    205e:	d037      	beq.n	20d0 <uarte_nrfx_configure+0x134>
    2060:	d808      	bhi.n	2074 <uarte_nrfx_configure+0xd8>
    2062:	4e20      	ldr	r6, [pc, #128]	; (20e4 <uarte_nrfx_configure+0x148>)
    2064:	42b3      	cmp	r3, r6
    2066:	d036      	beq.n	20d6 <uarte_nrfx_configure+0x13a>
    2068:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    206c:	d1bf      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    206e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2072:	e004      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2074:	4e1c      	ldr	r6, [pc, #112]	; (20e8 <uarte_nrfx_configure+0x14c>)
    2076:	42b3      	cmp	r3, r6
    2078:	d1b9      	bne.n	1fee <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    207a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    207e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2082:	6903      	ldr	r3, [r0, #16]
    2084:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2086:	4322      	orrs	r2, r4
    2088:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    208a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    208e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2092:	2000      	movs	r0, #0
}
    2094:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2096:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    209a:	e7f0      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    209c:	4b13      	ldr	r3, [pc, #76]	; (20ec <uarte_nrfx_configure+0x150>)
    209e:	e7ee      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    20a0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    20a4:	e7eb      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
    20a6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    20aa:	e7e8      	b.n	207e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    20ac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    20b0:	e7e5      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    20b2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    20b6:	e7e2      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    20b8:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <uarte_nrfx_configure+0x154>)
    20ba:	e7e0      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    20bc:	4b0d      	ldr	r3, [pc, #52]	; (20f4 <uarte_nrfx_configure+0x158>)
    20be:	e7de      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    20c0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    20c4:	e7db      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    20c6:	4b0c      	ldr	r3, [pc, #48]	; (20f8 <uarte_nrfx_configure+0x15c>)
    20c8:	e7d9      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    20ca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    20ce:	e7d6      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    20d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    20d4:	e7d3      	b.n	207e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    20d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    20da:	e7d0      	b.n	207e <uarte_nrfx_configure+0xe2>
    20dc:	0013b000 	.word	0x0013b000
    20e0:	004ea000 	.word	0x004ea000
    20e4:	0003d090 	.word	0x0003d090
    20e8:	000f4240 	.word	0x000f4240
    20ec:	00275000 	.word	0x00275000
    20f0:	0075c000 	.word	0x0075c000
    20f4:	003af000 	.word	0x003af000
    20f8:	013a9000 	.word	0x013a9000

000020fc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    20fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    20fe:	6906      	ldr	r6, [r0, #16]
{
    2100:	4605      	mov	r5, r0
    2102:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2104:	f002 ff59 	bl	4fba <k_is_in_isr>
    2108:	b910      	cbnz	r0, 2110 <uarte_nrfx_poll_out+0x14>
    210a:	4b2c      	ldr	r3, [pc, #176]	; (21bc <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    210c:	781b      	ldrb	r3, [r3, #0]
    210e:	b983      	cbnz	r3, 2132 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2110:	f04f 0320 	mov.w	r3, #32
    2114:	f3ef 8411 	mrs	r4, BASEPRI
    2118:	f383 8812 	msr	BASEPRI_MAX, r3
    211c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2120:	6868      	ldr	r0, [r5, #4]
    2122:	f002 fe27 	bl	4d74 <is_tx_ready.isra.0>
    2126:	bb28      	cbnz	r0, 2174 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2128:	f384 8811 	msr	BASEPRI, r4
    212c:	f3bf 8f6f 	isb	sy
}
    2130:	e7ee      	b.n	2110 <uarte_nrfx_poll_out+0x14>
{
    2132:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2134:	6868      	ldr	r0, [r5, #4]
    2136:	f002 fe1d 	bl	4d74 <is_tx_ready.isra.0>
    213a:	b970      	cbnz	r0, 215a <uarte_nrfx_poll_out+0x5e>
    213c:	2001      	movs	r0, #1
    213e:	f002 fe74 	bl	4e2a <nrfx_busy_wait>
    2142:	3c01      	subs	r4, #1
    2144:	d1f6      	bne.n	2134 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    2146:	2100      	movs	r1, #0
    2148:	2021      	movs	r0, #33	; 0x21
    214a:	f001 fded 	bl	3d28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    214e:	e7f0      	b.n	2132 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2150:	f384 8811 	msr	BASEPRI, r4
    2154:	f3bf 8f6f 	isb	sy
}
    2158:	e7f5      	b.n	2146 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    215a:	f04f 0320 	mov.w	r3, #32
    215e:	f3ef 8411 	mrs	r4, BASEPRI
    2162:	f383 8812 	msr	BASEPRI_MAX, r3
    2166:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    216a:	6868      	ldr	r0, [r5, #4]
    216c:	f002 fe02 	bl	4d74 <is_tx_ready.isra.0>
    2170:	2800      	cmp	r0, #0
    2172:	d0ed      	beq.n	2150 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2174:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2178:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    217a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    217c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    217e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2182:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2186:	2200      	movs	r2, #0
    2188:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    218c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2190:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2194:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2198:	684a      	ldr	r2, [r1, #4]
    219a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    219c:	bf41      	itttt	mi
    219e:	2208      	movmi	r2, #8
    21a0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    21a4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    21a8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21ac:	2201      	movs	r2, #1
    21ae:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    21b0:	f384 8811 	msr	BASEPRI, r4
    21b4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    21b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ba:	bf00      	nop
    21bc:	20000a34 	.word	0x20000a34

000021c0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    21c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c2:	2200      	movs	r2, #0
    21c4:	4607      	mov	r7, r0
    21c6:	2101      	movs	r1, #1
    21c8:	2002      	movs	r0, #2
    21ca:	f7fe fe8d 	bl	ee8 <z_arm_irq_priority_set>
    21ce:	2002      	movs	r0, #2
    21d0:	f7fe fe6c 	bl	eac <arch_irq_enable>
	return dev->config;
    21d4:	687d      	ldr	r5, [r7, #4]
	return dev->data;
    21d6:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    21d8:	682c      	ldr	r4, [r5, #0]
	nrf_gpio_pin_write(cfg->pseltxd, 1);
    21da:	f8d5 c008 	ldr.w	ip, [r5, #8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    21de:	2300      	movs	r3, #0
    21e0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
    21e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    *p_pin = pin_number & 0x1F;
    21e8:	f00c 031f 	and.w	r3, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    21ec:	2201      	movs	r2, #1
    21ee:	409a      	lsls	r2, r3
    reg->PIN_CNF[pin_number] = cnf;
    21f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
	data->dev = dev;
    21f4:	6037      	str	r7, [r6, #0]
    p_reg->OUTSET = set_mask;
    21f6:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    21fa:	2203      	movs	r2, #3
    21fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2200:	68ea      	ldr	r2, [r5, #12]
    2202:	1c50      	adds	r0, r2, #1
    2204:	d007      	beq.n	2216 <uarte_0_init+0x56>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2206:	7e28      	ldrb	r0, [r5, #24]
    *p_pin = pin_number & 0x1F;
    2208:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    220c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2210:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    2212:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    2216:	f8c4 c50c 	str.w	ip, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    221a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    221e:	692a      	ldr	r2, [r5, #16]
    2220:	1c53      	adds	r3, r2, #1
    2222:	d009      	beq.n	2238 <uarte_0_init+0x78>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2224:	7e69      	ldrb	r1, [r5, #25]
    *p_pin = pin_number & 0x1F;
    2226:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    222a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    222e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2232:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    2234:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    2238:	6969      	ldr	r1, [r5, #20]
    223a:	1c48      	adds	r0, r1, #1
    223c:	d00c      	beq.n	2258 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
    223e:	f001 031f 	and.w	r3, r1, #31
    p_reg->OUTSET = set_mask;
    2242:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2246:	2001      	movs	r0, #1
    2248:	4098      	lsls	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
    224a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    224e:	f8cc 0508 	str.w	r0, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    2252:	2003      	movs	r0, #3
    2254:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    2258:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    225c:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    225e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    2262:	1d31      	adds	r1, r6, #4
    2264:	f7ff fe9a 	bl	1f9c <uarte_nrfx_configure>
	if (err) {
    2268:	4607      	mov	r7, r0
    226a:	2800      	cmp	r0, #0
    226c:	d145      	bne.n	22fa <uarte_0_init+0x13a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    226e:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2270:	0719      	lsls	r1, r3, #28
    2272:	d519      	bpl.n	22a8 <uarte_0_init+0xe8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2274:	f106 0012 	add.w	r0, r6, #18
    2278:	f000 fbb4 	bl	29e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    227c:	4b21      	ldr	r3, [pc, #132]	; (2304 <uarte_0_init+0x144>)
    227e:	4298      	cmp	r0, r3
    2280:	d13d      	bne.n	22fe <uarte_0_init+0x13e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2282:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2284:	00c3      	lsls	r3, r0, #3
    2286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    228a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    228e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2292:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2296:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    229a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    229e:	4a1a      	ldr	r2, [pc, #104]	; (2308 <uarte_0_init+0x148>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    22a0:	2301      	movs	r3, #1
    22a2:	4083      	lsls	r3, r0
    22a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    22a8:	2308      	movs	r3, #8
    22aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    22ae:	68eb      	ldr	r3, [r5, #12]
    22b0:	3301      	adds	r3, #1
    22b2:	d00c      	beq.n	22ce <uarte_0_init+0x10e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    22b4:	2300      	movs	r3, #0
    22b6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    22ba:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    22be:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    22c2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    22c6:	2301      	movs	r3, #1
    22c8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22cc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    22ce:	686b      	ldr	r3, [r5, #4]
    22d0:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    22d2:	bf5c      	itt	pl
    22d4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    22d8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    22dc:	06db      	lsls	r3, r3, #27
    22de:	bf44      	itt	mi
    22e0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    22e4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    22e8:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    22ea:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    22ec:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    22f0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22f4:	2301      	movs	r3, #1
    22f6:	60a3      	str	r3, [r4, #8]
    22f8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    22fa:	4638      	mov	r0, r7
    22fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    22fe:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    2302:	e7fa      	b.n	22fa <uarte_0_init+0x13a>
    2304:	0bad0000 	.word	0x0bad0000
    2308:	4001f000 	.word	0x4001f000

0000230c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    230c:	4a04      	ldr	r2, [pc, #16]	; (2320 <sys_clock_timeout_handler+0x14>)
    230e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2310:	1ac8      	subs	r0, r1, r3
    2312:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2316:	4403      	add	r3, r0
    2318:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    231a:	f001 be69 	b.w	3ff0 <sys_clock_announce>
    231e:	bf00      	nop
    2320:	20000450 	.word	0x20000450

00002324 <set_absolute_alarm>:
{
    2324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2328:	0086      	lsls	r6, r0, #2
    232a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    232e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    2332:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    2336:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2338:	b2a4      	uxth	r4, r4
    233a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    233e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    2342:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2346:	f8df 806c 	ldr.w	r8, [pc, #108]	; 23b4 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    234a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    234e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2352:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    2354:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2358:	eba3 0309 	sub.w	r3, r3, r9
    235c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2360:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2364:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    2366:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    236a:	d102      	bne.n	2372 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    236c:	2013      	movs	r0, #19
    236e:	f002 ff76 	bl	525e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2372:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    2376:	1aab      	subs	r3, r5, r2
    2378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    237c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2380:	bf88      	it	hi
    2382:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2384:	2300      	movs	r3, #0
    2386:	6023      	str	r3, [r4, #0]
    2388:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    238a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    238e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2392:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2396:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    239a:	4599      	cmp	r9, r3
    239c:	d006      	beq.n	23ac <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    239e:	1aeb      	subs	r3, r5, r3
    23a0:	3b02      	subs	r3, #2
    23a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    23a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    23aa:	d801      	bhi.n	23b0 <set_absolute_alarm+0x8c>
}
    23ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    23b0:	462b      	mov	r3, r5
    23b2:	e7cf      	b.n	2354 <set_absolute_alarm+0x30>
    23b4:	40011000 	.word	0x40011000

000023b8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    23b8:	b570      	push	{r4, r5, r6, lr}
    23ba:	4d15      	ldr	r5, [pc, #84]	; (2410 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    23bc:	4c15      	ldr	r4, [pc, #84]	; (2414 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    23be:	2600      	movs	r6, #0
    23c0:	682b      	ldr	r3, [r5, #0]
    23c2:	2000      	movs	r0, #0
    23c4:	b106      	cbz	r6, 23c8 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    23c6:	bd70      	pop	{r4, r5, r6, pc}
    23c8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    23cc:	03d2      	lsls	r2, r2, #15
    23ce:	d5fa      	bpl.n	23c6 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23d0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    23d4:	2a00      	cmp	r2, #0
    23d6:	d0f6      	beq.n	23c6 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    23d8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    23dc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    23e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    23e4:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    23e8:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    23ec:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    23f0:	1a72      	subs	r2, r6, r1
    23f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    23f6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    23fa:	bf88      	it	hi
    23fc:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    23fe:	2601      	movs	r6, #1
			if (handler) {
    2400:	b11b      	cbz	r3, 240a <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    2402:	686a      	ldr	r2, [r5, #4]
    2404:	6028      	str	r0, [r5, #0]
    2406:	4798      	blx	r3
    2408:	e7da      	b.n	23c0 <rtc_nrf_isr+0x8>
    240a:	602b      	str	r3, [r5, #0]
}
    240c:	e7db      	b.n	23c6 <rtc_nrf_isr+0xe>
    240e:	bf00      	nop
    2410:	20000444 	.word	0x20000444
    2414:	40011000 	.word	0x40011000

00002418 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    2418:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    241a:	4c0f      	ldr	r4, [pc, #60]	; (2458 <sys_clock_driver_init+0x40>)
    241c:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    241e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    2422:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    2426:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    242a:	4b0c      	ldr	r3, [pc, #48]	; (245c <sys_clock_driver_init+0x44>)
    242c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2430:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2434:	2101      	movs	r1, #1
    2436:	462a      	mov	r2, r5
    2438:	2011      	movs	r0, #17
    243a:	f7fe fd55 	bl	ee8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    243e:	2011      	movs	r0, #17
    2440:	f7fe fd34 	bl	eac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2444:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2446:	4a06      	ldr	r2, [pc, #24]	; (2460 <sys_clock_driver_init+0x48>)
    2448:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    244a:	2002      	movs	r0, #2
    244c:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    244e:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2450:	f7ff f998 	bl	1784 <z_nrf_clock_control_lf_on>

	return 0;
}
    2454:	4628      	mov	r0, r5
    2456:	bd38      	pop	{r3, r4, r5, pc}
    2458:	40011000 	.word	0x40011000
    245c:	e000e100 	.word	0xe000e100
    2460:	2000044c 	.word	0x2000044c

00002464 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2464:	4a13      	ldr	r2, [pc, #76]	; (24b4 <sys_clock_set_timeout+0x50>)
    2466:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    246a:	bf14      	ite	ne
    246c:	4603      	movne	r3, r0
    246e:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2470:	3b01      	subs	r3, #1
    2472:	2b00      	cmp	r3, #0
    2474:	dd1c      	ble.n	24b0 <sys_clock_set_timeout+0x4c>
    2476:	4293      	cmp	r3, r2
    2478:	bfa8      	it	ge
    247a:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    247c:	4a0e      	ldr	r2, [pc, #56]	; (24b8 <sys_clock_set_timeout+0x54>)
    247e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    2482:	4a0e      	ldr	r2, [pc, #56]	; (24bc <sys_clock_set_timeout+0x58>)
    2484:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2486:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    2488:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    248c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    2490:	bf18      	it	ne
    2492:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2494:	3201      	adds	r2, #1
    2496:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    2498:	4a09      	ldr	r2, [pc, #36]	; (24c0 <sys_clock_set_timeout+0x5c>)
    249a:	480a      	ldr	r0, [pc, #40]	; (24c4 <sys_clock_set_timeout+0x60>)
    249c:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    249e:	2000      	movs	r0, #0
    24a0:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    24a2:	4a04      	ldr	r2, [pc, #16]	; (24b4 <sys_clock_set_timeout+0x50>)
    24a4:	4293      	cmp	r3, r2
    24a6:	bf94      	ite	ls
    24a8:	18c9      	addls	r1, r1, r3
    24aa:	1889      	addhi	r1, r1, r2
    24ac:	f7ff bf3a 	b.w	2324 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    24b0:	2300      	movs	r3, #0
    24b2:	e7e3      	b.n	247c <sys_clock_set_timeout+0x18>
    24b4:	007fffff 	.word	0x007fffff
    24b8:	40011000 	.word	0x40011000
    24bc:	20000450 	.word	0x20000450
    24c0:	20000444 	.word	0x20000444
    24c4:	0000230d 	.word	0x0000230d

000024c8 <sys_clock_elapsed>:
    24c8:	4b04      	ldr	r3, [pc, #16]	; (24dc <sys_clock_elapsed+0x14>)
    24ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    24ce:	4b04      	ldr	r3, [pc, #16]	; (24e0 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	1ac0      	subs	r0, r0, r3
}
    24d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24d8:	4770      	bx	lr
    24da:	bf00      	nop
    24dc:	40011000 	.word	0x40011000
    24e0:	20000450 	.word	0x20000450

000024e4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    24e4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    24e8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    24ec:	2a06      	cmp	r2, #6
    24ee:	d109      	bne.n	2504 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    24f0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    24f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    24f8:	3b03      	subs	r3, #3
    24fa:	2b04      	cmp	r3, #4
    24fc:	d802      	bhi.n	2504 <nrf52_errata_16+0x20>
    24fe:	4a02      	ldr	r2, [pc, #8]	; (2508 <nrf52_errata_16+0x24>)
    2500:	5cd0      	ldrb	r0, [r2, r3]
    2502:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2504:	2000      	movs	r0, #0
    #endif
}
    2506:	4770      	bx	lr
    2508:	000058ac 	.word	0x000058ac

0000250c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    250c:	4a02      	ldr	r2, [pc, #8]	; (2518 <nvmc_wait+0xc>)
    250e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2512:	2b00      	cmp	r3, #0
    2514:	d0fb      	beq.n	250e <nvmc_wait+0x2>
}
    2516:	4770      	bx	lr
    2518:	4001e000 	.word	0x4001e000

0000251c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    251c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    251e:	f002 fc75 	bl	4e0c <nrf52_errata_108>
    2522:	b140      	cbz	r0, 2536 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2524:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2528:	4a90      	ldr	r2, [pc, #576]	; (276c <SystemInit+0x250>)
    252a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    252e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2532:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2536:	f7ff ffd5 	bl	24e4 <nrf52_errata_16>
    253a:	b110      	cbz	r0, 2542 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    253c:	4b8c      	ldr	r3, [pc, #560]	; (2770 <SystemInit+0x254>)
    253e:	4a8d      	ldr	r2, [pc, #564]	; (2774 <SystemInit+0x258>)
    2540:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2542:	f002 fc63 	bl	4e0c <nrf52_errata_108>
    2546:	b148      	cbz	r0, 255c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2548:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    254c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2550:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2554:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2558:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    255c:	f7ff ffc2 	bl	24e4 <nrf52_errata_16>
    2560:	b130      	cbz	r0, 2570 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2562:	4a85      	ldr	r2, [pc, #532]	; (2778 <SystemInit+0x25c>)
    2564:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    256c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2570:	f002 fc4c 	bl	4e0c <nrf52_errata_108>
    2574:	b140      	cbz	r0, 2588 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    257a:	2200      	movs	r2, #0
    257c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2580:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2584:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2588:	f7ff ffac 	bl	24e4 <nrf52_errata_16>
    258c:	b120      	cbz	r0, 2598 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    258e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2592:	2203      	movs	r2, #3
    2594:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2598:	f7ff ffa4 	bl	24e4 <nrf52_errata_16>
    259c:	b160      	cbz	r0, 25b8 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    259e:	4b77      	ldr	r3, [pc, #476]	; (277c <SystemInit+0x260>)
    25a0:	2205      	movs	r2, #5
    25a2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    25a6:	2201      	movs	r2, #1
    25a8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    25ac:	2200      	movs	r2, #0
    25ae:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    25b2:	223f      	movs	r2, #63	; 0x3f
    25b4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    25b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    25bc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    25c0:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    25c2:	bf09      	itett	eq
    25c4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    25c8:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    25cc:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    25d0:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    25d4:	bf08      	it	eq
    25d6:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    25da:	2a06      	cmp	r2, #6
    25dc:	d14d      	bne.n	267a <SystemInit+0x15e>
            {
                switch(var2)
    25de:	3b03      	subs	r3, #3
    25e0:	2b04      	cmp	r3, #4
    25e2:	d803      	bhi.n	25ec <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    25e4:	4a66      	ldr	r2, [pc, #408]	; (2780 <SystemInit+0x264>)
    25e6:	5cd3      	ldrb	r3, [r2, r3]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d046      	beq.n	267a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    25ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    25f0:	4b64      	ldr	r3, [pc, #400]	; (2784 <SystemInit+0x268>)
    25f2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    25f6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    25fa:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    25fe:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2602:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2606:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    260a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    260e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2612:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2616:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    261a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    261e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2622:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2626:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    262a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    262e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2632:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2636:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    263a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    263e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2642:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2646:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    264a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    264e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2652:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2656:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    265a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    265e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2662:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2666:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    266a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    266e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2672:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2676:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    267a:	f002 fbc7 	bl	4e0c <nrf52_errata_108>
    267e:	b148      	cbz	r0, 2694 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2688:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    268c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2690:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2694:	f002 fbba 	bl	4e0c <nrf52_errata_108>
    2698:	b148      	cbz	r0, 26ae <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    269a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    269e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    26a2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    26a4:	bf44      	itt	mi
    26a6:	f06f 0201 	mvnmi.w	r2, #1
    26aa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    26ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    26b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    26b6:	2a06      	cmp	r2, #6
    26b8:	d126      	bne.n	2708 <SystemInit+0x1ec>
            {
                switch(var2)
    26ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    26be:	3b03      	subs	r3, #3
    26c0:	2b04      	cmp	r3, #4
    26c2:	d802      	bhi.n	26ca <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    26c4:	4a30      	ldr	r2, [pc, #192]	; (2788 <SystemInit+0x26c>)
    26c6:	5cd3      	ldrb	r3, [r2, r3]
    26c8:	b163      	cbz	r3, 26e4 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    26ca:	4a30      	ldr	r2, [pc, #192]	; (278c <SystemInit+0x270>)
    26cc:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    26d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    26d4:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    26d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    26dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    26e0:	2b06      	cmp	r3, #6
    26e2:	d111      	bne.n	2708 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    26e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    26e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    26ec:	3b03      	subs	r3, #3
    26ee:	2b04      	cmp	r3, #4
    26f0:	d802      	bhi.n	26f8 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    26f2:	4a27      	ldr	r2, [pc, #156]	; (2790 <SystemInit+0x274>)
    26f4:	5cd3      	ldrb	r3, [r2, r3]
    26f6:	b13b      	cbz	r3, 2708 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    26f8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    26fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2704:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2708:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    270c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2710:	2a00      	cmp	r2, #0
    2712:	db03      	blt.n	271c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2714:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2718:	2b00      	cmp	r3, #0
    271a:	da22      	bge.n	2762 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    271c:	491d      	ldr	r1, [pc, #116]	; (2794 <SystemInit+0x278>)
    271e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2720:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2724:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2728:	2415      	movs	r4, #21
    nvmc_wait();
    272a:	f7ff feef 	bl	250c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    272e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2732:	f7ff feeb 	bl	250c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2736:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    273a:	f7ff fee7 	bl	250c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    273e:	2300      	movs	r3, #0
    2740:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2744:	f7ff fee2 	bl	250c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2748:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    274c:	490a      	ldr	r1, [pc, #40]	; (2778 <SystemInit+0x25c>)
    274e:	4b12      	ldr	r3, [pc, #72]	; (2798 <SystemInit+0x27c>)
    2750:	68ca      	ldr	r2, [r1, #12]
    2752:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2756:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2758:	60cb      	str	r3, [r1, #12]
    275a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    275e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2760:	e7fd      	b.n	275e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2762:	4b0e      	ldr	r3, [pc, #56]	; (279c <SystemInit+0x280>)
    2764:	4a0e      	ldr	r2, [pc, #56]	; (27a0 <SystemInit+0x284>)
    2766:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2768:	bd10      	pop	{r4, pc}
    276a:	bf00      	nop
    276c:	40013000 	.word	0x40013000
    2770:	4007c000 	.word	0x4007c000
    2774:	baadf00d 	.word	0xbaadf00d
    2778:	e000ed00 	.word	0xe000ed00
    277c:	40005000 	.word	0x40005000
    2780:	0000589d 	.word	0x0000589d
    2784:	4000c000 	.word	0x4000c000
    2788:	000058a2 	.word	0x000058a2
    278c:	40001000 	.word	0x40001000
    2790:	000058a7 	.word	0x000058a7
    2794:	4001e000 	.word	0x4001e000
    2798:	05fa0004 	.word	0x05fa0004
    279c:	200000a8 	.word	0x200000a8
    27a0:	03d09000 	.word	0x03d09000

000027a4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    27a4:	4b04      	ldr	r3, [pc, #16]	; (27b8 <nrfx_clock_init+0x14>)
    27a6:	791a      	ldrb	r2, [r3, #4]
    27a8:	b922      	cbnz	r2, 27b4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    27aa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    27ac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    27ae:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    27b0:	4802      	ldr	r0, [pc, #8]	; (27bc <nrfx_clock_init+0x18>)
    27b2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    27b4:	4802      	ldr	r0, [pc, #8]	; (27c0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    27b6:	4770      	bx	lr
    27b8:	20000454 	.word	0x20000454
    27bc:	0bad0000 	.word	0x0bad0000
    27c0:	0bad000c 	.word	0x0bad000c

000027c4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    27c4:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    27c6:	b110      	cbz	r0, 27ce <nrfx_clock_start+0xa>
    27c8:	2801      	cmp	r0, #1
    27ca:	d034      	beq.n	2836 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    27cc:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    27ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27d2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    27d6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    27da:	03c9      	lsls	r1, r1, #15
    27dc:	d529      	bpl.n	2832 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    27de:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    27e2:	2a01      	cmp	r2, #1
    27e4:	d125      	bne.n	2832 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    27e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27ee:	2200      	movs	r2, #0
    27f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    27f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    27f8:	2202      	movs	r2, #2
    27fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    27fe:	4a13      	ldr	r2, [pc, #76]	; (284c <nrfx_clock_start+0x88>)
    2800:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    2804:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    2808:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    280c:	4b10      	ldr	r3, [pc, #64]	; (2850 <nrfx_clock_start+0x8c>)
    280e:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    2810:	f044 0101 	orr.w	r1, r4, #1
    2814:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    2816:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    2818:	6859      	ldr	r1, [r3, #4]
    281a:	1b49      	subs	r1, r1, r5
    281c:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    2820:	d3fa      	bcc.n	2818 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    2822:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    2828:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    282c:	2201      	movs	r2, #1
    282e:	609a      	str	r2, [r3, #8]
}
    2830:	e7cc      	b.n	27cc <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2832:	2200      	movs	r2, #0
    2834:	e7d7      	b.n	27e6 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    283a:	2200      	movs	r2, #0
    283c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2840:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    2844:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2848:	6018      	str	r0, [r3, #0]
}
    284a:	e7bf      	b.n	27cc <nrfx_clock_start+0x8>
    284c:	e000ed00 	.word	0xe000ed00
    2850:	e0001000 	.word	0xe0001000

00002854 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2854:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2856:	b110      	cbz	r0, 285e <nrfx_clock_stop+0xa>
    2858:	2801      	cmp	r0, #1
    285a:	d017      	beq.n	288c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    285c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    285e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2862:	2302      	movs	r3, #2
    2864:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2868:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    286c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2870:	2301      	movs	r3, #1
    2872:	60e3      	str	r3, [r4, #12]
    2874:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2878:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    287c:	03db      	lsls	r3, r3, #15
    287e:	d5ed      	bpl.n	285c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2880:	2001      	movs	r0, #1
    2882:	f002 fad2 	bl	4e2a <nrfx_busy_wait>
    2886:	3d01      	subs	r5, #1
    2888:	d1f6      	bne.n	2878 <nrfx_clock_stop+0x24>
    288a:	e7e7      	b.n	285c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    288c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2890:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    2892:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2896:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    289a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    289e:	6060      	str	r0, [r4, #4]
    28a0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    28a4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    28a8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    28ac:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    28ae:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    28b2:	d505      	bpl.n	28c0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    28b4:	b123      	cbz	r3, 28c0 <nrfx_clock_stop+0x6c>
    28b6:	2001      	movs	r0, #1
    28b8:	f002 fab7 	bl	4e2a <nrfx_busy_wait>
    28bc:	3d01      	subs	r5, #1
    28be:	d1f1      	bne.n	28a4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    28c0:	4b01      	ldr	r3, [pc, #4]	; (28c8 <nrfx_clock_stop+0x74>)
    28c2:	2200      	movs	r2, #0
    28c4:	715a      	strb	r2, [r3, #5]
    28c6:	e7c9      	b.n	285c <nrfx_clock_stop+0x8>
    28c8:	20000454 	.word	0x20000454

000028cc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    28cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    28d0:	b510      	push	{r4, lr}
    28d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    28d6:	b16a      	cbz	r2, 28f4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28d8:	2200      	movs	r2, #0
    28da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    28de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    28e2:	2201      	movs	r2, #1
    28e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    28e8:	4b11      	ldr	r3, [pc, #68]	; (2930 <nrfx_power_clock_irq_handler+0x64>)
    28ea:	7958      	ldrb	r0, [r3, #5]
    28ec:	b910      	cbnz	r0, 28f4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    28ee:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    28f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    28fc:	b172      	cbz	r2, 291c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28fe:	2200      	movs	r2, #0
    2900:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2904:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2908:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    290c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2910:	0792      	lsls	r2, r2, #30
    2912:	d104      	bne.n	291e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2914:	2201      	movs	r2, #1
    2916:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    291a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    291c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    291e:	2202      	movs	r2, #2
    2920:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2924:	4b02      	ldr	r3, [pc, #8]	; (2930 <nrfx_power_clock_irq_handler+0x64>)
}
    2926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	2001      	movs	r0, #1
    292e:	4718      	bx	r3
    2930:	20000454 	.word	0x20000454

00002934 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    2934:	2301      	movs	r3, #1
    2936:	fa03 f000 	lsl.w	r0, r3, r0
    293a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    293c:	b193      	cbz	r3, 2964 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    293e:	f04f 0320 	mov.w	r3, #32
    2942:	f3ef 8111 	mrs	r1, BASEPRI
    2946:	f383 8812 	msr	BASEPRI_MAX, r3
    294a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    294e:	4a06      	ldr	r2, [pc, #24]	; (2968 <nrfx_gpiote_channel_free+0x34>)
    2950:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    2952:	ea23 0000 	bic.w	r0, r3, r0
    2956:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    2958:	f381 8811 	msr	BASEPRI, r1
    295c:	f3bf 8f6f 	isb	sy
    2960:	4802      	ldr	r0, [pc, #8]	; (296c <nrfx_gpiote_channel_free+0x38>)
    2962:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    2964:	4802      	ldr	r0, [pc, #8]	; (2970 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2966:	4770      	bx	lr
    2968:	2000045c 	.word	0x2000045c
    296c:	0bad0000 	.word	0x0bad0000
    2970:	0bad0004 	.word	0x0bad0004

00002974 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    2974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2978:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    297a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 29d8 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    297e:	4817      	ldr	r0, [pc, #92]	; (29dc <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    2980:	f8df 805c 	ldr.w	r8, [pc, #92]	; 29e0 <nrfx_gpiote_channel_alloc+0x6c>
{
    2984:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    2986:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    2988:	2601      	movs	r6, #1
    298a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    298c:	f04f 0120 	mov.w	r1, #32
    2990:	f3ef 8c11 	mrs	ip, BASEPRI
    2994:	f381 8812 	msr	BASEPRI_MAX, r1
    2998:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    299c:	fa22 f103 	lsr.w	r1, r2, r3
    29a0:	07c9      	lsls	r1, r1, #31
    29a2:	d50a      	bpl.n	29ba <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    29a4:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    29a8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    29ac:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    29ae:	bf01      	itttt	eq
    29b0:	4339      	orreq	r1, r7
    29b2:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    29b6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    29b8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    29ba:	f38c 8811 	msr	BASEPRI, ip
    29be:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    29c2:	4540      	cmp	r0, r8
    29c4:	d005      	beq.n	29d2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    29c6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    29ca:	439a      	bics	r2, r3
    29cc:	f104 0401 	add.w	r4, r4, #1
    29d0:	d1db      	bne.n	298a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    29d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29d6:	bf00      	nop
    29d8:	2000045c 	.word	0x2000045c
    29dc:	0bad0002 	.word	0x0bad0002
    29e0:	0bad0000 	.word	0x0bad0000

000029e4 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    29e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    29e8:	4a14      	ldr	r2, [pc, #80]	; (2a3c <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    29ea:	4e15      	ldr	r6, [pc, #84]	; (2a40 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    29ec:	4f15      	ldr	r7, [pc, #84]	; (2a44 <nrfx_ppi_channel_alloc+0x60>)
{
    29ee:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    29f0:	4815      	ldr	r0, [pc, #84]	; (2a48 <nrfx_ppi_channel_alloc+0x64>)
{
    29f2:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    29f4:	f04f 0e01 	mov.w	lr, #1
    29f8:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    29fc:	f04f 0320 	mov.w	r3, #32
    2a00:	f3ef 8811 	mrs	r8, BASEPRI
    2a04:	f383 8812 	msr	BASEPRI_MAX, r3
    2a08:	f3bf 8f6f 	isb	sy
    2a0c:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2a10:	4213      	tst	r3, r2
    2a12:	d007      	beq.n	2a24 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    2a14:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2a16:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    2a18:	bf01      	itttt	eq
    2a1a:	4319      	orreq	r1, r3
    2a1c:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    2a1e:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    2a22:	4638      	moveq	r0, r7
	__asm__ volatile(
    2a24:	f388 8811 	msr	BASEPRI, r8
    2a28:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    2a2c:	42b8      	cmp	r0, r7
    2a2e:	d003      	beq.n	2a38 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    2a30:	439a      	bics	r2, r3
    2a32:	f104 0401 	add.w	r4, r4, #1
    2a36:	d1df      	bne.n	29f8 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a3c:	000fffff 	.word	0x000fffff
    2a40:	200004ac 	.word	0x200004ac
    2a44:	0bad0000 	.word	0x0bad0000
    2a48:	0bad0002 	.word	0x0bad0002

00002a4c <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    2a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a4e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    2a52:	b087      	sub	sp, #28
    2a54:	4604      	mov	r4, r0
    2a56:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2a58:	b1f3      	cbz	r3, 2a98 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a5a:	2300      	movs	r3, #0
    2a5c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    2a60:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a64:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2a68:	b9b3      	cbnz	r3, 2a98 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    2a6a:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2a6c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2a70:	2302      	movs	r3, #2
    2a72:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2a74:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    2a76:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a7a:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    2a7e:	b11b      	cbz	r3, 2a88 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    2a80:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    2a84:	059f      	lsls	r7, r3, #22
    2a86:	d402      	bmi.n	2a8e <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a88:	2301      	movs	r3, #1
    2a8a:	6223      	str	r3, [r4, #32]
    2a8c:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    2a8e:	2301      	movs	r3, #1
    2a90:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    2a94:	b007      	add	sp, #28
    2a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a98:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d044      	beq.n	2b2a <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2aa0:	2300      	movs	r3, #0
    2aa2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2aa6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    2aaa:	6a2b      	ldr	r3, [r5, #32]
    2aac:	065e      	lsls	r6, r3, #25
    2aae:	d40a      	bmi.n	2ac6 <twim_irq_handler+0x7a>
    2ab0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2ab4:	b93b      	cbnz	r3, 2ac6 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    2ab6:	4629      	mov	r1, r5
    2ab8:	4620      	mov	r0, r4
    2aba:	f002 f9c2 	bl	4e42 <xfer_completeness_check>
    2abe:	f080 0001 	eor.w	r0, r0, #1
    2ac2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    2ac6:	6a2b      	ldr	r3, [r5, #32]
    2ac8:	f013 0c04 	ands.w	ip, r3, #4
    2acc:	d13e      	bne.n	2b4c <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
    2ace:	f105 070c 	add.w	r7, r5, #12
    2ad2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2ad4:	ae01      	add	r6, sp, #4
    2ad6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
    2ad8:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    2ae2:	6033      	str	r3, [r6, #0]
    2ae4:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    2ae8:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    2aec:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    2af0:	f1be 0f00 	cmp.w	lr, #0
    2af4:	d002      	beq.n	2afc <twim_irq_handler+0xb0>
    2af6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2afa:	b33b      	cbz	r3, 2b4c <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
    2afc:	2300      	movs	r3, #0
    2afe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    2b02:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    2b04:	4b2e      	ldr	r3, [pc, #184]	; (2bc0 <twim_irq_handler+0x174>)
    2b06:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    2b0a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    2b0e:	2b00      	cmp	r3, #0
    2b10:	ea4f 3214 	mov.w	r2, r4, lsr #12
    2b14:	db1a      	blt.n	2b4c <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b16:	f002 011f 	and.w	r1, r2, #31
    2b1a:	095b      	lsrs	r3, r3, #5
    2b1c:	2201      	movs	r2, #1
    2b1e:	408a      	lsls	r2, r1
    2b20:	3360      	adds	r3, #96	; 0x60
    2b22:	4928      	ldr	r1, [pc, #160]	; (2bc4 <twim_irq_handler+0x178>)
    2b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2b28:	e010      	b.n	2b4c <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b2a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    2b2e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    2b32:	7b2b      	ldrb	r3, [r5, #12]
    2b34:	bb23      	cbnz	r3, 2b80 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
    2b36:	f105 070c 	add.w	r7, r5, #12
    2b3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2b3c:	ae01      	add	r6, sp, #4
    2b3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2b40:	683b      	ldr	r3, [r7, #0]
    2b42:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    2b44:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d0d8      	beq.n	2afe <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
    2b4c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    2b50:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    2b54:	0798      	lsls	r0, r3, #30
    2b56:	d525      	bpl.n	2ba4 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    2b58:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    2b5a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    2b5e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    2b62:	b90b      	cbnz	r3, 2b68 <twim_irq_handler+0x11c>
        p_cb->busy = false;
    2b64:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    2b68:	6a2b      	ldr	r3, [r5, #32]
    2b6a:	075b      	lsls	r3, r3, #29
    2b6c:	d503      	bpl.n	2b76 <twim_irq_handler+0x12a>
    2b6e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2b72:	2b00      	cmp	r3, #0
    2b74:	d08e      	beq.n	2a94 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    2b76:	e9d5 3100 	ldrd	r3, r1, [r5]
    2b7a:	4668      	mov	r0, sp
    2b7c:	4798      	blx	r3
    2b7e:	e789      	b.n	2a94 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    2b80:	f44f 7300 	mov.w	r3, #512	; 0x200
    2b84:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    2b88:	f240 2302 	movw	r3, #514	; 0x202
    2b8c:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    2b8e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    2b92:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2b96:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    2b98:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b9c:	2301      	movs	r3, #1
    2b9e:	60a3      	str	r3, [r4, #8]
    2ba0:	6223      	str	r3, [r4, #32]
            return;
    2ba2:	e777      	b.n	2a94 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    2ba4:	0759      	lsls	r1, r3, #29
    2ba6:	d501      	bpl.n	2bac <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    2ba8:	2302      	movs	r3, #2
    2baa:	e7d6      	b.n	2b5a <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    2bac:	07da      	lsls	r2, r3, #31
    2bae:	d501      	bpl.n	2bb4 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    2bb0:	2303      	movs	r3, #3
    2bb2:	e7d2      	b.n	2b5a <twim_irq_handler+0x10e>
    else if (p_cb->error)
    2bb4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d0ce      	beq.n	2b5a <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    2bbc:	2304      	movs	r3, #4
    2bbe:	e7cc      	b.n	2b5a <twim_irq_handler+0x10e>
    2bc0:	019c0202 	.word	0x019c0202
    2bc4:	e000e100 	.word	0xe000e100

00002bc8 <nrfx_twim_init>:
{
    2bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    2bcc:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    2bd0:	4d1d      	ldr	r5, [pc, #116]	; (2c48 <nrfx_twim_init+0x80>)
    2bd2:	2734      	movs	r7, #52	; 0x34
    2bd4:	fb07 f708 	mul.w	r7, r7, r8
    2bd8:	19ec      	adds	r4, r5, r7
    2bda:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
    2bde:	bb8e      	cbnz	r6, 2c44 <nrfx_twim_init+0x7c>
    p_cb->int_mask        = 0;
    2be0:	60a6      	str	r6, [r4, #8]
    p_cb->repeated        = false;
    2be2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->busy            = false;
    2be6:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    TWIM_PIN_INIT(p_config->scl, drive);
    2bea:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
    2bec:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    2bee:	7b4b      	ldrb	r3, [r1, #13]
    2bf0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    *p_pin = pin_number & 0x1F;
    2bf4:	f006 031f 	and.w	r3, r6, #31
    p_cb->handler         = event_handler;
    2bf8:	51ea      	str	r2, [r5, r7]
    reg->PIN_CNF[pin_number] = cnf;
    2bfa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2bfe:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    2c02:	f240 6c0c 	movw	ip, #1548	; 0x60c
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    2c06:	6800      	ldr	r0, [r0, #0]
    2c08:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
    2c0c:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    2c0e:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    2c12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2c16:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    2c1a:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
    2c1c:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    2c20:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
    2c24:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    2c28:	b11a      	cbz	r2, 2c32 <nrfx_twim_init+0x6a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    2c2a:	f340 3007 	sbfx	r0, r0, #12, #8
    2c2e:	f7fe f93d 	bl	eac <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2c32:	2334      	movs	r3, #52	; 0x34
    2c34:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
    2c38:	4804      	ldr	r0, [pc, #16]	; (2c4c <nrfx_twim_init+0x84>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2c3a:	2301      	movs	r3, #1
    2c3c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    2c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    2c44:	4802      	ldr	r0, [pc, #8]	; (2c50 <nrfx_twim_init+0x88>)
    2c46:	e7fb      	b.n	2c40 <nrfx_twim_init+0x78>
    2c48:	200004b0 	.word	0x200004b0
    2c4c:	0bad0000 	.word	0x0bad0000
    2c50:	0bad0005 	.word	0x0bad0005

00002c54 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    2c54:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2c56:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    2c58:	2106      	movs	r1, #6
    2c5a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <nrfx_twim_enable+0x1c>)
    2c60:	2134      	movs	r1, #52	; 0x34
    2c62:	fb01 3302 	mla	r3, r1, r2, r3
    2c66:	2202      	movs	r2, #2
    2c68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    2c6c:	4770      	bx	lr
    2c6e:	bf00      	nop
    2c70:	200004b0 	.word	0x200004b0

00002c74 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2c74:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    2c76:	4b0c      	ldr	r3, [pc, #48]	; (2ca8 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    2c78:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    2c7a:	2034      	movs	r0, #52	; 0x34
    2c7c:	fb00 3301 	mla	r3, r0, r1, r3
    2c80:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    2c82:	480a      	ldr	r0, [pc, #40]	; (2cac <nrfx_twim_disable+0x38>)
    2c84:	6099      	str	r1, [r3, #8]
    2c86:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    2c8a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    2c8e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    2c92:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    2c96:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2c9a:	2201      	movs	r2, #1
    2c9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    2ca0:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop
    2ca8:	200004b0 	.word	0x200004b0
    2cac:	019c0202 	.word	0x019c0202

00002cb0 <nrfx_twim_xfer>:
{
    2cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    2cb4:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 2f88 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2cb8:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    2cbc:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    2cbe:	2334      	movs	r3, #52	; 0x34
    2cc0:	fb03 c30e 	mla	r3, r3, lr, ip
{
    2cc4:	4617      	mov	r7, r2
    p_cb->error = false;
    2cc6:	2200      	movs	r2, #0
    2cc8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    2ccc:	684b      	ldr	r3, [r1, #4]
{
    2cce:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    2cd0:	b14b      	cbz	r3, 2ce6 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2cd2:	68cb      	ldr	r3, [r1, #12]
    2cd4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    2cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2cdc:	d003      	beq.n	2ce6 <nrfx_twim_xfer+0x36>
        return err_code;
    2cde:	4eab      	ldr	r6, [pc, #684]	; (2f8c <nrfx_twim_xfer+0x2dc>)
}
    2ce0:	4630      	mov	r0, r6
    2ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    2ce6:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    2ce8:	4ba9      	ldr	r3, [pc, #676]	; (2f90 <nrfx_twim_xfer+0x2e0>)
    2cea:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    2cee:	fb06 c60e 	mla	r6, r6, lr, ip
    2cf2:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    2cf6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    2cfa:	b123      	cbz	r3, 2d06 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2cfc:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    2cfe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    2d02:	4ea4      	ldr	r6, [pc, #656]	; (2f94 <nrfx_twim_xfer+0x2e4>)
    2d04:	e7ec      	b.n	2ce0 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    2d06:	f017 0f14 	tst.w	r7, #20
    2d0a:	bf0c      	ite	eq
    2d0c:	2301      	moveq	r3, #1
    2d0e:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    2d10:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    2d14:	46a9      	mov	r9, r5
    2d16:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    2d1a:	f106 080c 	add.w	r8, r6, #12
    2d1e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    2d22:	f8d9 3000 	ldr.w	r3, [r9]
    2d26:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    2d2a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    2d2e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    2d32:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    2d34:	786b      	ldrb	r3, [r5, #1]
    2d36:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d3a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    2d3e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2d42:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    2d46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    2d4a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    2d4e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    2d52:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    2d56:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    2d5a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    2d5e:	bf18      	it	ne
    2d60:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    2d62:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    2d66:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    2d6a:	bf18      	it	ne
    2d6c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    2d6e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    2d72:	782a      	ldrb	r2, [r5, #0]
    2d74:	2a03      	cmp	r2, #3
    2d76:	f200 80b5 	bhi.w	2ee4 <nrfx_twim_xfer+0x234>
    2d7a:	e8df f002 	tbb	[pc, r2]
    2d7e:	a084      	.short	0xa084
    2d80:	0269      	.short	0x0269
    2d82:	692b      	ldr	r3, [r5, #16]
    2d84:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    2d88:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2d8c:	d1a7      	bne.n	2cde <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    2d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
    2d92:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2d96:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2d98:	6869      	ldr	r1, [r5, #4]
    2d9a:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2d9e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2da2:	2100      	movs	r1, #0
    2da4:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    2da8:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dac:	2001      	movs	r0, #1
    2dae:	6220      	str	r0, [r4, #32]
    2db0:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2db2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    2db6:	2800      	cmp	r0, #0
    2db8:	d0fb      	beq.n	2db2 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dba:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    2dbe:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    2dc2:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2dc4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    2dc8:	2334      	movs	r3, #52	; 0x34
    2dca:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    2dce:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    2dd2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2dd6:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    2dd8:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    2dda:	4e6f      	ldr	r6, [pc, #444]	; (2f98 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    2ddc:	0739      	lsls	r1, r7, #28
    2dde:	d406      	bmi.n	2dee <nrfx_twim_xfer+0x13e>
    2de0:	2a03      	cmp	r2, #3
    2de2:	d004      	beq.n	2dee <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2de4:	2201      	movs	r2, #1
    2de6:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    2de8:	686b      	ldr	r3, [r5, #4]
    2dea:	b903      	cbnz	r3, 2dee <nrfx_twim_xfer+0x13e>
    2dec:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    2dee:	2334      	movs	r3, #52	; 0x34
    2df0:	fb03 f30e 	mul.w	r3, r3, lr
    2df4:	eb0c 0103 	add.w	r1, ip, r3
    2df8:	f85c 2003 	ldr.w	r2, [ip, r3]
    2dfc:	2a00      	cmp	r2, #0
    2dfe:	d174      	bne.n	2eea <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    2e00:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e02:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    2e06:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2e0a:	2800      	cmp	r0, #0
    2e0c:	f040 8088 	bne.w	2f20 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    2e10:	3b00      	subs	r3, #0
    2e12:	bf18      	it	ne
    2e14:	2301      	movne	r3, #1
    2e16:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2e1a:	2800      	cmp	r0, #0
    2e1c:	f000 8086 	beq.w	2f2c <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e20:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    2e24:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e28:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    2e2c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    2e30:	b115      	cbz	r5, 2e38 <nrfx_twim_xfer+0x188>
    2e32:	f410 7f00 	tst.w	r0, #512	; 0x200
    2e36:	d104      	bne.n	2e42 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e38:	6221      	str	r1, [r4, #32]
    2e3a:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    2e3c:	2d00      	cmp	r5, #0
    2e3e:	d0e0      	beq.n	2e02 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    2e40:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    2e42:	05c0      	lsls	r0, r0, #23
    2e44:	d572      	bpl.n	2f2c <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e46:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    2e4a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    2e4e:	e7d8      	b.n	2e02 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2e50:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e52:	68e9      	ldr	r1, [r5, #12]
    2e54:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e58:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    2e5c:	692b      	ldr	r3, [r5, #16]
    2e5e:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    2e62:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2e66:	f47f af3a 	bne.w	2cde <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    2e6a:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2e6c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    2e70:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    2e74:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    2e78:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2e7c:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2e7e:	fb03 c30e 	mla	r3, r3, lr, ip
    2e82:	2102      	movs	r1, #2
    2e84:	e012      	b.n	2eac <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2e86:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e88:	68e9      	ldr	r1, [r5, #12]
    2e8a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    2e8e:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    2e92:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    2e96:	f04f 0334 	mov.w	r3, #52	; 0x34
    2e9a:	d00b      	beq.n	2eb4 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    2e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2ea0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    2ea4:	fb03 c30e 	mla	r3, r3, lr, ip
    2ea8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2eac:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2eae:	2301      	movs	r3, #1
    2eb0:	6223      	str	r3, [r4, #32]
    2eb2:	e791      	b.n	2dd8 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    2eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
    2eb8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    2ebc:	e7df      	b.n	2e7e <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2ebe:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2ec0:	68e9      	ldr	r1, [r5, #12]
    2ec2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2ec6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    2eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2ece:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2ed2:	2334      	movs	r3, #52	; 0x34
    2ed4:	fb03 c30e 	mla	r3, r3, lr, ip
    2ed8:	2102      	movs	r1, #2
    2eda:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2edc:	2301      	movs	r3, #1
    2ede:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    2ee0:	2300      	movs	r3, #0
    2ee2:	e77a      	b.n	2dda <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    2ee4:	4e2d      	ldr	r6, [pc, #180]	; (2f9c <nrfx_twim_xfer+0x2ec>)
    2ee6:	2308      	movs	r3, #8
    2ee8:	e778      	b.n	2ddc <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    2eea:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    2eec:	bf44      	itt	mi
    2eee:	2300      	movmi	r3, #0
    2ef0:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    2ef2:	067b      	lsls	r3, r7, #25
    2ef4:	d406      	bmi.n	2f04 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    2ef6:	2334      	movs	r3, #52	; 0x34
    2ef8:	fb03 c30e 	mla	r3, r3, lr, ip
    2efc:	689a      	ldr	r2, [r3, #8]
    2efe:	f042 0202 	orr.w	r2, r2, #2
    2f02:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    2f04:	2334      	movs	r3, #52	; 0x34
    2f06:	fb03 cc0e 	mla	ip, r3, lr, ip
    2f0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    2f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2f12:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2f16:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    2f1a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    2f1e:	e6df      	b.n	2ce0 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f20:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    2f24:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    2f28:	2301      	movs	r3, #1
    2f2a:	e774      	b.n	2e16 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	f43f af68 	beq.w	2e02 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    2f32:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    2f34:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    2f38:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    2f3c:	fb01 c20e 	mla	r2, r1, lr, ip
    2f40:	2000      	movs	r0, #0
    2f42:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    2f46:	b18b      	cbz	r3, 2f6c <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    2f48:	4a15      	ldr	r2, [pc, #84]	; (2fa0 <nrfx_twim_xfer+0x2f0>)
    2f4a:	4e16      	ldr	r6, [pc, #88]	; (2fa4 <nrfx_twim_xfer+0x2f4>)
    2f4c:	f013 0f01 	tst.w	r3, #1
    2f50:	bf18      	it	ne
    2f52:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2f54:	f013 0f02 	tst.w	r3, #2
    2f58:	f102 0201 	add.w	r2, r2, #1
    2f5c:	bf18      	it	ne
    2f5e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2f60:	f013 0f04 	tst.w	r3, #4
    2f64:	4b10      	ldr	r3, [pc, #64]	; (2fa8 <nrfx_twim_xfer+0x2f8>)
    2f66:	bf18      	it	ne
    2f68:	461e      	movne	r6, r3
    2f6a:	e6b9      	b.n	2ce0 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    2f6c:	067b      	lsls	r3, r7, #25
    2f6e:	f53f aeb7 	bmi.w	2ce0 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    2f72:	fb0e c101 	mla	r1, lr, r1, ip
    2f76:	4620      	mov	r0, r4
    2f78:	f001 ff63 	bl	4e42 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    2f7c:	4b09      	ldr	r3, [pc, #36]	; (2fa4 <nrfx_twim_xfer+0x2f4>)
    2f7e:	2800      	cmp	r0, #0
    2f80:	bf08      	it	eq
    2f82:	461e      	moveq	r6, r3
    2f84:	e6ac      	b.n	2ce0 <nrfx_twim_xfer+0x30>
    2f86:	bf00      	nop
    2f88:	200004b0 	.word	0x200004b0
    2f8c:	0bad000a 	.word	0x0bad000a
    2f90:	019c0202 	.word	0x019c0202
    2f94:	0bad000b 	.word	0x0bad000b
    2f98:	0bad0000 	.word	0x0bad0000
    2f9c:	0bad0004 	.word	0x0bad0004
    2fa0:	0bae0000 	.word	0x0bae0000
    2fa4:	0bad0001 	.word	0x0bad0001
    2fa8:	0bae0002 	.word	0x0bae0002

00002fac <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    2fac:	4901      	ldr	r1, [pc, #4]	; (2fb4 <nrfx_twim_0_irq_handler+0x8>)
    2fae:	4802      	ldr	r0, [pc, #8]	; (2fb8 <nrfx_twim_0_irq_handler+0xc>)
    2fb0:	f7ff bd4c 	b.w	2a4c <twim_irq_handler>
    2fb4:	200004b0 	.word	0x200004b0
    2fb8:	40003000 	.word	0x40003000

00002fbc <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    2fbc:	4902      	ldr	r1, [pc, #8]	; (2fc8 <nrfx_twim_1_irq_handler+0xc>)
    2fbe:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    2fc2:	f7ff bd43 	b.w	2a4c <twim_irq_handler>
    2fc6:	bf00      	nop
    2fc8:	200004e4 	.word	0x200004e4

00002fcc <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    2fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    2fd0:	f000 001f 	and.w	r0, r0, #31
    2fd4:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2fd8:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    2fda:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2fde:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    2fe2:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    2fe6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    2fea:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2fee:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    2ff0:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    2ff4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    2ff8:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    2ffc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    3000:	2004      	movs	r0, #4
    3002:	f001 ff12 	bl	4e2a <nrfx_busy_wait>
    3006:	2709      	movs	r7, #9
    return p_reg->IN;
    3008:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    300c:	421c      	tst	r4, r3
    300e:	d10d      	bne.n	302c <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    3010:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    3012:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    3016:	f001 ff08 	bl	4e2a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    301a:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    301c:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    3020:	2004      	movs	r0, #4
    3022:	f001 ff02 	bl	4e2a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3026:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    302a:	d1ed      	bne.n	3008 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    302c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    3030:	2004      	movs	r0, #4
    3032:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    3036:	f001 fef8 	bl	4e2a <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    303a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    303e:	2004      	movs	r0, #4
    3040:	f001 fef3 	bl	4e2a <nrfx_busy_wait>
    return p_reg->IN;
    3044:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
    3048:	4803      	ldr	r0, [pc, #12]	; (3058 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    304a:	fa21 f606 	lsr.w	r6, r1, r6
    304e:	f006 0601 	and.w	r6, r6, #1
    3052:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    3054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3058:	0bad0001 	.word	0x0bad0001

0000305c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    305c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    305e:	4c14      	ldr	r4, [pc, #80]	; (30b0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3060:	4a14      	ldr	r2, [pc, #80]	; (30b4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3062:	4915      	ldr	r1, [pc, #84]	; (30b8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3064:	2303      	movs	r3, #3
    3066:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3068:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    306a:	4b14      	ldr	r3, [pc, #80]	; (30bc <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    306c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    306e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3070:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3074:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3076:	2300      	movs	r3, #0
    3078:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    307a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    307c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    307e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3080:	4a0f      	ldr	r2, [pc, #60]	; (30c0 <_DoInit+0x64>)
    3082:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    3084:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3086:	2210      	movs	r2, #16
    3088:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    308a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    308c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    308e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3090:	f001 f9ef 	bl	4472 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3094:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3098:	490a      	ldr	r1, [pc, #40]	; (30c4 <_DoInit+0x68>)
    309a:	4620      	mov	r0, r4
    309c:	f001 f9e9 	bl	4472 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    30a0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    30a4:	2320      	movs	r3, #32
    30a6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    30a8:	f3bf 8f5f 	dmb	sy
}
    30ac:	bd10      	pop	{r4, pc}
    30ae:	bf00      	nop
    30b0:	20000518 	.word	0x20000518
    30b4:	000058b1 	.word	0x000058b1
    30b8:	000058ba 	.word	0x000058ba
    30bc:	20000634 	.word	0x20000634
    30c0:	20000624 	.word	0x20000624
    30c4:	000058be 	.word	0x000058be

000030c8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    30c8:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    30ca:	4b16      	ldr	r3, [pc, #88]	; (3124 <SEGGER_RTT_WriteNoLock+0x5c>)
    30cc:	2418      	movs	r4, #24
    30ce:	fb00 4504 	mla	r5, r0, r4, r4
    30d2:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    30d4:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    30d8:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    30da:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    30dc:	2c01      	cmp	r4, #1
    30de:	d00e      	beq.n	30fe <SEGGER_RTT_WriteNoLock+0x36>
    30e0:	2c02      	cmp	r4, #2
    30e2:	d018      	beq.n	3116 <SEGGER_RTT_WriteNoLock+0x4e>
    30e4:	b9e4      	cbnz	r4, 3120 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    30e6:	4628      	mov	r0, r5
    30e8:	f001 fedb 	bl	4ea2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    30ec:	4286      	cmp	r6, r0
    30ee:	d804      	bhi.n	30fa <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    30f0:	4632      	mov	r2, r6
    30f2:	4628      	mov	r0, r5
    30f4:	f001 fede 	bl	4eb4 <_WriteNoCheck>
    30f8:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    30fa:	4620      	mov	r0, r4
    30fc:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    30fe:	4628      	mov	r0, r5
    3100:	f001 fecf 	bl	4ea2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    3104:	4286      	cmp	r6, r0
    3106:	4634      	mov	r4, r6
    3108:	bf28      	it	cs
    310a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    310c:	4622      	mov	r2, r4
    310e:	4628      	mov	r0, r5
    3110:	f001 fed0 	bl	4eb4 <_WriteNoCheck>
    break;
    3114:	e7f1      	b.n	30fa <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3116:	4628      	mov	r0, r5
}
    3118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    311c:	f001 bee8 	b.w	4ef0 <_WriteBlocking>
  switch (pRing->Flags) {
    3120:	2400      	movs	r4, #0
  return Status;
    3122:	e7ea      	b.n	30fa <SEGGER_RTT_WriteNoLock+0x32>
    3124:	20000518 	.word	0x20000518

00003128 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3128:	4b0e      	ldr	r3, [pc, #56]	; (3164 <z_sys_init_run_level+0x3c>)
{
    312a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    312c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3130:	3001      	adds	r0, #1
    3132:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3136:	42a6      	cmp	r6, r4
    3138:	d800      	bhi.n	313c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    313a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    313c:	e9d4 3500 	ldrd	r3, r5, [r4]
    3140:	4628      	mov	r0, r5
    3142:	4798      	blx	r3
		if (dev != NULL) {
    3144:	b165      	cbz	r5, 3160 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3146:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3148:	b130      	cbz	r0, 3158 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    314a:	2800      	cmp	r0, #0
    314c:	bfb8      	it	lt
    314e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3150:	28ff      	cmp	r0, #255	; 0xff
    3152:	bfa8      	it	ge
    3154:	20ff      	movge	r0, #255	; 0xff
    3156:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3158:	785a      	ldrb	r2, [r3, #1]
    315a:	f042 0201 	orr.w	r2, r2, #1
    315e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3160:	3408      	adds	r4, #8
    3162:	e7e8      	b.n	3136 <z_sys_init_run_level+0xe>
    3164:	000057b0 	.word	0x000057b0

00003168 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3168:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    316a:	4605      	mov	r5, r0
    316c:	b910      	cbnz	r0, 3174 <z_impl_device_get_binding+0xc>
		return NULL;
    316e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    3170:	4620      	mov	r0, r4
    3172:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    3174:	7803      	ldrb	r3, [r0, #0]
    3176:	2b00      	cmp	r3, #0
    3178:	d0f9      	beq.n	316e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    317a:	4c0e      	ldr	r4, [pc, #56]	; (31b4 <z_impl_device_get_binding+0x4c>)
    317c:	4e0e      	ldr	r6, [pc, #56]	; (31b8 <z_impl_device_get_binding+0x50>)
    317e:	42b4      	cmp	r4, r6
    3180:	d108      	bne.n	3194 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    3182:	4c0c      	ldr	r4, [pc, #48]	; (31b4 <z_impl_device_get_binding+0x4c>)
    3184:	42b4      	cmp	r4, r6
    3186:	d0f2      	beq.n	316e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3188:	4620      	mov	r0, r4
    318a:	f001 fee5 	bl	4f58 <z_device_ready>
    318e:	b950      	cbnz	r0, 31a6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    3190:	3418      	adds	r4, #24
    3192:	e7f7      	b.n	3184 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    3194:	4620      	mov	r0, r4
    3196:	f001 fedf 	bl	4f58 <z_device_ready>
    319a:	b110      	cbz	r0, 31a2 <z_impl_device_get_binding+0x3a>
    319c:	6823      	ldr	r3, [r4, #0]
    319e:	42ab      	cmp	r3, r5
    31a0:	d0e6      	beq.n	3170 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    31a2:	3418      	adds	r4, #24
    31a4:	e7eb      	b.n	317e <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    31a6:	6821      	ldr	r1, [r4, #0]
    31a8:	4628      	mov	r0, r5
    31aa:	f001 f97c 	bl	44a6 <strcmp>
    31ae:	2800      	cmp	r0, #0
    31b0:	d1ee      	bne.n	3190 <z_impl_device_get_binding+0x28>
    31b2:	e7dd      	b.n	3170 <z_impl_device_get_binding+0x8>
    31b4:	000052fc 	.word	0x000052fc
    31b8:	00005434 	.word	0x00005434

000031bc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    31bc:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    31be:	2300      	movs	r3, #0
{
    31c0:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    31c2:	2201      	movs	r2, #1
    31c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    31c8:	220f      	movs	r2, #15
    31ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
    31ce:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    31d0:	4c0c      	ldr	r4, [pc, #48]	; (3204 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    31d2:	4b0d      	ldr	r3, [pc, #52]	; (3208 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    31d4:	490d      	ldr	r1, [pc, #52]	; (320c <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    31d6:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    31d8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    31dc:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    31e0:	f44f 75b0 	mov.w	r5, #352	; 0x160
    31e4:	9300      	str	r3, [sp, #0]
    31e6:	fb05 1100 	mla	r1, r5, r0, r1
    31ea:	4b09      	ldr	r3, [pc, #36]	; (3210 <init_idle_thread+0x54>)
    31ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
    31f0:	4620      	mov	r0, r4
    31f2:	f000 f8a5 	bl	3340 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    31f6:	7b63      	ldrb	r3, [r4, #13]
    31f8:	f023 0304 	bic.w	r3, r3, #4
    31fc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    31fe:	b007      	add	sp, #28
    3200:	bd30      	pop	{r4, r5, pc}
    3202:	bf00      	nop
    3204:	200001f0 	.word	0x200001f0
    3208:	200005c0 	.word	0x200005c0
    320c:	20000e60 	.word	0x20000e60
    3210:	000034b5 	.word	0x000034b5

00003214 <bg_thread_main>:
{
    3214:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3216:	4b0a      	ldr	r3, [pc, #40]	; (3240 <bg_thread_main+0x2c>)
    3218:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    321a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    321c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    321e:	f7ff ff83 	bl	3128 <z_sys_init_run_level>
	boot_banner();
    3222:	f000 ff59 	bl	40d8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3226:	2003      	movs	r0, #3
    3228:	f7ff ff7e 	bl	3128 <z_sys_init_run_level>
	z_init_static_threads();
    322c:	f000 f8e6 	bl	33fc <z_init_static_threads>
	main();
    3230:	f7fd f8c2 	bl	3b8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3234:	4a03      	ldr	r2, [pc, #12]	; (3244 <bg_thread_main+0x30>)
    3236:	7b13      	ldrb	r3, [r2, #12]
    3238:	f023 0301 	bic.w	r3, r3, #1
    323c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    323e:	bd08      	pop	{r3, pc}
    3240:	20000a34 	.word	0x20000a34
    3244:	20000270 	.word	0x20000270

00003248 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3248:	4802      	ldr	r0, [pc, #8]	; (3254 <z_bss_zero+0xc>)
    324a:	4a03      	ldr	r2, [pc, #12]	; (3258 <z_bss_zero+0x10>)
    324c:	2100      	movs	r1, #0
    324e:	1a12      	subs	r2, r2, r0
    3250:	f001 b940 	b.w	44d4 <memset>
    3254:	200000e8 	.word	0x200000e8
    3258:	20000a38 	.word	0x20000a38

0000325c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    325c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    325e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3320 <z_cstart+0xc4>
    3262:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3264:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3268:	4d2e      	ldr	r5, [pc, #184]	; (3324 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    326a:	4e2f      	ldr	r6, [pc, #188]	; (3328 <z_cstart+0xcc>)
    326c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    326e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 332c <z_cstart+0xd0>
    3272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3276:	2400      	movs	r4, #0
    3278:	616b      	str	r3, [r5, #20]
    327a:	23e0      	movs	r3, #224	; 0xe0
    327c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3280:	77ec      	strb	r4, [r5, #31]
    3282:	762c      	strb	r4, [r5, #24]
    3284:	766c      	strb	r4, [r5, #25]
    3286:	76ac      	strb	r4, [r5, #26]
    3288:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    328c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    328e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3292:	626b      	str	r3, [r5, #36]	; 0x24
    3294:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3298:	f7fe f818 	bl	12cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    329c:	f7fd fde8 	bl	e70 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    32a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32a4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    32a6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    32a8:	f7fe f8ee 	bl	1488 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    32ac:	f7fe f856 	bl	135c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    32b0:	f240 1301 	movw	r3, #257	; 0x101
    32b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    32b8:	ab06      	add	r3, sp, #24
    32ba:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    32bc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    32c0:	f001 fe49 	bl	4f56 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    32c4:	4620      	mov	r0, r4
    32c6:	f7ff ff2f 	bl	3128 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    32ca:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    32cc:	4d18      	ldr	r5, [pc, #96]	; (3330 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    32ce:	f7ff ff2b 	bl	3128 <z_sys_init_run_level>
	z_sched_init();
    32d2:	f000 fc95 	bl	3c00 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    32d6:	4b17      	ldr	r3, [pc, #92]	; (3334 <z_cstart+0xd8>)
    32d8:	9305      	str	r3, [sp, #20]
    32da:	2301      	movs	r3, #1
    32dc:	4916      	ldr	r1, [pc, #88]	; (3338 <z_cstart+0xdc>)
    32de:	9400      	str	r4, [sp, #0]
    32e0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    32e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    32e8:	464b      	mov	r3, r9
    32ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
    32ee:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    32f0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    32f2:	f000 f825 	bl	3340 <z_setup_new_thread>
    32f6:	7b6a      	ldrb	r2, [r5, #13]
    32f8:	4607      	mov	r7, r0
    32fa:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    32fe:	4628      	mov	r0, r5
    3300:	736a      	strb	r2, [r5, #13]
    3302:	f001 fed7 	bl	50b4 <z_ready_thread>
		init_idle_thread(i);
    3306:	4620      	mov	r0, r4
    3308:	f7ff ff58 	bl	31bc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    330c:	4b0b      	ldr	r3, [pc, #44]	; (333c <z_cstart+0xe0>)
    330e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3310:	464a      	mov	r2, r9
    3312:	4639      	mov	r1, r7
    3314:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    3316:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3318:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    331c:	f7fd feaa 	bl	1074 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3320:	200017e0 	.word	0x200017e0
    3324:	e000ed00 	.word	0xe000ed00
    3328:	200005c0 	.word	0x200005c0
    332c:	00003215 	.word	0x00003215
    3330:	20000270 	.word	0x20000270
    3334:	000058c5 	.word	0x000058c5
    3338:	20000a40 	.word	0x20000a40
    333c:	200001f0 	.word	0x200001f0

00003340 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3340:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3344:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3346:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3348:	2604      	movs	r6, #4
    334a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    334c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    334e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3350:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3354:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3356:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3358:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    335c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    335e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3360:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3364:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3366:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    336a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    336e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3370:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3372:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3374:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3378:	9202      	str	r2, [sp, #8]
    337a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    337c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    337e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3382:	9200      	str	r2, [sp, #0]
    3384:	4642      	mov	r2, r8
{
    3386:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3388:	f7fd fe42 	bl	1010 <arch_new_thread>
	if (!_current) {
    338c:	4b04      	ldr	r3, [pc, #16]	; (33a0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    338e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3390:	689b      	ldr	r3, [r3, #8]
    3392:	b103      	cbz	r3, 3396 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3396:	6723      	str	r3, [r4, #112]	; 0x70
}
    3398:	4640      	mov	r0, r8
    339a:	b004      	add	sp, #16
    339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33a0:	200005c0 	.word	0x200005c0

000033a4 <z_impl_k_thread_create>:
{
    33a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33a6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    33a8:	2700      	movs	r7, #0
    33aa:	9705      	str	r7, [sp, #20]
    33ac:	9f10      	ldr	r7, [sp, #64]	; 0x40
    33ae:	9704      	str	r7, [sp, #16]
    33b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    33b2:	9703      	str	r7, [sp, #12]
    33b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    33b6:	9702      	str	r7, [sp, #8]
{
    33b8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    33bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    33be:	9701      	str	r7, [sp, #4]
    33c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    33c2:	9700      	str	r7, [sp, #0]
{
    33c4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    33c6:	f7ff ffbb 	bl	3340 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    33ca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    33ce:	bf08      	it	eq
    33d0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    33d4:	d005      	beq.n	33e2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    33d6:	ea55 0306 	orrs.w	r3, r5, r6
    33da:	d105      	bne.n	33e8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    33dc:	4620      	mov	r0, r4
    33de:	f000 fb51 	bl	3a84 <z_sched_start>
}
    33e2:	4620      	mov	r0, r4
    33e4:	b007      	add	sp, #28
    33e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    33e8:	4903      	ldr	r1, [pc, #12]	; (33f8 <z_impl_k_thread_create+0x54>)
    33ea:	4632      	mov	r2, r6
    33ec:	462b      	mov	r3, r5
    33ee:	f104 0018 	add.w	r0, r4, #24
    33f2:	f000 fd83 	bl	3efc <z_add_timeout>
    33f6:	e7f4      	b.n	33e2 <z_impl_k_thread_create+0x3e>
    33f8:	000050d5 	.word	0x000050d5

000033fc <z_init_static_threads>:
{
    33fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3400:	4c29      	ldr	r4, [pc, #164]	; (34a8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3402:	4d2a      	ldr	r5, [pc, #168]	; (34ac <z_init_static_threads+0xb0>)
{
    3404:	b087      	sub	sp, #28
    3406:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3408:	42ae      	cmp	r6, r5
    340a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    340e:	d30f      	bcc.n	3430 <z_init_static_threads+0x34>
	k_sched_lock();
    3410:	f000 fa54 	bl	38bc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3414:	4c24      	ldr	r4, [pc, #144]	; (34a8 <z_init_static_threads+0xac>)
    3416:	f8df 9098 	ldr.w	r9, [pc, #152]	; 34b0 <z_init_static_threads+0xb4>
    341a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    341e:	f240 37e7 	movw	r7, #999	; 0x3e7
    3422:	42ac      	cmp	r4, r5
    3424:	d320      	bcc.n	3468 <z_init_static_threads+0x6c>
}
    3426:	b007      	add	sp, #28
    3428:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    342c:	f000 bbcc 	b.w	3bc8 <k_sched_unlock>
		z_setup_new_thread(
    3430:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3434:	9305      	str	r3, [sp, #20]
    3436:	f854 3c10 	ldr.w	r3, [r4, #-16]
    343a:	9304      	str	r3, [sp, #16]
    343c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3440:	9303      	str	r3, [sp, #12]
    3442:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3446:	9302      	str	r3, [sp, #8]
    3448:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    344c:	9301      	str	r3, [sp, #4]
    344e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3452:	9300      	str	r3, [sp, #0]
    3454:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3458:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    345c:	f7ff ff70 	bl	3340 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3460:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3464:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3466:	e7ce      	b.n	3406 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3468:	6a63      	ldr	r3, [r4, #36]	; 0x24
    346a:	1c5a      	adds	r2, r3, #1
    346c:	d00d      	beq.n	348a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    346e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3472:	2100      	movs	r1, #0
    3474:	4638      	mov	r0, r7
    3476:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    347a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    347e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3482:	d104      	bne.n	348e <z_init_static_threads+0x92>
	z_sched_start(thread);
    3484:	4640      	mov	r0, r8
    3486:	f000 fafd 	bl	3a84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    348a:	3430      	adds	r4, #48	; 0x30
    348c:	e7c9      	b.n	3422 <z_init_static_threads+0x26>
    348e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3492:	2300      	movs	r3, #0
    3494:	f7fc fe22 	bl	dc <__aeabi_uldivmod>
    3498:	4602      	mov	r2, r0
    349a:	460b      	mov	r3, r1
    349c:	f108 0018 	add.w	r0, r8, #24
    34a0:	4649      	mov	r1, r9
    34a2:	f000 fd2b 	bl	3efc <z_add_timeout>
    34a6:	e7f0      	b.n	348a <z_init_static_threads+0x8e>
    34a8:	200000e8 	.word	0x200000e8
    34ac:	200000e8 	.word	0x200000e8
    34b0:	000050d5 	.word	0x000050d5

000034b4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    34b4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    34b6:	4c09      	ldr	r4, [pc, #36]	; (34dc <idle+0x28>)
	__asm__ volatile(
    34b8:	f04f 0220 	mov.w	r2, #32
    34bc:	f3ef 8311 	mrs	r3, BASEPRI
    34c0:	f382 8812 	msr	BASEPRI_MAX, r2
    34c4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    34c8:	f001 fe9b 	bl	5202 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    34cc:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    34ce:	f7fd fc8b 	bl	de8 <pm_system_suspend>
    34d2:	2800      	cmp	r0, #0
    34d4:	d1f0      	bne.n	34b8 <idle+0x4>
	arch_cpu_idle();
    34d6:	f7fd fcd1 	bl	e7c <arch_cpu_idle>
}
    34da:	e7ed      	b.n	34b8 <idle+0x4>
    34dc:	200005c0 	.word	0x200005c0

000034e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    34e0:	b538      	push	{r3, r4, r5, lr}
    34e2:	4604      	mov	r4, r0
    34e4:	f04f 0320 	mov.w	r3, #32
    34e8:	f3ef 8511 	mrs	r5, BASEPRI
    34ec:	f383 8812 	msr	BASEPRI_MAX, r3
    34f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    34f4:	f001 fe3a 	bl	516c <z_unpend_first_thread>

	if (thread != NULL) {
    34f8:	b148      	cbz	r0, 350e <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    34fa:	2200      	movs	r2, #0
    34fc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    34fe:	f001 fdd9 	bl	50b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3502:	4629      	mov	r1, r5
    3504:	4805      	ldr	r0, [pc, #20]	; (351c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    350a:	f000 b9c5 	b.w	3898 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    350e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3512:	429a      	cmp	r2, r3
    3514:	bf18      	it	ne
    3516:	3301      	addne	r3, #1
    3518:	60a3      	str	r3, [r4, #8]
}
    351a:	e7f2      	b.n	3502 <z_impl_k_sem_give+0x22>
    351c:	20000a35 	.word	0x20000a35

00003520 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3520:	b513      	push	{r0, r1, r4, lr}
    3522:	f04f 0420 	mov.w	r4, #32
    3526:	f3ef 8111 	mrs	r1, BASEPRI
    352a:	f384 8812 	msr	BASEPRI_MAX, r4
    352e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3532:	6884      	ldr	r4, [r0, #8]
    3534:	b144      	cbz	r4, 3548 <z_impl_k_sem_take+0x28>
		sem->count--;
    3536:	3c01      	subs	r4, #1
    3538:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    353a:	f381 8811 	msr	BASEPRI, r1
    353e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3542:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3544:	b002      	add	sp, #8
    3546:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3548:	ea52 0403 	orrs.w	r4, r2, r3
    354c:	d106      	bne.n	355c <z_impl_k_sem_take+0x3c>
    354e:	f381 8811 	msr	BASEPRI, r1
    3552:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3556:	f06f 000f 	mvn.w	r0, #15
    355a:	e7f3      	b.n	3544 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    355c:	e9cd 2300 	strd	r2, r3, [sp]
    3560:	4602      	mov	r2, r0
    3562:	4802      	ldr	r0, [pc, #8]	; (356c <z_impl_k_sem_take+0x4c>)
    3564:	f000 faea 	bl	3b3c <z_pend_curr>
	return ret;
    3568:	e7ec      	b.n	3544 <z_impl_k_sem_take+0x24>
    356a:	bf00      	nop
    356c:	20000a35 	.word	0x20000a35

00003570 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    3570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    3574:	4e47      	ldr	r6, [pc, #284]	; (3694 <work_queue_main+0x124>)
    3576:	b085      	sub	sp, #20
    3578:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    357a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    357e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    3582:	f04f 0320 	mov.w	r3, #32
    3586:	f3ef 8711 	mrs	r7, BASEPRI
    358a:	f383 8812 	msr	BASEPRI_MAX, r3
    358e:	f3bf 8f6f 	isb	sy
    3592:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3596:	b98d      	cbnz	r5, 35bc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    3598:	2102      	movs	r1, #2
    359a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    359e:	f001 fd1e 	bl	4fde <flag_test_and_clear>
    35a2:	2800      	cmp	r0, #0
    35a4:	d135      	bne.n	3612 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    35a6:	2300      	movs	r3, #0
    35a8:	e9cd 8900 	strd	r8, r9, [sp]
    35ac:	9302      	str	r3, [sp, #8]
    35ae:	f104 0288 	add.w	r2, r4, #136	; 0x88
    35b2:	4639      	mov	r1, r7
    35b4:	4838      	ldr	r0, [pc, #224]	; (3698 <work_queue_main+0x128>)
    35b6:	f000 fc29 	bl	3e0c <z_sched_wait>
			continue;
    35ba:	e7e2      	b.n	3582 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    35bc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    35c0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    35c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    35c6:	4295      	cmp	r5, r2
    35c8:	d101      	bne.n	35ce <work_queue_main+0x5e>
	list->tail = node;
    35ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    35ce:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    35d2:	f043 0302 	orr.w	r3, r3, #2
    35d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    35da:	68eb      	ldr	r3, [r5, #12]
    35dc:	f023 0304 	bic.w	r3, r3, #4
    35e0:	f043 0301 	orr.w	r3, r3, #1
    35e4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    35e6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    35e8:	f387 8811 	msr	BASEPRI, r7
    35ec:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    35f0:	4628      	mov	r0, r5
    35f2:	4798      	blx	r3
	__asm__ volatile(
    35f4:	f04f 0320 	mov.w	r3, #32
    35f8:	f3ef 8b11 	mrs	fp, BASEPRI
    35fc:	f383 8812 	msr	BASEPRI_MAX, r3
    3600:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    3604:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    3606:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    3608:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    360c:	d40b      	bmi.n	3626 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    360e:	60ea      	str	r2, [r5, #12]
    3610:	e00e      	b.n	3630 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    3612:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    3616:	2200      	movs	r2, #0
    3618:	2101      	movs	r1, #1
    361a:	4628      	mov	r0, r5
    361c:	f001 fdbe 	bl	519c <z_sched_wake>
    3620:	2800      	cmp	r0, #0
    3622:	d1f8      	bne.n	3616 <work_queue_main+0xa6>
    3624:	e7bf      	b.n	35a6 <work_queue_main+0x36>
	return list->head;
    3626:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    3628:	f023 0303 	bic.w	r3, r3, #3
    362c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    362e:	b970      	cbnz	r0, 364e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    3630:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    3634:	f023 0302 	bic.w	r3, r3, #2
    3638:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    363c:	f38b 8811 	msr	BASEPRI, fp
    3640:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    3644:	05d8      	lsls	r0, r3, #23
    3646:	d49c      	bmi.n	3582 <work_queue_main+0x12>
	z_impl_k_yield();
    3648:	f000 fae6 	bl	3c18 <z_impl_k_yield>
}
    364c:	e799      	b.n	3582 <work_queue_main+0x12>
	return node->next;
    364e:	2700      	movs	r7, #0
    3650:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    3654:	463b      	mov	r3, r7
		if (wc->work == work) {
    3656:	6842      	ldr	r2, [r0, #4]
    3658:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    365a:	4601      	mov	r1, r0
		if (wc->work == work) {
    365c:	d10c      	bne.n	3678 <work_queue_main+0x108>
	return node->next;
    365e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    3660:	b997      	cbnz	r7, 3688 <work_queue_main+0x118>
    3662:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    3664:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    3666:	4282      	cmp	r2, r0
    3668:	d100      	bne.n	366c <work_queue_main+0xfc>
	list->tail = node;
    366a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    366c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    3670:	f7ff ff36 	bl	34e0 <z_impl_k_sem_give>
}
    3674:	4639      	mov	r1, r7
    3676:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    3678:	f1ba 0f00 	cmp.w	sl, #0
    367c:	d0d8      	beq.n	3630 <work_queue_main+0xc0>
	return node->next;
    367e:	4650      	mov	r0, sl
    3680:	460f      	mov	r7, r1
    3682:	f8da a000 	ldr.w	sl, [sl]
    3686:	e7e6      	b.n	3656 <work_queue_main+0xe6>
	return list->tail;
    3688:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    368a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    368c:	4290      	cmp	r0, r2
	list->tail = node;
    368e:	bf08      	it	eq
    3690:	6077      	streq	r7, [r6, #4]
}
    3692:	e7eb      	b.n	366c <work_queue_main+0xfc>
    3694:	200005e8 	.word	0x200005e8
    3698:	20000a35 	.word	0x20000a35

0000369c <submit_to_queue_locked>:
{
    369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    369e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    36a0:	079a      	lsls	r2, r3, #30
{
    36a2:	4604      	mov	r4, r0
    36a4:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    36a6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    36aa:	d41f      	bmi.n	36ec <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    36ac:	075f      	lsls	r7, r3, #29
    36ae:	d41f      	bmi.n	36f0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    36b0:	680a      	ldr	r2, [r1, #0]
    36b2:	b90a      	cbnz	r2, 36b8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    36b4:	6882      	ldr	r2, [r0, #8]
    36b6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    36b8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    36ba:	bf44      	itt	mi
    36bc:	68a3      	ldrmi	r3, [r4, #8]
    36be:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    36c0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    36c2:	bf4c      	ite	mi
    36c4:	2502      	movmi	r5, #2
		ret = 1;
    36c6:	2501      	movpl	r5, #1
	if (queue == NULL) {
    36c8:	b37f      	cbz	r7, 372a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    36ca:	4b1b      	ldr	r3, [pc, #108]	; (3738 <submit_to_queue_locked+0x9c>)
    36cc:	689b      	ldr	r3, [r3, #8]
    36ce:	42bb      	cmp	r3, r7
    36d0:	d111      	bne.n	36f6 <submit_to_queue_locked+0x5a>
    36d2:	f001 fc72 	bl	4fba <k_is_in_isr>
    36d6:	f080 0001 	eor.w	r0, r0, #1
    36da:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    36dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    36e0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    36e2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    36e6:	d523      	bpl.n	3730 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    36e8:	b13a      	cbz	r2, 36fa <submit_to_queue_locked+0x5e>
    36ea:	b940      	cbnz	r0, 36fe <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    36ec:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    36f0:	2300      	movs	r3, #0
    36f2:	6033      	str	r3, [r6, #0]
	return ret;
    36f4:	e013      	b.n	371e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    36f6:	2000      	movs	r0, #0
    36f8:	e7f0      	b.n	36dc <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    36fa:	071b      	lsls	r3, r3, #28
    36fc:	d4f6      	bmi.n	36ec <submit_to_queue_locked+0x50>
	parent->next = child;
    36fe:	2300      	movs	r3, #0
    3700:	6023      	str	r3, [r4, #0]
	return list->tail;
    3702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    3706:	b963      	cbnz	r3, 3722 <submit_to_queue_locked+0x86>
	list->head = node;
    3708:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    370c:	4638      	mov	r0, r7
    370e:	f001 fc71 	bl	4ff4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    3712:	68e3      	ldr	r3, [r4, #12]
    3714:	f043 0304 	orr.w	r3, r3, #4
    3718:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    371a:	6833      	ldr	r3, [r6, #0]
    371c:	60a3      	str	r3, [r4, #8]
}
    371e:	4628      	mov	r0, r5
    3720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    3722:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3724:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    3728:	e7f0      	b.n	370c <submit_to_queue_locked+0x70>
		return -EINVAL;
    372a:	f06f 0515 	mvn.w	r5, #21
    372e:	e7df      	b.n	36f0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    3730:	f06f 0512 	mvn.w	r5, #18
    3734:	e7dc      	b.n	36f0 <submit_to_queue_locked+0x54>
    3736:	bf00      	nop
    3738:	200005c0 	.word	0x200005c0

0000373c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    373c:	b5f0      	push	{r4, r5, r6, r7, lr}
    373e:	b089      	sub	sp, #36	; 0x24
    3740:	4604      	mov	r4, r0
	list->head = NULL;
    3742:	2000      	movs	r0, #0
	list->tail = NULL;
    3744:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    3748:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    374a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    374e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    3752:	f104 0090 	add.w	r0, r4, #144	; 0x90
    3756:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    375a:	b31d      	cbz	r5, 37a4 <k_work_queue_start+0x68>
    375c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    375e:	2800      	cmp	r0, #0
    3760:	f240 1001 	movw	r0, #257	; 0x101
    3764:	bf08      	it	eq
    3766:	2001      	moveq	r0, #1
	*flagp = flags;
    3768:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    376c:	2000      	movs	r0, #0
    376e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3776:	e9cd 3003 	strd	r3, r0, [sp, #12]
    377a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    377e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3782:	4b09      	ldr	r3, [pc, #36]	; (37a8 <k_work_queue_start+0x6c>)
    3784:	9400      	str	r4, [sp, #0]
    3786:	4620      	mov	r0, r4
    3788:	f7ff fe0c 	bl	33a4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    378c:	b125      	cbz	r5, 3798 <k_work_queue_start+0x5c>
    378e:	6829      	ldr	r1, [r5, #0]
    3790:	b111      	cbz	r1, 3798 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    3792:	4620      	mov	r0, r4
    3794:	f001 fc17 	bl	4fc6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    3798:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    379a:	b009      	add	sp, #36	; 0x24
    379c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    37a0:	f001 bc14 	b.w	4fcc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    37a4:	2001      	movs	r0, #1
    37a6:	e7df      	b.n	3768 <k_work_queue_start+0x2c>
    37a8:	00003571 	.word	0x00003571

000037ac <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    37ac:	b513      	push	{r0, r1, r4, lr}
    37ae:	9001      	str	r0, [sp, #4]
    37b0:	4608      	mov	r0, r1
	__asm__ volatile(
    37b2:	f04f 0120 	mov.w	r1, #32
    37b6:	f3ef 8411 	mrs	r4, BASEPRI
    37ba:	f381 8812 	msr	BASEPRI_MAX, r1
    37be:	f3bf 8f6f 	isb	sy
	return *flagp;
    37c2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    37c4:	f011 0f0e 	tst.w	r1, #14
    37c8:	d116      	bne.n	37f8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    37ca:	ea53 0c02 	orrs.w	ip, r3, r2
    37ce:	d108      	bne.n	37e2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    37d0:	a901      	add	r1, sp, #4
    37d2:	f7ff ff63 	bl	369c <submit_to_queue_locked>
	__asm__ volatile(
    37d6:	f384 8811 	msr	BASEPRI, r4
    37da:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    37de:	b002      	add	sp, #8
    37e0:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    37e2:	f041 0108 	orr.w	r1, r1, #8
    37e6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    37e8:	9901      	ldr	r1, [sp, #4]
    37ea:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    37ec:	3010      	adds	r0, #16
    37ee:	4903      	ldr	r1, [pc, #12]	; (37fc <k_work_schedule_for_queue+0x50>)
    37f0:	f000 fb84 	bl	3efc <z_add_timeout>
	return ret;
    37f4:	2001      	movs	r0, #1
    37f6:	e7ee      	b.n	37d6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    37f8:	2000      	movs	r0, #0
    37fa:	e7ec      	b.n	37d6 <k_work_schedule_for_queue+0x2a>
    37fc:	00005003 	.word	0x00005003

00003800 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    3800:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    3802:	4801      	ldr	r0, [pc, #4]	; (3808 <k_work_schedule+0x8>)
    3804:	f7ff bfd2 	b.w	37ac <k_work_schedule_for_queue>
    3808:	200002f8 	.word	0x200002f8

0000380c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    380c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    380e:	4c08      	ldr	r4, [pc, #32]	; (3830 <z_reset_time_slice+0x24>)
    3810:	6823      	ldr	r3, [r4, #0]
    3812:	b15b      	cbz	r3, 382c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3814:	f7fe fe58 	bl	24c8 <sys_clock_elapsed>
    3818:	4603      	mov	r3, r0
    381a:	6820      	ldr	r0, [r4, #0]
    381c:	4a05      	ldr	r2, [pc, #20]	; (3834 <z_reset_time_slice+0x28>)
    381e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    3820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3824:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3826:	2100      	movs	r1, #0
    3828:	f001 bcfb 	b.w	5222 <z_set_timeout_expiry>
}
    382c:	bd10      	pop	{r4, pc}
    382e:	bf00      	nop
    3830:	200005f8 	.word	0x200005f8
    3834:	200005c0 	.word	0x200005c0

00003838 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    383a:	4604      	mov	r4, r0
    383c:	460d      	mov	r5, r1
	__asm__ volatile(
    383e:	f04f 0320 	mov.w	r3, #32
    3842:	f3ef 8611 	mrs	r6, BASEPRI
    3846:	f383 8812 	msr	BASEPRI_MAX, r3
    384a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    384e:	4b0f      	ldr	r3, [pc, #60]	; (388c <k_sched_time_slice_set+0x54>)
    3850:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    3852:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3856:	f240 30e7 	movw	r0, #999	; 0x3e7
    385a:	6119      	str	r1, [r3, #16]
    385c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3860:	2300      	movs	r3, #0
    3862:	fbe4 0107 	umlal	r0, r1, r4, r7
    3866:	f7fc fc39 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    386a:	2c00      	cmp	r4, #0
    386c:	4b08      	ldr	r3, [pc, #32]	; (3890 <k_sched_time_slice_set+0x58>)
    386e:	dc09      	bgt.n	3884 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    3870:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3872:	4b08      	ldr	r3, [pc, #32]	; (3894 <k_sched_time_slice_set+0x5c>)
    3874:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3876:	f7ff ffc9 	bl	380c <z_reset_time_slice>
	__asm__ volatile(
    387a:	f386 8811 	msr	BASEPRI, r6
    387e:	f3bf 8f6f 	isb	sy
	}
}
    3882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    3884:	2802      	cmp	r0, #2
    3886:	bfb8      	it	lt
    3888:	2002      	movlt	r0, #2
    388a:	e7f1      	b.n	3870 <k_sched_time_slice_set+0x38>
    388c:	200005c0 	.word	0x200005c0
    3890:	200005f8 	.word	0x200005f8
    3894:	200005f4 	.word	0x200005f4

00003898 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3898:	b949      	cbnz	r1, 38ae <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    389a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    389e:	b930      	cbnz	r0, 38ae <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    38a0:	4b05      	ldr	r3, [pc, #20]	; (38b8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    38a2:	69da      	ldr	r2, [r3, #28]
    38a4:	689b      	ldr	r3, [r3, #8]
    38a6:	429a      	cmp	r2, r3
    38a8:	d001      	beq.n	38ae <z_reschedule+0x16>
	ret = arch_swap(key);
    38aa:	f7fd bb5d 	b.w	f68 <arch_swap>
    38ae:	f381 8811 	msr	BASEPRI, r1
    38b2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    38b6:	4770      	bx	lr
    38b8:	200005c0 	.word	0x200005c0

000038bc <k_sched_lock>:
	__asm__ volatile(
    38bc:	f04f 0320 	mov.w	r3, #32
    38c0:	f3ef 8111 	mrs	r1, BASEPRI
    38c4:	f383 8812 	msr	BASEPRI_MAX, r3
    38c8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    38cc:	4b04      	ldr	r3, [pc, #16]	; (38e0 <k_sched_lock+0x24>)
    38ce:	689a      	ldr	r2, [r3, #8]
    38d0:	7bd3      	ldrb	r3, [r2, #15]
    38d2:	3b01      	subs	r3, #1
    38d4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    38d6:	f381 8811 	msr	BASEPRI, r1
    38da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    38de:	4770      	bx	lr
    38e0:	200005c0 	.word	0x200005c0

000038e4 <update_cache>:
{
    38e4:	b538      	push	{r3, r4, r5, lr}
    38e6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    38e8:	480c      	ldr	r0, [pc, #48]	; (391c <update_cache+0x38>)
    38ea:	4d0d      	ldr	r5, [pc, #52]	; (3920 <update_cache+0x3c>)
    38ec:	f001 fbdc 	bl	50a8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    38f0:	4604      	mov	r4, r0
    38f2:	b900      	cbnz	r0, 38f6 <update_cache+0x12>
    38f4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    38f6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    38f8:	b94a      	cbnz	r2, 390e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    38fa:	7b5a      	ldrb	r2, [r3, #13]
    38fc:	06d2      	lsls	r2, r2, #27
    38fe:	d106      	bne.n	390e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3900:	69a2      	ldr	r2, [r4, #24]
    3902:	b922      	cbnz	r2, 390e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    3904:	89da      	ldrh	r2, [r3, #14]
    3906:	2a7f      	cmp	r2, #127	; 0x7f
    3908:	d901      	bls.n	390e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    390a:	61eb      	str	r3, [r5, #28]
}
    390c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    390e:	429c      	cmp	r4, r3
    3910:	d001      	beq.n	3916 <update_cache+0x32>
			z_reset_time_slice();
    3912:	f7ff ff7b 	bl	380c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3916:	61ec      	str	r4, [r5, #28]
}
    3918:	e7f8      	b.n	390c <update_cache+0x28>
    391a:	bf00      	nop
    391c:	200005e0 	.word	0x200005e0
    3920:	200005c0 	.word	0x200005c0

00003924 <move_thread_to_end_of_prio_q>:
{
    3924:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3926:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    392a:	7b43      	ldrb	r3, [r0, #13]
    392c:	2a00      	cmp	r2, #0
{
    392e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3930:	da04      	bge.n	393c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3936:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3938:	f001 fb8e 	bl	5058 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    393c:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    393e:	4a15      	ldr	r2, [pc, #84]	; (3994 <move_thread_to_end_of_prio_q+0x70>)
    3940:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3944:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3946:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    394a:	f102 0520 	add.w	r5, r2, #32
    394e:	42ab      	cmp	r3, r5
    3950:	d01b      	beq.n	398a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3952:	b1d3      	cbz	r3, 398a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    3954:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3958:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    395c:	4286      	cmp	r6, r0
    395e:	d00f      	beq.n	3980 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3960:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3962:	2800      	cmp	r0, #0
    3964:	dd0c      	ble.n	3980 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3966:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3968:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    396c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    396e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3970:	6890      	ldr	r0, [r2, #8]
    3972:	1a43      	subs	r3, r0, r1
    3974:	4258      	negs	r0, r3
}
    3976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    397a:	4158      	adcs	r0, r3
    397c:	f7ff bfb2 	b.w	38e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3980:	42a3      	cmp	r3, r4
    3982:	d002      	beq.n	398a <move_thread_to_end_of_prio_q+0x66>
    3984:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3986:	2b00      	cmp	r3, #0
    3988:	d1e6      	bne.n	3958 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    398a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    398e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3990:	6251      	str	r1, [r2, #36]	; 0x24
}
    3992:	e7ed      	b.n	3970 <move_thread_to_end_of_prio_q+0x4c>
    3994:	200005c0 	.word	0x200005c0

00003998 <z_time_slice>:
{
    3998:	b538      	push	{r3, r4, r5, lr}
    399a:	4601      	mov	r1, r0
	__asm__ volatile(
    399c:	f04f 0320 	mov.w	r3, #32
    39a0:	f3ef 8411 	mrs	r4, BASEPRI
    39a4:	f383 8812 	msr	BASEPRI_MAX, r3
    39a8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    39ac:	4b15      	ldr	r3, [pc, #84]	; (3a04 <z_time_slice+0x6c>)
    39ae:	4a16      	ldr	r2, [pc, #88]	; (3a08 <z_time_slice+0x70>)
    39b0:	6898      	ldr	r0, [r3, #8]
    39b2:	6815      	ldr	r5, [r2, #0]
    39b4:	42a8      	cmp	r0, r5
    39b6:	d106      	bne.n	39c6 <z_time_slice+0x2e>
			z_reset_time_slice();
    39b8:	f7ff ff28 	bl	380c <z_reset_time_slice>
	__asm__ volatile(
    39bc:	f384 8811 	msr	BASEPRI, r4
    39c0:	f3bf 8f6f 	isb	sy
}
    39c4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    39c6:	2500      	movs	r5, #0
    39c8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    39ca:	4a10      	ldr	r2, [pc, #64]	; (3a0c <z_time_slice+0x74>)
    39cc:	6812      	ldr	r2, [r2, #0]
    39ce:	b1ba      	cbz	r2, 3a00 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    39d0:	89c2      	ldrh	r2, [r0, #14]
    39d2:	2a7f      	cmp	r2, #127	; 0x7f
    39d4:	d814      	bhi.n	3a00 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    39d6:	7b42      	ldrb	r2, [r0, #13]
    39d8:	06d2      	lsls	r2, r2, #27
    39da:	d111      	bne.n	3a00 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    39dc:	4a0c      	ldr	r2, [pc, #48]	; (3a10 <z_time_slice+0x78>)
    39de:	f990 500e 	ldrsb.w	r5, [r0, #14]
    39e2:	6812      	ldr	r2, [r2, #0]
    39e4:	4295      	cmp	r5, r2
    39e6:	db0b      	blt.n	3a00 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    39e8:	4a0a      	ldr	r2, [pc, #40]	; (3a14 <z_time_slice+0x7c>)
    39ea:	4290      	cmp	r0, r2
    39ec:	d008      	beq.n	3a00 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    39ee:	691a      	ldr	r2, [r3, #16]
    39f0:	428a      	cmp	r2, r1
    39f2:	dc02      	bgt.n	39fa <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    39f4:	f7ff ff96 	bl	3924 <move_thread_to_end_of_prio_q>
    39f8:	e7de      	b.n	39b8 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    39fa:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    39fc:	611a      	str	r2, [r3, #16]
    39fe:	e7dd      	b.n	39bc <z_time_slice+0x24>
    3a00:	2200      	movs	r2, #0
    3a02:	e7fb      	b.n	39fc <z_time_slice+0x64>
    3a04:	200005c0 	.word	0x200005c0
    3a08:	200005f0 	.word	0x200005f0
    3a0c:	200005f8 	.word	0x200005f8
    3a10:	200005f4 	.word	0x200005f4
    3a14:	200001f0 	.word	0x200001f0

00003a18 <ready_thread>:
{
    3a18:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3a1a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3a1e:	7b43      	ldrb	r3, [r0, #13]
    3a20:	2a00      	cmp	r2, #0
    3a22:	db2a      	blt.n	3a7a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3a24:	06da      	lsls	r2, r3, #27
    3a26:	d128      	bne.n	3a7a <ready_thread+0x62>
    3a28:	6982      	ldr	r2, [r0, #24]
    3a2a:	bb32      	cbnz	r2, 3a7a <ready_thread+0x62>
	return list->head == list;
    3a2c:	4a14      	ldr	r2, [pc, #80]	; (3a80 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a32:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    3a34:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a38:	f102 0520 	add.w	r5, r2, #32
    3a3c:	42ab      	cmp	r3, r5
    3a3e:	d017      	beq.n	3a70 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a40:	b1b3      	cbz	r3, 3a70 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    3a42:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3a46:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3a4a:	428e      	cmp	r6, r1
    3a4c:	d00b      	beq.n	3a66 <ready_thread+0x4e>
		return b2 - b1;
    3a4e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3a50:	2900      	cmp	r1, #0
    3a52:	dd08      	ble.n	3a66 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    3a54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3a56:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3a5a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3a5c:	6058      	str	r0, [r3, #4]
}
    3a5e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3a60:	2000      	movs	r0, #0
    3a62:	f7ff bf3f 	b.w	38e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3a66:	42a3      	cmp	r3, r4
    3a68:	d002      	beq.n	3a70 <ready_thread+0x58>
    3a6a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d1ea      	bne.n	3a46 <ready_thread+0x2e>
	node->prev = tail;
    3a70:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    3a74:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3a76:	6250      	str	r0, [r2, #36]	; 0x24
}
    3a78:	e7f1      	b.n	3a5e <ready_thread+0x46>
}
    3a7a:	bc70      	pop	{r4, r5, r6}
    3a7c:	4770      	bx	lr
    3a7e:	bf00      	nop
    3a80:	200005c0 	.word	0x200005c0

00003a84 <z_sched_start>:
{
    3a84:	b510      	push	{r4, lr}
	__asm__ volatile(
    3a86:	f04f 0220 	mov.w	r2, #32
    3a8a:	f3ef 8411 	mrs	r4, BASEPRI
    3a8e:	f382 8812 	msr	BASEPRI_MAX, r2
    3a92:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3a96:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3a98:	0751      	lsls	r1, r2, #29
    3a9a:	d404      	bmi.n	3aa6 <z_sched_start+0x22>
	__asm__ volatile(
    3a9c:	f384 8811 	msr	BASEPRI, r4
    3aa0:	f3bf 8f6f 	isb	sy
}
    3aa4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3aa6:	f022 0204 	bic.w	r2, r2, #4
    3aaa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3aac:	f7ff ffb4 	bl	3a18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3ab0:	4621      	mov	r1, r4
    3ab2:	4802      	ldr	r0, [pc, #8]	; (3abc <z_sched_start+0x38>)
}
    3ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3ab8:	f7ff beee 	b.w	3898 <z_reschedule>
    3abc:	20000a35 	.word	0x20000a35

00003ac0 <unready_thread>:
{
    3ac0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3ac2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3ac6:	7b43      	ldrb	r3, [r0, #13]
    3ac8:	2a00      	cmp	r2, #0
{
    3aca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3acc:	da04      	bge.n	3ad8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ad2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3ad4:	f001 fac0 	bl	5058 <sys_dlist_remove>
	update_cache(thread == _current);
    3ad8:	4b04      	ldr	r3, [pc, #16]	; (3aec <unready_thread+0x2c>)
    3ada:	6898      	ldr	r0, [r3, #8]
    3adc:	1a43      	subs	r3, r0, r1
    3ade:	4258      	negs	r0, r3
    3ae0:	4158      	adcs	r0, r3
}
    3ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3ae6:	f7ff befd 	b.w	38e4 <update_cache>
    3aea:	bf00      	nop
    3aec:	200005c0 	.word	0x200005c0

00003af0 <pend>:
{
    3af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3af4:	4606      	mov	r6, r0
    3af6:	4615      	mov	r5, r2
    3af8:	461c      	mov	r4, r3
	__asm__ volatile(
    3afa:	f04f 0320 	mov.w	r3, #32
    3afe:	f3ef 8711 	mrs	r7, BASEPRI
    3b02:	f383 8812 	msr	BASEPRI_MAX, r3
    3b06:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3b0a:	f001 fb05 	bl	5118 <add_to_waitq_locked>
	__asm__ volatile(
    3b0e:	f387 8811 	msr	BASEPRI, r7
    3b12:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b16:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3b1a:	bf08      	it	eq
    3b1c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3b20:	d008      	beq.n	3b34 <pend+0x44>
    3b22:	462a      	mov	r2, r5
    3b24:	4623      	mov	r3, r4
    3b26:	f106 0018 	add.w	r0, r6, #24
    3b2a:	4903      	ldr	r1, [pc, #12]	; (3b38 <pend+0x48>)
}
    3b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b30:	f000 b9e4 	b.w	3efc <z_add_timeout>
    3b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b38:	000050d5 	.word	0x000050d5

00003b3c <z_pend_curr>:
{
    3b3c:	b510      	push	{r4, lr}
	pending_current = _current;
    3b3e:	4b07      	ldr	r3, [pc, #28]	; (3b5c <z_pend_curr+0x20>)
    3b40:	6898      	ldr	r0, [r3, #8]
    3b42:	4b07      	ldr	r3, [pc, #28]	; (3b60 <z_pend_curr+0x24>)
{
    3b44:	460c      	mov	r4, r1
	pending_current = _current;
    3b46:	6018      	str	r0, [r3, #0]
{
    3b48:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3b4e:	f7ff ffcf 	bl	3af0 <pend>
    3b52:	4620      	mov	r0, r4
}
    3b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b58:	f7fd ba06 	b.w	f68 <arch_swap>
    3b5c:	200005c0 	.word	0x200005c0
    3b60:	200005f0 	.word	0x200005f0

00003b64 <z_impl_k_thread_suspend>:
{
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3b68:	3018      	adds	r0, #24
    3b6a:	f001 fb34 	bl	51d6 <z_abort_timeout>
	__asm__ volatile(
    3b6e:	f04f 0320 	mov.w	r3, #32
    3b72:	f3ef 8611 	mrs	r6, BASEPRI
    3b76:	f383 8812 	msr	BASEPRI_MAX, r3
    3b7a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3b7e:	f994 200d 	ldrsb.w	r2, [r4, #13]
    3b82:	7b63      	ldrb	r3, [r4, #13]
    3b84:	2a00      	cmp	r2, #0
    3b86:	da05      	bge.n	3b94 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3b8c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3b8e:	4620      	mov	r0, r4
    3b90:	f001 fa62 	bl	5058 <sys_dlist_remove>
		update_cache(thread == _current);
    3b94:	4d0b      	ldr	r5, [pc, #44]	; (3bc4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3b96:	7b63      	ldrb	r3, [r4, #13]
    3b98:	68a8      	ldr	r0, [r5, #8]
    3b9a:	f043 0310 	orr.w	r3, r3, #16
    3b9e:	7363      	strb	r3, [r4, #13]
    3ba0:	1b03      	subs	r3, r0, r4
    3ba2:	4258      	negs	r0, r3
    3ba4:	4158      	adcs	r0, r3
    3ba6:	f7ff fe9d 	bl	38e4 <update_cache>
	__asm__ volatile(
    3baa:	f386 8811 	msr	BASEPRI, r6
    3bae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3bb2:	68ab      	ldr	r3, [r5, #8]
    3bb4:	42a3      	cmp	r3, r4
    3bb6:	d103      	bne.n	3bc0 <z_impl_k_thread_suspend+0x5c>
}
    3bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3bbc:	f001 ba6a 	b.w	5094 <z_reschedule_unlocked>
}
    3bc0:	bd70      	pop	{r4, r5, r6, pc}
    3bc2:	bf00      	nop
    3bc4:	200005c0 	.word	0x200005c0

00003bc8 <k_sched_unlock>:
{
    3bc8:	b510      	push	{r4, lr}
	__asm__ volatile(
    3bca:	f04f 0320 	mov.w	r3, #32
    3bce:	f3ef 8411 	mrs	r4, BASEPRI
    3bd2:	f383 8812 	msr	BASEPRI_MAX, r3
    3bd6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3bda:	4b08      	ldr	r3, [pc, #32]	; (3bfc <k_sched_unlock+0x34>)
    3bdc:	689a      	ldr	r2, [r3, #8]
    3bde:	7bd3      	ldrb	r3, [r2, #15]
    3be0:	3301      	adds	r3, #1
    3be2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3be4:	2000      	movs	r0, #0
    3be6:	f7ff fe7d 	bl	38e4 <update_cache>
	__asm__ volatile(
    3bea:	f384 8811 	msr	BASEPRI, r4
    3bee:	f3bf 8f6f 	isb	sy
}
    3bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3bf6:	f001 ba4d 	b.w	5094 <z_reschedule_unlocked>
    3bfa:	bf00      	nop
    3bfc:	200005c0 	.word	0x200005c0

00003c00 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3c00:	4b04      	ldr	r3, [pc, #16]	; (3c14 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3c02:	2100      	movs	r1, #0
    3c04:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3c08:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3c0c:	4608      	mov	r0, r1
    3c0e:	f7ff be13 	b.w	3838 <k_sched_time_slice_set>
    3c12:	bf00      	nop
    3c14:	200005c0 	.word	0x200005c0

00003c18 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    3c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3c1a:	f04f 0320 	mov.w	r3, #32
    3c1e:	f3ef 8511 	mrs	r5, BASEPRI
    3c22:	f383 8812 	msr	BASEPRI_MAX, r3
    3c26:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3c2a:	491a      	ldr	r1, [pc, #104]	; (3c94 <z_impl_k_yield+0x7c>)
    3c2c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c2e:	7b43      	ldrb	r3, [r0, #13]
    3c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3c34:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3c36:	f001 fa0f 	bl	5058 <sys_dlist_remove>
	}
	queue_thread(_current);
    3c3a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3c3c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3c3e:	4608      	mov	r0, r1
    3c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3c44:	735a      	strb	r2, [r3, #13]
    3c46:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c4a:	4282      	cmp	r2, r0
    3c4c:	d01c      	beq.n	3c88 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3c4e:	b1da      	cbz	r2, 3c88 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    3c50:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    3c52:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3c56:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    3c5a:	42a6      	cmp	r6, r4
    3c5c:	d00f      	beq.n	3c7e <z_impl_k_yield+0x66>
		return b2 - b1;
    3c5e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3c60:	2c00      	cmp	r4, #0
    3c62:	dd0c      	ble.n	3c7e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    3c64:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3c66:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3c6a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3c6c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3c6e:	2001      	movs	r0, #1
    3c70:	f7ff fe38 	bl	38e4 <update_cache>
    3c74:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c7a:	f7fd b975 	b.w	f68 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3c7e:	42ba      	cmp	r2, r7
    3c80:	d002      	beq.n	3c88 <z_impl_k_yield+0x70>
    3c82:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3c84:	2a00      	cmp	r2, #0
    3c86:	d1e6      	bne.n	3c56 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    3c88:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    3c8a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    3c8e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3c90:	624b      	str	r3, [r1, #36]	; 0x24
}
    3c92:	e7ec      	b.n	3c6e <z_impl_k_yield+0x56>
    3c94:	200005c0 	.word	0x200005c0

00003c98 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3c98:	ea50 0301 	orrs.w	r3, r0, r1
{
    3c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ca0:	4605      	mov	r5, r0
    3ca2:	460e      	mov	r6, r1
	if (ticks == 0) {
    3ca4:	d103      	bne.n	3cae <z_tick_sleep+0x16>
	z_impl_k_yield();
    3ca6:	f7ff ffb7 	bl	3c18 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    3caa:	2000      	movs	r0, #0
    3cac:	e033      	b.n	3d16 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    3cae:	f06f 0401 	mvn.w	r4, #1
    3cb2:	1a24      	subs	r4, r4, r0
    3cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cb8:	eb63 0301 	sbc.w	r3, r3, r1
    3cbc:	2c01      	cmp	r4, #1
    3cbe:	f173 0300 	sbcs.w	r3, r3, #0
    3cc2:	da02      	bge.n	3cca <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3cc4:	f001 fac7 	bl	5256 <sys_clock_tick_get_32>
    3cc8:	1944      	adds	r4, r0, r5
    3cca:	f04f 0320 	mov.w	r3, #32
    3cce:	f3ef 8811 	mrs	r8, BASEPRI
    3cd2:	f383 8812 	msr	BASEPRI_MAX, r3
    3cd6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3cda:	4f10      	ldr	r7, [pc, #64]	; (3d1c <z_tick_sleep+0x84>)
    3cdc:	4b10      	ldr	r3, [pc, #64]	; (3d20 <z_tick_sleep+0x88>)
    3cde:	68b8      	ldr	r0, [r7, #8]
    3ce0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3ce2:	f7ff feed 	bl	3ac0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3ce6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3ce8:	490e      	ldr	r1, [pc, #56]	; (3d24 <z_tick_sleep+0x8c>)
    3cea:	462a      	mov	r2, r5
    3cec:	4633      	mov	r3, r6
    3cee:	3018      	adds	r0, #24
    3cf0:	f000 f904 	bl	3efc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3cf4:	68ba      	ldr	r2, [r7, #8]
    3cf6:	7b53      	ldrb	r3, [r2, #13]
    3cf8:	f043 0310 	orr.w	r3, r3, #16
    3cfc:	7353      	strb	r3, [r2, #13]
    3cfe:	4640      	mov	r0, r8
    3d00:	f7fd f932 	bl	f68 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3d04:	f001 faa7 	bl	5256 <sys_clock_tick_get_32>
    3d08:	1a20      	subs	r0, r4, r0
    3d0a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3d0e:	2801      	cmp	r0, #1
    3d10:	f173 0300 	sbcs.w	r3, r3, #0
    3d14:	dbc9      	blt.n	3caa <z_tick_sleep+0x12>
}
    3d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d1a:	bf00      	nop
    3d1c:	200005c0 	.word	0x200005c0
    3d20:	200005f0 	.word	0x200005f0
    3d24:	000050d5 	.word	0x000050d5

00003d28 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d28:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3d2c:	bf08      	it	eq
    3d2e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    3d32:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d34:	d106      	bne.n	3d44 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3d36:	4b08      	ldr	r3, [pc, #32]	; (3d58 <z_impl_k_sleep+0x30>)
    3d38:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3d3a:	f7ff ff13 	bl	3b64 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3d42:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3d44:	f7ff ffa8 	bl	3c98 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    3d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3d4c:	fb80 0303 	smull	r0, r3, r0, r3
    3d50:	0bc0      	lsrs	r0, r0, #15
    3d52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3d56:	e7f4      	b.n	3d42 <z_impl_k_sleep+0x1a>
    3d58:	200005c0 	.word	0x200005c0

00003d5c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3d5c:	4b01      	ldr	r3, [pc, #4]	; (3d64 <z_impl_z_current_get+0x8>)
    3d5e:	6898      	ldr	r0, [r3, #8]
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	200005c0 	.word	0x200005c0

00003d68 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d6c:	4604      	mov	r4, r0
    3d6e:	f04f 0320 	mov.w	r3, #32
    3d72:	f3ef 8611 	mrs	r6, BASEPRI
    3d76:	f383 8812 	msr	BASEPRI_MAX, r3
    3d7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3d7e:	7b43      	ldrb	r3, [r0, #13]
    3d80:	071a      	lsls	r2, r3, #28
    3d82:	d505      	bpl.n	3d90 <z_thread_abort+0x28>
	__asm__ volatile(
    3d84:	f386 8811 	msr	BASEPRI, r6
    3d88:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3d90:	f023 0220 	bic.w	r2, r3, #32
    3d94:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3d98:	09d2      	lsrs	r2, r2, #7
    3d9a:	d120      	bne.n	3dde <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3d9c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3d9e:	68a3      	ldr	r3, [r4, #8]
    3da0:	b113      	cbz	r3, 3da8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    3da2:	4620      	mov	r0, r4
    3da4:	f001 f960 	bl	5068 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3da8:	f104 0018 	add.w	r0, r4, #24
    3dac:	f001 fa13 	bl	51d6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3db0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    3db4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3db8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dba:	42bd      	cmp	r5, r7
    3dbc:	d000      	beq.n	3dc0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3dbe:	b9b5      	cbnz	r5, 3dee <z_thread_abort+0x86>
		update_cache(1);
    3dc0:	2001      	movs	r0, #1
    3dc2:	f7ff fd8f 	bl	38e4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3dc6:	4b10      	ldr	r3, [pc, #64]	; (3e08 <z_thread_abort+0xa0>)
    3dc8:	689b      	ldr	r3, [r3, #8]
    3dca:	42a3      	cmp	r3, r4
    3dcc:	d1da      	bne.n	3d84 <z_thread_abort+0x1c>
    3dce:	f3ef 8305 	mrs	r3, IPSR
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d1d6      	bne.n	3d84 <z_thread_abort+0x1c>
    3dd6:	4630      	mov	r0, r6
    3dd8:	f7fd f8c6 	bl	f68 <arch_swap>
	return ret;
    3ddc:	e7d2      	b.n	3d84 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3dde:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3de2:	f043 0308 	orr.w	r3, r3, #8
    3de6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3de8:	f001 f936 	bl	5058 <sys_dlist_remove>
}
    3dec:	e7d7      	b.n	3d9e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    3dee:	4628      	mov	r0, r5
    3df0:	f001 f93a 	bl	5068 <unpend_thread_no_timeout>
    3df4:	f105 0018 	add.w	r0, r5, #24
    3df8:	f001 f9ed 	bl	51d6 <z_abort_timeout>
    3dfc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3e00:	4628      	mov	r0, r5
    3e02:	f7ff fe09 	bl	3a18 <ready_thread>
    3e06:	e7d7      	b.n	3db8 <z_thread_abort+0x50>
    3e08:	200005c0 	.word	0x200005c0

00003e0c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    3e0c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    3e0e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    3e12:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    3e14:	e9cd 6700 	strd	r6, r7, [sp]
    3e18:	f7ff fe90 	bl	3b3c <z_pend_curr>

	if (data != NULL) {
    3e1c:	b11c      	cbz	r4, 3e26 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    3e1e:	4b03      	ldr	r3, [pc, #12]	; (3e2c <z_sched_wait+0x20>)
    3e20:	689b      	ldr	r3, [r3, #8]
    3e22:	695b      	ldr	r3, [r3, #20]
    3e24:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    3e26:	b002      	add	sp, #8
    3e28:	bdd0      	pop	{r4, r6, r7, pc}
    3e2a:	bf00      	nop
    3e2c:	200005c0 	.word	0x200005c0

00003e30 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3e30:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    3e32:	4806      	ldr	r0, [pc, #24]	; (3e4c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    3e34:	4a06      	ldr	r2, [pc, #24]	; (3e50 <z_data_copy+0x20>)
    3e36:	4907      	ldr	r1, [pc, #28]	; (3e54 <z_data_copy+0x24>)
    3e38:	1a12      	subs	r2, r2, r0
    3e3a:	f000 fb40 	bl	44be <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3e42:	4a05      	ldr	r2, [pc, #20]	; (3e58 <z_data_copy+0x28>)
    3e44:	4905      	ldr	r1, [pc, #20]	; (3e5c <z_data_copy+0x2c>)
    3e46:	4806      	ldr	r0, [pc, #24]	; (3e60 <z_data_copy+0x30>)
    3e48:	f000 bb39 	b.w	44be <memcpy>
    3e4c:	20000000 	.word	0x20000000
    3e50:	200000e8 	.word	0x200000e8
    3e54:	00005918 	.word	0x00005918
    3e58:	00000000 	.word	0x00000000
    3e5c:	00005918 	.word	0x00005918
    3e60:	20000000 	.word	0x20000000

00003e64 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3e64:	4b03      	ldr	r3, [pc, #12]	; (3e74 <elapsed+0x10>)
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	b90b      	cbnz	r3, 3e6e <elapsed+0xa>
    3e6a:	f7fe bb2d 	b.w	24c8 <sys_clock_elapsed>
}
    3e6e:	2000      	movs	r0, #0
    3e70:	4770      	bx	lr
    3e72:	bf00      	nop
    3e74:	200005fc 	.word	0x200005fc

00003e78 <next_timeout>:
	return list->head == list;
    3e78:	4b11      	ldr	r3, [pc, #68]	; (3ec0 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    3e7a:	b510      	push	{r4, lr}
    3e7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e7e:	429c      	cmp	r4, r3
    3e80:	bf08      	it	eq
    3e82:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3e84:	f7ff ffee 	bl	3e64 <elapsed>
    3e88:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    3e8a:	b16c      	cbz	r4, 3ea8 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3e8c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    3e90:	1ac0      	subs	r0, r0, r3
    3e92:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3e96:	2801      	cmp	r0, #1
    3e98:	f173 0200 	sbcs.w	r2, r3, #0
    3e9c:	db0d      	blt.n	3eba <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3e9e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3ea2:	f173 0300 	sbcs.w	r3, r3, #0
    3ea6:	db01      	blt.n	3eac <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    3ea8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3eac:	4b05      	ldr	r3, [pc, #20]	; (3ec4 <next_timeout+0x4c>)
    3eae:	691b      	ldr	r3, [r3, #16]
    3eb0:	b113      	cbz	r3, 3eb8 <next_timeout+0x40>
    3eb2:	4298      	cmp	r0, r3
    3eb4:	bfa8      	it	ge
    3eb6:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3eb8:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3eba:	2000      	movs	r0, #0
    3ebc:	e7f6      	b.n	3eac <next_timeout+0x34>
    3ebe:	bf00      	nop
    3ec0:	200000ac 	.word	0x200000ac
    3ec4:	200005c0 	.word	0x200005c0

00003ec8 <remove_timeout>:
{
    3ec8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    3eca:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ecc:	b168      	cbz	r0, 3eea <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3ece:	4a0a      	ldr	r2, [pc, #40]	; (3ef8 <remove_timeout+0x30>)
    3ed0:	6852      	ldr	r2, [r2, #4]
    3ed2:	4290      	cmp	r0, r2
    3ed4:	d009      	beq.n	3eea <remove_timeout+0x22>
	if (next(t) != NULL) {
    3ed6:	b143      	cbz	r3, 3eea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3ed8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3edc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3ee0:	1912      	adds	r2, r2, r4
    3ee2:	eb41 0105 	adc.w	r1, r1, r5
    3ee6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    3eea:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    3eec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3eee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3ef0:	2300      	movs	r3, #0
	node->prev = NULL;
    3ef2:	e9c0 3300 	strd	r3, r3, [r0]
}
    3ef6:	bd30      	pop	{r4, r5, pc}
    3ef8:	200000ac 	.word	0x200000ac

00003efc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3f00:	bf08      	it	eq
    3f02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f08:	4604      	mov	r4, r0
    3f0a:	461f      	mov	r7, r3
    3f0c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f0e:	d067      	beq.n	3fe0 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3f10:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3f12:	f04f 0320 	mov.w	r3, #32
    3f16:	f3ef 8611 	mrs	r6, BASEPRI
    3f1a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f1e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    3f22:	f06f 0201 	mvn.w	r2, #1
    3f26:	1b53      	subs	r3, r2, r5
    3f28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    3f2c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3f30:	2b00      	cmp	r3, #0
    3f32:	db1b      	blt.n	3f6c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3f34:	4b2b      	ldr	r3, [pc, #172]	; (3fe4 <z_add_timeout+0xe8>)
    3f36:	e9d3 1300 	ldrd	r1, r3, [r3]
    3f3a:	1a52      	subs	r2, r2, r1
    3f3c:	eb6c 0303 	sbc.w	r3, ip, r3
    3f40:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    3f42:	eb63 0307 	sbc.w	r3, r3, r7
    3f46:	2d01      	cmp	r5, #1
    3f48:	f173 0200 	sbcs.w	r2, r3, #0
    3f4c:	bfbc      	itt	lt
    3f4e:	2501      	movlt	r5, #1
    3f50:	2300      	movlt	r3, #0
    3f52:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    3f56:	4824      	ldr	r0, [pc, #144]	; (3fe8 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    3f58:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f5c:	4283      	cmp	r3, r0
    3f5e:	d118      	bne.n	3f92 <z_add_timeout+0x96>
	node->prev = tail;
    3f60:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    3f64:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    3f68:	6044      	str	r4, [r0, #4]
}
    3f6a:	e026      	b.n	3fba <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3f6c:	f7ff ff7a 	bl	3e64 <elapsed>
    3f70:	3501      	adds	r5, #1
    3f72:	f147 0700 	adc.w	r7, r7, #0
    3f76:	182d      	adds	r5, r5, r0
    3f78:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    3f7c:	e9c4 5704 	strd	r5, r7, [r4, #16]
    3f80:	e7e9      	b.n	3f56 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    3f82:	1a52      	subs	r2, r2, r1
    3f84:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    3f88:	459c      	cmp	ip, r3
    3f8a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    3f8e:	d0e7      	beq.n	3f60 <z_add_timeout+0x64>
    3f90:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    3f92:	2b00      	cmp	r3, #0
    3f94:	d0e4      	beq.n	3f60 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    3f96:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    3f9a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    3f9e:	428a      	cmp	r2, r1
    3fa0:	eb75 0e07 	sbcs.w	lr, r5, r7
    3fa4:	daed      	bge.n	3f82 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    3fa6:	1a8a      	subs	r2, r1, r2
    3fa8:	eb67 0505 	sbc.w	r5, r7, r5
    3fac:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    3fb0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3fb2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3fb6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3fb8:	605c      	str	r4, [r3, #4]
	return list->head == list;
    3fba:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fbc:	4283      	cmp	r3, r0
    3fbe:	d00b      	beq.n	3fd8 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3fc0:	429c      	cmp	r4, r3
    3fc2:	d109      	bne.n	3fd8 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3fc4:	f7ff ff58 	bl	3e78 <next_timeout>

			if (next_time == 0 ||
    3fc8:	b118      	cbz	r0, 3fd2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    3fca:	4b08      	ldr	r3, [pc, #32]	; (3fec <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    3fcc:	691b      	ldr	r3, [r3, #16]
    3fce:	4283      	cmp	r3, r0
    3fd0:	d002      	beq.n	3fd8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    3fd2:	2100      	movs	r1, #0
    3fd4:	f7fe fa46 	bl	2464 <sys_clock_set_timeout>
	__asm__ volatile(
    3fd8:	f386 8811 	msr	BASEPRI, r6
    3fdc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fe2:	bf00      	nop
    3fe4:	200002f0 	.word	0x200002f0
    3fe8:	200000ac 	.word	0x200000ac
    3fec:	200005c0 	.word	0x200005c0

00003ff0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ff4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3ff6:	f7ff fccf 	bl	3998 <z_time_slice>
	__asm__ volatile(
    3ffa:	f04f 0320 	mov.w	r3, #32
    3ffe:	f3ef 8411 	mrs	r4, BASEPRI
    4002:	f383 8812 	msr	BASEPRI_MAX, r3
    4006:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    400a:	4e24      	ldr	r6, [pc, #144]	; (409c <sys_clock_announce+0xac>)
	return list->head == list;
    400c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 40a0 <sys_clock_announce+0xb0>
    4010:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4012:	4d24      	ldr	r5, [pc, #144]	; (40a4 <sys_clock_announce+0xb4>)
    4014:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4018:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    401a:	4540      	cmp	r0, r8
		curr_tick += dt;
    401c:	e9d5 1e00 	ldrd	r1, lr, [r5]
    4020:	ea4f 77e2 	mov.w	r7, r2, asr #31
    4024:	d00b      	beq.n	403e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4026:	b150      	cbz	r0, 403e <sys_clock_announce+0x4e>
    4028:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    402c:	429a      	cmp	r2, r3
    402e:	eb77 090c 	sbcs.w	r9, r7, ip
    4032:	da16      	bge.n	4062 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4034:	1a9b      	subs	r3, r3, r2
    4036:	eb6c 0c07 	sbc.w	ip, ip, r7
    403a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    403e:	1852      	adds	r2, r2, r1
    4040:	eb4e 0707 	adc.w	r7, lr, r7
    4044:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    4048:	2500      	movs	r5, #0
    404a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    404c:	f7ff ff14 	bl	3e78 <next_timeout>
    4050:	4629      	mov	r1, r5
    4052:	f7fe fa07 	bl	2464 <sys_clock_set_timeout>
	__asm__ volatile(
    4056:	f384 8811 	msr	BASEPRI, r4
    405a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4062:	1859      	adds	r1, r3, r1
    4064:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    4068:	1ad3      	subs	r3, r2, r3
    406a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    406c:	2200      	movs	r2, #0
    406e:	2300      	movs	r3, #0
    4070:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    4074:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    4078:	f7ff ff26 	bl	3ec8 <remove_timeout>
    407c:	f384 8811 	msr	BASEPRI, r4
    4080:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4084:	6883      	ldr	r3, [r0, #8]
    4086:	4798      	blx	r3
	__asm__ volatile(
    4088:	f04f 0320 	mov.w	r3, #32
    408c:	f3ef 8411 	mrs	r4, BASEPRI
    4090:	f383 8812 	msr	BASEPRI_MAX, r3
    4094:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4098:	e7bc      	b.n	4014 <sys_clock_announce+0x24>
    409a:	bf00      	nop
    409c:	200005fc 	.word	0x200005fc
    40a0:	200000ac 	.word	0x200000ac
    40a4:	200002f0 	.word	0x200002f0

000040a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    40a8:	b510      	push	{r4, lr}
    40aa:	f04f 0320 	mov.w	r3, #32
    40ae:	f3ef 8411 	mrs	r4, BASEPRI
    40b2:	f383 8812 	msr	BASEPRI_MAX, r3
    40b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    40ba:	f7fe fa05 	bl	24c8 <sys_clock_elapsed>
    40be:	4a05      	ldr	r2, [pc, #20]	; (40d4 <sys_clock_tick_get+0x2c>)
    40c0:	e9d2 3100 	ldrd	r3, r1, [r2]
    40c4:	18c0      	adds	r0, r0, r3
    40c6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    40ca:	f384 8811 	msr	BASEPRI, r4
    40ce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    40d2:	bd10      	pop	{r4, pc}
    40d4:	200002f0 	.word	0x200002f0

000040d8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    40d8:	4a02      	ldr	r2, [pc, #8]	; (40e4 <boot_banner+0xc>)
    40da:	4903      	ldr	r1, [pc, #12]	; (40e8 <boot_banner+0x10>)
    40dc:	4803      	ldr	r0, [pc, #12]	; (40ec <boot_banner+0x14>)
    40de:	f000 b842 	b.w	4166 <printk>
    40e2:	bf00      	nop
    40e4:	00005829 	.word	0x00005829
    40e8:	000058ca 	.word	0x000058ca
    40ec:	000058e5 	.word	0x000058e5

000040f0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    40f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    40f2:	4b09      	ldr	r3, [pc, #36]	; (4118 <k_sys_work_q_init+0x28>)
    40f4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    40f6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    40f8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    40fa:	9300      	str	r3, [sp, #0]
    40fc:	4907      	ldr	r1, [pc, #28]	; (411c <k_sys_work_q_init+0x2c>)
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    4100:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    4104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4108:	f44f 6280 	mov.w	r2, #1024	; 0x400
    410c:	f7ff fb16 	bl	373c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    4110:	4620      	mov	r0, r4
    4112:	b004      	add	sp, #16
    4114:	bd10      	pop	{r4, pc}
    4116:	bf00      	nop
    4118:	0000590c 	.word	0x0000590c
    411c:	200017e0 	.word	0x200017e0
    4120:	200002f8 	.word	0x200002f8

00004124 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4124:	4770      	bx	lr

00004126 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4126:	4603      	mov	r3, r0
    4128:	b158      	cbz	r0, 4142 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    412a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    412c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4130:	2a01      	cmp	r2, #1
    4132:	d003      	beq.n	413c <sys_notify_validate+0x16>
    4134:	2a03      	cmp	r2, #3
    4136:	d104      	bne.n	4142 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4138:	6802      	ldr	r2, [r0, #0]
    413a:	b112      	cbz	r2, 4142 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    413c:	2000      	movs	r0, #0
    413e:	6098      	str	r0, [r3, #8]
    4140:	4770      	bx	lr
		return -EINVAL;
    4142:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4146:	4770      	bx	lr

00004148 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4148:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    414a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    414c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4150:	2a03      	cmp	r2, #3
    4152:	f04f 0200 	mov.w	r2, #0
{
    4156:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4158:	bf0c      	ite	eq
    415a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    415c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    415e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4160:	4770      	bx	lr

00004162 <arch_printk_char_out>:
}
    4162:	2000      	movs	r0, #0
    4164:	4770      	bx	lr

00004166 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    4166:	b40f      	push	{r0, r1, r2, r3}
    4168:	b507      	push	{r0, r1, r2, lr}
    416a:	a904      	add	r1, sp, #16
    416c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4170:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    4172:	f7fc f941 	bl	3f8 <vprintk>
	}
	va_end(ap);
}
    4176:	b003      	add	sp, #12
    4178:	f85d eb04 	ldr.w	lr, [sp], #4
    417c:	b004      	add	sp, #16
    417e:	4770      	bx	lr

00004180 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4180:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4182:	f013 0307 	ands.w	r3, r3, #7
    4186:	d105      	bne.n	4194 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4188:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    418a:	2b00      	cmp	r3, #0
    418c:	bf0c      	ite	eq
    418e:	2000      	moveq	r0, #0
    4190:	2003      	movne	r0, #3
    4192:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4194:	2b02      	cmp	r3, #2
    4196:	d105      	bne.n	41a4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4198:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    419a:	2b00      	cmp	r3, #0
    419c:	bf14      	ite	ne
    419e:	2000      	movne	r0, #0
    41a0:	2004      	moveq	r0, #4
    41a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    41a4:	2b01      	cmp	r3, #1
    41a6:	d105      	bne.n	41b4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    41a8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    41aa:	2b00      	cmp	r3, #0
    41ac:	bf0c      	ite	eq
    41ae:	2000      	moveq	r0, #0
    41b0:	2005      	movne	r0, #5
    41b2:	4770      	bx	lr
	int evt = EVT_NOP;
    41b4:	2000      	movs	r0, #0
}
    41b6:	4770      	bx	lr

000041b8 <notify_one>:
{
    41b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41bc:	460d      	mov	r5, r1
    41be:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    41c0:	4619      	mov	r1, r3
    41c2:	1d28      	adds	r0, r5, #4
{
    41c4:	4690      	mov	r8, r2
    41c6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    41c8:	f7ff ffbe 	bl	4148 <sys_notify_finalize>
	if (cb) {
    41cc:	4604      	mov	r4, r0
    41ce:	b138      	cbz	r0, 41e0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    41d0:	4633      	mov	r3, r6
    41d2:	4642      	mov	r2, r8
    41d4:	4629      	mov	r1, r5
    41d6:	4638      	mov	r0, r7
    41d8:	46a4      	mov	ip, r4
}
    41da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    41de:	4760      	bx	ip
}
    41e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000041e4 <transition_complete>:
{
    41e4:	b410      	push	{r4}
	__asm__ volatile(
    41e6:	f04f 0420 	mov.w	r4, #32
    41ea:	f3ef 8211 	mrs	r2, BASEPRI
    41ee:	f384 8812 	msr	BASEPRI_MAX, r4
    41f2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    41f6:	6141      	str	r1, [r0, #20]
}
    41f8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    41fa:	2101      	movs	r1, #1
    41fc:	f7fc b90a 	b.w	414 <process_event>

00004200 <validate_args>:
{
    4200:	b510      	push	{r4, lr}
    4202:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4204:	b140      	cbz	r0, 4218 <validate_args+0x18>
    4206:	b139      	cbz	r1, 4218 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4208:	1d08      	adds	r0, r1, #4
    420a:	f7ff ff8c 	bl	4126 <sys_notify_validate>
	if ((rv == 0)
    420e:	b928      	cbnz	r0, 421c <validate_args+0x1c>
	    && ((cli->notify.flags
    4210:	68a3      	ldr	r3, [r4, #8]
    4212:	f033 0303 	bics.w	r3, r3, #3
    4216:	d001      	beq.n	421c <validate_args+0x1c>
		rv = -EINVAL;
    4218:	f06f 0015 	mvn.w	r0, #21
}
    421c:	bd10      	pop	{r4, pc}

0000421e <onoff_manager_init>:
{
    421e:	b538      	push	{r3, r4, r5, lr}
    4220:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4222:	4605      	mov	r5, r0
    4224:	b158      	cbz	r0, 423e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4226:	b151      	cbz	r1, 423e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4228:	680b      	ldr	r3, [r1, #0]
    422a:	b143      	cbz	r3, 423e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    422c:	684b      	ldr	r3, [r1, #4]
    422e:	b133      	cbz	r3, 423e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4230:	221c      	movs	r2, #28
    4232:	2100      	movs	r1, #0
    4234:	f000 f94e 	bl	44d4 <memset>
    4238:	612c      	str	r4, [r5, #16]
	return 0;
    423a:	2000      	movs	r0, #0
}
    423c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    423e:	f06f 0015 	mvn.w	r0, #21
    4242:	e7fb      	b.n	423c <onoff_manager_init+0x1e>

00004244 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4244:	b570      	push	{r4, r5, r6, lr}
    4246:	4604      	mov	r4, r0
    4248:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    424a:	f7ff ffd9 	bl	4200 <validate_args>

	if (rv < 0) {
    424e:	1e05      	subs	r5, r0, #0
    4250:	db31      	blt.n	42b6 <onoff_request+0x72>
    4252:	f04f 0320 	mov.w	r3, #32
    4256:	f3ef 8111 	mrs	r1, BASEPRI
    425a:	f383 8812 	msr	BASEPRI_MAX, r3
    425e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4262:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4264:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4266:	f64f 75ff 	movw	r5, #65535	; 0xffff
    426a:	42ab      	cmp	r3, r5
    426c:	f000 0207 	and.w	r2, r0, #7
    4270:	d02e      	beq.n	42d0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4272:	2a02      	cmp	r2, #2
    4274:	d10e      	bne.n	4294 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    4276:	3301      	adds	r3, #1
    4278:	8363      	strh	r3, [r4, #26]
	rv = state;
    427a:	4615      	mov	r5, r2
		notify = true;
    427c:	2301      	movs	r3, #1
	__asm__ volatile(
    427e:	f381 8811 	msr	BASEPRI, r1
    4282:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4286:	b1b3      	cbz	r3, 42b6 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    4288:	2300      	movs	r3, #0
    428a:	4631      	mov	r1, r6
    428c:	4620      	mov	r0, r4
    428e:	f7ff ff93 	bl	41b8 <notify_one>
    4292:	e010      	b.n	42b6 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4294:	0783      	lsls	r3, r0, #30
    4296:	d001      	beq.n	429c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4298:	2a06      	cmp	r2, #6
    429a:	d10e      	bne.n	42ba <onoff_request+0x76>
	parent->next = child;
    429c:	2300      	movs	r3, #0
    429e:	6033      	str	r3, [r6, #0]
	return list->tail;
    42a0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    42a2:	b993      	cbnz	r3, 42ca <onoff_request+0x86>
	list->head = node;
    42a4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    42a8:	4615      	mov	r5, r2
    42aa:	b962      	cbnz	r2, 42c6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    42ac:	460a      	mov	r2, r1
    42ae:	4620      	mov	r0, r4
    42b0:	2102      	movs	r1, #2
    42b2:	f7fc f8af 	bl	414 <process_event>
		}
	}

	return rv;
}
    42b6:	4628      	mov	r0, r5
    42b8:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    42ba:	2a05      	cmp	r2, #5
    42bc:	bf0c      	ite	eq
    42be:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    42c2:	f06f 0504 	mvnne.w	r5, #4
    42c6:	2300      	movs	r3, #0
    42c8:	e7d9      	b.n	427e <onoff_request+0x3a>
	parent->next = child;
    42ca:	601e      	str	r6, [r3, #0]
	list->tail = node;
    42cc:	6066      	str	r6, [r4, #4]
}
    42ce:	e7eb      	b.n	42a8 <onoff_request+0x64>
		rv = -EAGAIN;
    42d0:	f06f 050a 	mvn.w	r5, #10
    42d4:	e7f7      	b.n	42c6 <onoff_request+0x82>

000042d6 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    42d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    42d8:	f04f 0320 	mov.w	r3, #32
    42dc:	f3ef 8211 	mrs	r2, BASEPRI
    42e0:	f383 8812 	msr	BASEPRI_MAX, r3
    42e4:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    42e8:	8b04      	ldrh	r4, [r0, #24]
    42ea:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    42ee:	2c02      	cmp	r4, #2
    42f0:	d00a      	beq.n	4308 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    42f2:	2c01      	cmp	r4, #1
    42f4:	bf0c      	ite	eq
    42f6:	f06f 0004 	mvneq.w	r0, #4
    42fa:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    42fe:	f382 8811 	msr	BASEPRI, r2
    4302:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    4306:	e008      	b.n	431a <onoff_release+0x44>
	mgr->refs -= 1U;
    4308:	8b43      	ldrh	r3, [r0, #26]
    430a:	3b01      	subs	r3, #1
    430c:	b29b      	uxth	r3, r3
    430e:	8343      	strh	r3, [r0, #26]
	if (stop) {
    4310:	b923      	cbnz	r3, 431c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    4312:	4621      	mov	r1, r4
    4314:	f7fc f87e 	bl	414 <process_event>
	int rv = state;
    4318:	4620      	mov	r0, r4
}
    431a:	bd10      	pop	{r4, pc}
	int rv = state;
    431c:	4620      	mov	r0, r4
    431e:	e7ee      	b.n	42fe <onoff_release+0x28>

00004320 <onoff_sync_lock>:
	__asm__ volatile(
    4320:	f04f 0220 	mov.w	r2, #32
    4324:	f3ef 8311 	mrs	r3, BASEPRI
    4328:	f382 8812 	msr	BASEPRI_MAX, r2
    432c:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    4330:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    4332:	600b      	str	r3, [r1, #0]
}
    4334:	4770      	bx	lr

00004336 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    4336:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    4338:	6804      	ldr	r4, [r0, #0]
    433a:	2c00      	cmp	r4, #0
		srv->count = 0;
    433c:	bfbc      	itt	lt
    433e:	2400      	movlt	r4, #0
    4340:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    4342:	2b00      	cmp	r3, #0
{
    4344:	460d      	mov	r5, r1
    4346:	4611      	mov	r1, r2
    4348:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    434c:	da0c      	bge.n	4368 <onoff_sync_finalize+0x32>
		srv->count = res;
    434e:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
    4350:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    4352:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    4354:	f385 8811 	msr	BASEPRI, r5
    4358:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    435c:	b111      	cbz	r1, 4364 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    435e:	2000      	movs	r0, #0
    4360:	f7ff ff2a 	bl	41b8 <notify_one>
	}

	return rv;
}
    4364:	4620      	mov	r0, r4
    4366:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    4368:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    436a:	b11a      	cbz	r2, 4374 <onoff_sync_finalize+0x3e>
		srv->count += 1;
    436c:	3401      	adds	r4, #1
		srv->count -= 1;
    436e:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    4370:	2202      	movs	r2, #2
    4372:	e7ee      	b.n	4352 <onoff_sync_finalize+0x1c>
		srv->count -= 1;
    4374:	3c01      	subs	r4, #1
    4376:	e7fa      	b.n	436e <onoff_sync_finalize+0x38>

00004378 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4378:	4604      	mov	r4, r0
    437a:	b508      	push	{r3, lr}
    437c:	4608      	mov	r0, r1
    437e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4380:	461a      	mov	r2, r3
    4382:	47a0      	blx	r4
	return z_impl_z_current_get();
    4384:	f7ff fcea 	bl	3d5c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4388:	f7fc ffd6 	bl	1338 <z_impl_k_thread_abort>

0000438c <encode_uint>:
{
    438c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4390:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4392:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4394:	2b6f      	cmp	r3, #111	; 0x6f
{
    4396:	4680      	mov	r8, r0
    4398:	460f      	mov	r7, r1
    439a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    439c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    43a0:	d029      	beq.n	43f6 <encode_uint+0x6a>
    43a2:	d824      	bhi.n	43ee <encode_uint+0x62>
		return 16;
    43a4:	2b58      	cmp	r3, #88	; 0x58
    43a6:	bf14      	ite	ne
    43a8:	260a      	movne	r6, #10
    43aa:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    43ac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    43b0:	4632      	mov	r2, r6
    43b2:	2300      	movs	r3, #0
    43b4:	4640      	mov	r0, r8
    43b6:	4639      	mov	r1, r7
    43b8:	f7fb fe90 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    43bc:	2a09      	cmp	r2, #9
    43be:	b2d4      	uxtb	r4, r2
    43c0:	d81e      	bhi.n	4400 <encode_uint+0x74>
    43c2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    43c4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    43c6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    43c8:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    43cc:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    43d0:	d301      	bcc.n	43d6 <encode_uint+0x4a>
    43d2:	45d1      	cmp	r9, sl
    43d4:	d811      	bhi.n	43fa <encode_uint+0x6e>
	if (conv->flag_hash) {
    43d6:	782b      	ldrb	r3, [r5, #0]
    43d8:	069b      	lsls	r3, r3, #26
    43da:	d505      	bpl.n	43e8 <encode_uint+0x5c>
		if (radix == 8) {
    43dc:	2e08      	cmp	r6, #8
    43de:	d115      	bne.n	440c <encode_uint+0x80>
			conv->altform_0 = true;
    43e0:	78ab      	ldrb	r3, [r5, #2]
    43e2:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    43e6:	70ab      	strb	r3, [r5, #2]
}
    43e8:	4648      	mov	r0, r9
    43ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    43ee:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    43f2:	2b70      	cmp	r3, #112	; 0x70
    43f4:	e7d7      	b.n	43a6 <encode_uint+0x1a>
	switch (specifier) {
    43f6:	2608      	movs	r6, #8
    43f8:	e7d8      	b.n	43ac <encode_uint+0x20>
		value /= radix;
    43fa:	4680      	mov	r8, r0
    43fc:	460f      	mov	r7, r1
    43fe:	e7d7      	b.n	43b0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4400:	f1bb 0f19 	cmp.w	fp, #25
    4404:	bf94      	ite	ls
    4406:	3437      	addls	r4, #55	; 0x37
    4408:	3457      	addhi	r4, #87	; 0x57
    440a:	e7db      	b.n	43c4 <encode_uint+0x38>
		} else if (radix == 16) {
    440c:	2e10      	cmp	r6, #16
    440e:	d1eb      	bne.n	43e8 <encode_uint+0x5c>
			conv->altform_0c = true;
    4410:	78ab      	ldrb	r3, [r5, #2]
    4412:	f043 0310 	orr.w	r3, r3, #16
    4416:	e7e6      	b.n	43e6 <encode_uint+0x5a>

00004418 <outs>:
{
    4418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    441c:	4607      	mov	r7, r0
    441e:	4688      	mov	r8, r1
    4420:	4615      	mov	r5, r2
    4422:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4424:	4614      	mov	r4, r2
    4426:	42b4      	cmp	r4, r6
    4428:	eba4 0005 	sub.w	r0, r4, r5
    442c:	d302      	bcc.n	4434 <outs+0x1c>
    442e:	b93e      	cbnz	r6, 4440 <outs+0x28>
    4430:	7823      	ldrb	r3, [r4, #0]
    4432:	b12b      	cbz	r3, 4440 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    4434:	f814 0b01 	ldrb.w	r0, [r4], #1
    4438:	4641      	mov	r1, r8
    443a:	47b8      	blx	r7
		if (rc < 0) {
    443c:	2800      	cmp	r0, #0
    443e:	daf2      	bge.n	4426 <outs+0xe>
}
    4440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004444 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4444:	4770      	bx	lr

00004446 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    4446:	2200      	movs	r2, #0
    4448:	e9c0 2200 	strd	r2, r2, [r0]
    444c:	6082      	str	r2, [r0, #8]
}
    444e:	4770      	bx	lr

00004450 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4450:	f000 bd98 	b.w	4f84 <z_fatal_error>

00004454 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4454:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4456:	6800      	ldr	r0, [r0, #0]
    4458:	f000 bd94 	b.w	4f84 <z_fatal_error>

0000445c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    445c:	2100      	movs	r1, #0
    445e:	2001      	movs	r0, #1
    4460:	f7ff bff6 	b.w	4450 <z_arm_fatal_error>

00004464 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4464:	b508      	push	{r3, lr}
	handler();
    4466:	f7fc fd57 	bl	f18 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    446a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    446e:	f7fc be37 	b.w	10e0 <z_arm_exc_exit>

00004472 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4472:	3901      	subs	r1, #1
    4474:	4603      	mov	r3, r0
    4476:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    447a:	b90a      	cbnz	r2, 4480 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    447c:	701a      	strb	r2, [r3, #0]

	return dest;
}
    447e:	4770      	bx	lr
		*d = *s;
    4480:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4484:	e7f7      	b.n	4476 <strcpy+0x4>

00004486 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4486:	4603      	mov	r3, r0
	size_t n = 0;
    4488:	2000      	movs	r0, #0

	while (*s != '\0') {
    448a:	5c1a      	ldrb	r2, [r3, r0]
    448c:	b902      	cbnz	r2, 4490 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    448e:	4770      	bx	lr
		n++;
    4490:	3001      	adds	r0, #1
    4492:	e7fa      	b.n	448a <strlen+0x4>

00004494 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4494:	4603      	mov	r3, r0
	size_t n = 0;
    4496:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4498:	5c1a      	ldrb	r2, [r3, r0]
    449a:	b10a      	cbz	r2, 44a0 <strnlen+0xc>
    449c:	4288      	cmp	r0, r1
    449e:	d100      	bne.n	44a2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    44a0:	4770      	bx	lr
		n++;
    44a2:	3001      	adds	r0, #1
    44a4:	e7f8      	b.n	4498 <strnlen+0x4>

000044a6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    44a6:	1e43      	subs	r3, r0, #1
    44a8:	3901      	subs	r1, #1
    44aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    44ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    44b2:	4282      	cmp	r2, r0
    44b4:	d101      	bne.n	44ba <strcmp+0x14>
    44b6:	2a00      	cmp	r2, #0
    44b8:	d1f7      	bne.n	44aa <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    44ba:	1a10      	subs	r0, r2, r0
    44bc:	4770      	bx	lr

000044be <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    44be:	b510      	push	{r4, lr}
    44c0:	1e43      	subs	r3, r0, #1
    44c2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    44c4:	4291      	cmp	r1, r2
    44c6:	d100      	bne.n	44ca <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    44c8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    44ca:	f811 4b01 	ldrb.w	r4, [r1], #1
    44ce:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    44d2:	e7f7      	b.n	44c4 <memcpy+0x6>

000044d4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    44d4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    44d6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    44d8:	4603      	mov	r3, r0
	while (n > 0) {
    44da:	4293      	cmp	r3, r2
    44dc:	d100      	bne.n	44e0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    44de:	4770      	bx	lr
		*(d_byte++) = c_byte;
    44e0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    44e4:	e7f9      	b.n	44da <memset+0x6>

000044e6 <_stdout_hook_default>:
}
    44e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44ea:	4770      	bx	lr

000044ec <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    44ec:	b084      	sub	sp, #16
    44ee:	ab04      	add	r3, sp, #16
    44f0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    44f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    44f8:	2b06      	cmp	r3, #6
    44fa:	d108      	bne.n	450e <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    44fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4500:	2201      	movs	r2, #1
    4502:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4506:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    450a:	bf20      	wfe
    while (true)
    450c:	e7fd      	b.n	450a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    450e:	b004      	add	sp, #16
    4510:	4770      	bx	lr

00004512 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    4512:	b084      	sub	sp, #16
    4514:	ab04      	add	r3, sp, #16
    4516:	e903 0007 	stmdb	r3, {r0, r1, r2}
    451a:	2300      	movs	r3, #0
    451c:	f383 8811 	msr	BASEPRI, r3
    4520:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4524:	b004      	add	sp, #16
    4526:	4770      	bx	lr

00004528 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4528:	6903      	ldr	r3, [r0, #16]
    452a:	b2c9      	uxtb	r1, r1
    452c:	220c      	movs	r2, #12
    452e:	fb01 3302 	mla	r3, r1, r2, r3
    4532:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4534:	f000 0007 	and.w	r0, r0, #7
    4538:	4770      	bx	lr

0000453a <set_on_state>:
	__asm__ volatile(
    453a:	f04f 0320 	mov.w	r3, #32
    453e:	f3ef 8211 	mrs	r2, BASEPRI
    4542:	f383 8812 	msr	BASEPRI_MAX, r3
    4546:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    454a:	6803      	ldr	r3, [r0, #0]
    454c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4550:	f043 0302 	orr.w	r3, r3, #2
    4554:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4556:	f382 8811 	msr	BASEPRI, r2
    455a:	f3bf 8f6f 	isb	sy
}
    455e:	4770      	bx	lr

00004560 <stop>:
{
    4560:	4603      	mov	r3, r0
    4562:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    4564:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    4566:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4568:	f04f 0420 	mov.w	r4, #32
    456c:	f3ef 8611 	mrs	r6, BASEPRI
    4570:	f384 8812 	msr	BASEPRI_MAX, r4
    4574:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4578:	250c      	movs	r5, #12
    457a:	fb05 0401 	mla	r4, r5, r1, r0
    457e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4580:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4584:	d001      	beq.n	458a <stop+0x2a>
    4586:	42a2      	cmp	r2, r4
    4588:	d110      	bne.n	45ac <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    458a:	fb05 0001 	mla	r0, r5, r1, r0
    458e:	2201      	movs	r2, #1
    4590:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    4592:	2000      	movs	r0, #0
	__asm__ volatile(
    4594:	f386 8811 	msr	BASEPRI, r6
    4598:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    459c:	b928      	cbnz	r0, 45aa <stop+0x4a>
	get_sub_config(dev, type)->stop();
    459e:	685b      	ldr	r3, [r3, #4]
    45a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    45a4:	684b      	ldr	r3, [r1, #4]
    45a6:	4798      	blx	r3
	return 0;
    45a8:	2000      	movs	r0, #0
}
    45aa:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    45ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    45b0:	e7f0      	b.n	4594 <stop+0x34>

000045b2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    45b2:	2280      	movs	r2, #128	; 0x80
    45b4:	f7ff bfd4 	b.w	4560 <stop>

000045b8 <async_start>:
{
    45b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ba:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    45bc:	6904      	ldr	r4, [r0, #16]
{
    45be:	4605      	mov	r5, r0
    45c0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    45c2:	f04f 0020 	mov.w	r0, #32
    45c6:	f3ef 8c11 	mrs	ip, BASEPRI
    45ca:	f380 8812 	msr	BASEPRI_MAX, r0
    45ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    45d2:	260c      	movs	r6, #12
    45d4:	fb06 4601 	mla	r6, r6, r1, r4
    45d8:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    45da:	f000 0e07 	and.w	lr, r0, #7
    45de:	f1be 0f01 	cmp.w	lr, #1
    45e2:	d111      	bne.n	4608 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    45e4:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    45e6:	2600      	movs	r6, #0
	__asm__ volatile(
    45e8:	f38c 8811 	msr	BASEPRI, ip
    45ec:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    45f0:	b946      	cbnz	r6, 4604 <async_start+0x4c>
	subdata->cb = cb;
    45f2:	200c      	movs	r0, #12
    45f4:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    45f8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    45fc:	686b      	ldr	r3, [r5, #4]
    45fe:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4602:	4798      	blx	r3
}
    4604:	4630      	mov	r0, r6
    4606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4608:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    460c:	4287      	cmp	r7, r0
    460e:	bf14      	ite	ne
    4610:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    4614:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    4618:	e7e6      	b.n	45e8 <async_start+0x30>

0000461a <api_start>:
{
    461a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    461c:	2480      	movs	r4, #128	; 0x80
    461e:	9400      	str	r4, [sp, #0]
    4620:	f7ff ffca 	bl	45b8 <async_start>
}
    4624:	b002      	add	sp, #8
    4626:	bd10      	pop	{r4, pc}

00004628 <onoff_started_callback>:
	return &data->mgr[type];
    4628:	6900      	ldr	r0, [r0, #16]
{
    462a:	b410      	push	{r4}
	return &data->mgr[type];
    462c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    462e:	241c      	movs	r4, #28
    4630:	fb03 0004 	mla	r0, r3, r4, r0
    4634:	2100      	movs	r1, #0
}
    4636:	bc10      	pop	{r4}
	notify(mgr, 0);
    4638:	4710      	bx	r2

0000463a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    463a:	2000      	movs	r0, #0
    463c:	f7fe b90a 	b.w	2854 <nrfx_clock_stop>

00004640 <blocking_start_callback>:
{
    4640:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    4642:	f7fe bf4d 	b.w	34e0 <z_impl_k_sem_give>

00004646 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4646:	f000 001f 	and.w	r0, r0, #31
    464a:	0080      	lsls	r0, r0, #2
    464c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4650:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    4654:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4658:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    465c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4660:	4770      	bx	lr

00004662 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4662:	6843      	ldr	r3, [r0, #4]
    4664:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4666:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    466a:	600b      	str	r3, [r1, #0]
}
    466c:	2000      	movs	r0, #0
    466e:	4770      	bx	lr

00004670 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4670:	6843      	ldr	r3, [r0, #4]
    4672:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    4674:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    4678:	4042      	eors	r2, r0
    467a:	400a      	ands	r2, r1
    467c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    467e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    4682:	2000      	movs	r0, #0
    4684:	4770      	bx	lr

00004686 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4686:	6843      	ldr	r3, [r0, #4]
    4688:	685b      	ldr	r3, [r3, #4]
}
    468a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    468c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4690:	4770      	bx	lr

00004692 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4692:	6843      	ldr	r3, [r0, #4]
    4694:	685b      	ldr	r3, [r3, #4]
}
    4696:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4698:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    469c:	4770      	bx	lr

0000469e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    469e:	6843      	ldr	r3, [r0, #4]
    46a0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    46a2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    46a6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    46a8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    46ac:	2000      	movs	r0, #0
    46ae:	4770      	bx	lr

000046b0 <gpio_nrfx_manage_callback>:
	return port->data;
    46b0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    46b2:	6858      	ldr	r0, [r3, #4]
{
    46b4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    46b6:	b158      	cbz	r0, 46d0 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    46b8:	2400      	movs	r4, #0
    46ba:	4281      	cmp	r1, r0
    46bc:	d112      	bne.n	46e4 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    46be:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    46c0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    46c2:	b954      	cbnz	r4, 46da <gpio_nrfx_manage_callback+0x2a>
    46c4:	428d      	cmp	r5, r1
	list->head = node;
    46c6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    46c8:	d100      	bne.n	46cc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    46ca:	6098      	str	r0, [r3, #8]
	parent->next = child;
    46cc:	2000      	movs	r0, #0
    46ce:	6008      	str	r0, [r1, #0]
	if (set) {
    46d0:	b96a      	cbnz	r2, 46ee <gpio_nrfx_manage_callback+0x3e>
	return 0;
    46d2:	2000      	movs	r0, #0
}
    46d4:	bd30      	pop	{r4, r5, pc}
    46d6:	4628      	mov	r0, r5
    46d8:	e7ef      	b.n	46ba <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    46da:	428d      	cmp	r5, r1
	parent->next = child;
    46dc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    46de:	bf08      	it	eq
    46e0:	609c      	streq	r4, [r3, #8]
}
    46e2:	e7f3      	b.n	46cc <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    46e4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    46e6:	4604      	mov	r4, r0
    46e8:	2d00      	cmp	r5, #0
    46ea:	d1f4      	bne.n	46d6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    46ec:	b13a      	cbz	r2, 46fe <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    46ee:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    46f0:	685a      	ldr	r2, [r3, #4]
    46f2:	600a      	str	r2, [r1, #0]
	list->head = node;
    46f4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    46f6:	2800      	cmp	r0, #0
    46f8:	d1eb      	bne.n	46d2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    46fa:	6099      	str	r1, [r3, #8]
}
    46fc:	e7ea      	b.n	46d4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    46fe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4702:	e7e7      	b.n	46d4 <gpio_nrfx_manage_callback+0x24>

00004704 <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
    4704:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
    4708:	bf14      	ite	ne
    470a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
    470e:	2000      	moveq	r0, #0
    4710:	4770      	bx	lr

00004712 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    4712:	f7fe bf05 	b.w	3520 <z_impl_k_sem_take>

00004716 <i2c_write>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
    4716:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
    4718:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    471c:	2202      	movs	r2, #2
    471e:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    4722:	6882      	ldr	r2, [r0, #8]
    4724:	a901      	add	r1, sp, #4
    4726:	6894      	ldr	r4, [r2, #8]
    4728:	2201      	movs	r2, #1
    472a:	47a0      	blx	r4

	return i2c_transfer(dev, &msg, 1, addr);
}
    472c:	b004      	add	sp, #16
    472e:	bd10      	pop	{r4, pc}

00004730 <i2c_reg_write_word_be>:
{
    4730:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    4732:	f88d 2004 	strb.w	r2, [sp, #4]
    4736:	0a1a      	lsrs	r2, r3, #8
    4738:	f88d 2005 	strb.w	r2, [sp, #5]
    473c:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
    4740:	2203      	movs	r2, #3
    4742:	460b      	mov	r3, r1
    4744:	a901      	add	r1, sp, #4
    4746:	f7ff ffe6 	bl	4716 <i2c_write>
}
    474a:	b003      	add	sp, #12
    474c:	f85d fb04 	ldr.w	pc, [sp], #4

00004750 <port_write>:
{
    4750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4754:	4606      	mov	r6, r0
    4756:	460c      	mov	r4, r1
    4758:	4615      	mov	r5, r2
    475a:	4699      	mov	r9, r3
	if (k_is_in_isr()) {
    475c:	f000 fc2d 	bl	4fba <k_is_in_isr>
    4760:	bb10      	cbnz	r0, 47a8 <port_write+0x58>
	const struct sx1509b_config *cfg = dev->config;
    4762:	f8d6 8004 	ldr.w	r8, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    4766:	6936      	ldr	r6, [r6, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
    4768:	f106 0720 	add.w	r7, r6, #32
    476c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4774:	4638      	mov	r0, r7
    4776:	f7ff ffcc 	bl	4712 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
    477a:	8b32      	ldrh	r2, [r6, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    477c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    4780:	6870      	ldr	r0, [r6, #4]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
    4782:	4055      	eors	r5, r2
    4784:	402c      	ands	r4, r5
    4786:	ea82 0209 	eor.w	r2, r2, r9
    478a:	4054      	eors	r4, r2
    478c:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    478e:	4623      	mov	r3, r4
    4790:	2210      	movs	r2, #16
    4792:	f7ff ffcd 	bl	4730 <i2c_reg_write_word_be>
	if (rc == 0) {
    4796:	4605      	mov	r5, r0
    4798:	b900      	cbnz	r0, 479c <port_write+0x4c>
		*outp = out;
    479a:	8334      	strh	r4, [r6, #24]
	z_impl_k_sem_give(sem);
    479c:	4638      	mov	r0, r7
    479e:	f7fe fe9f 	bl	34e0 <z_impl_k_sem_give>
}
    47a2:	4628      	mov	r0, r5
    47a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
    47a8:	f06f 050a 	mvn.w	r5, #10
    47ac:	e7f9      	b.n	47a2 <port_write+0x52>

000047ae <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
    47ae:	2200      	movs	r2, #0
{
    47b0:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
    47b2:	4611      	mov	r1, r2
    47b4:	f7ff bfcc 	b.w	4750 <port_write>

000047b8 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
    47b8:	2300      	movs	r3, #0
    47ba:	461a      	mov	r2, r3
    47bc:	f7ff bfc8 	b.w	4750 <port_write>

000047c0 <port_set_bits>:
{
    47c0:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
    47c2:	2300      	movs	r3, #0
    47c4:	f7ff bfc4 	b.w	4750 <port_write>

000047c8 <port_set_masked>:
	return port_write(dev, mask, value, 0);
    47c8:	2300      	movs	r3, #0
    47ca:	f7ff bfc1 	b.w	4750 <port_write>

000047ce <write_pin_state>:
{
    47ce:	b530      	push	{r4, r5, lr}
    47d0:	b087      	sub	sp, #28
    47d2:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
    47d4:	2100      	movs	r1, #0
    47d6:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
    47da:	8811      	ldrh	r1, [r2, #0]
    47dc:	ba49      	rev16	r1, r1
    47de:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
    47e2:	8851      	ldrh	r1, [r2, #2]
    47e4:	ba49      	rev16	r1, r1
    47e6:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
    47ea:	8891      	ldrh	r1, [r2, #4]
    47ec:	ba49      	rev16	r1, r1
    47ee:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
    47f2:	88d1      	ldrh	r1, [r2, #6]
    47f4:	ba49      	rev16	r1, r1
    47f6:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
    47fa:	8911      	ldrh	r1, [r2, #8]
    47fc:	ba49      	rev16	r1, r1
    47fe:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
    4802:	8951      	ldrh	r1, [r2, #10]
    4804:	ba49      	rev16	r1, r1
    4806:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
    480a:	8991      	ldrh	r1, [r2, #12]
    480c:	ba49      	rev16	r1, r1
    480e:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    4812:	89d1      	ldrh	r1, [r2, #14]
    4814:	8a12      	ldrh	r2, [r2, #16]
{
    4816:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    4818:	ba49      	rev16	r1, r1
    481a:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
    481e:	ba51      	rev16	r1, r2
    4820:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    4824:	6860      	ldr	r0, [r4, #4]
    4826:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
    4828:	b163      	cbz	r3, 4844 <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    482a:	4613      	mov	r3, r2
    482c:	2210      	movs	r2, #16
    482e:	f7ff ff7f 	bl	4730 <i2c_reg_write_word_be>
		if (rc == 0) {
    4832:	b928      	cbnz	r0, 4840 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    4834:	892b      	ldrh	r3, [r5, #8]
    4836:	6860      	ldr	r0, [r4, #4]
    4838:	2211      	movs	r2, #17
    483a:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    483c:	f7ff ff6b 	bl	4716 <i2c_write>
}
    4840:	b007      	add	sp, #28
    4842:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    4844:	460b      	mov	r3, r1
    4846:	2213      	movs	r2, #19
    4848:	a901      	add	r1, sp, #4
    484a:	e7f7      	b.n	483c <write_pin_state+0x6e>

0000484c <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
    484c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
    4850:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    4852:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
    4854:	6870      	ldr	r0, [r6, #4]
    4856:	f7fe fc87 	bl	3168 <z_impl_device_get_binding>
    485a:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
    485c:	2800      	cmp	r0, #0
    485e:	d061      	beq.n	4924 <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    4860:	8933      	ldrh	r3, [r6, #8]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    4862:	f04f 087d 	mov.w	r8, #125	; 0x7d
    4866:	2712      	movs	r7, #18

	return i2c_write(dev, tx_buf, 2, dev_addr);
    4868:	2202      	movs	r2, #2
    486a:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
    486c:	f88d 8004 	strb.w	r8, [sp, #4]
    4870:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    4874:	f7ff ff4f 	bl	4716 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
    4878:	4604      	mov	r4, r0
    487a:	2800      	cmp	r0, #0
    487c:	d14a      	bne.n	4914 <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
    487e:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    4880:	6868      	ldr	r0, [r5, #4]
    4882:	8933      	ldrh	r3, [r6, #8]
    4884:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    4888:	a901      	add	r1, sp, #4
    488a:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    488c:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    4890:	f7ff ff41 	bl	4716 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
    4894:	4604      	mov	r4, r0
    4896:	2800      	cmp	r0, #0
    4898:	d13c      	bne.n	4914 <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
    489a:	2100      	movs	r1, #0
    489c:	2063      	movs	r0, #99	; 0x63
    489e:	f7ff fa43 	bl	3d28 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
    48a2:	463a      	mov	r2, r7
    48a4:	4621      	mov	r1, r4
    48a6:	f105 0008 	add.w	r0, r5, #8
    48aa:	f7ff fe13 	bl	44d4 <memset>
    48ae:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
    48b2:	221e      	movs	r2, #30
    48b4:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    48b6:	83ac      	strh	r4, [r5, #28]
    48b8:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    48ba:	6868      	ldr	r0, [r5, #4]
    48bc:	8933      	ldrh	r3, [r6, #8]
    48be:	f88d 2004 	strb.w	r2, [sp, #4]
    48c2:	2240      	movs	r2, #64	; 0x40
    48c4:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    48c8:	a901      	add	r1, sp, #4
    48ca:	2202      	movs	r2, #2
    48cc:	f7ff ff23 	bl	4716 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    48d0:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
    48d2:	4604      	mov	r4, r0
    48d4:	b9f0      	cbnz	r0, 4914 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    48d6:	8b2b      	ldrh	r3, [r5, #24]
    48d8:	8931      	ldrh	r1, [r6, #8]
    48da:	6868      	ldr	r0, [r5, #4]
    48dc:	2210      	movs	r2, #16
    48de:	f7ff ff27 	bl	4730 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
    48e2:	4604      	mov	r4, r0
    48e4:	b9b0      	cbnz	r0, 4914 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    48e6:	8aeb      	ldrh	r3, [r5, #22]
    48e8:	8931      	ldrh	r1, [r6, #8]
    48ea:	6868      	ldr	r0, [r5, #4]
    48ec:	220e      	movs	r2, #14
    48ee:	f7ff ff1f 	bl	4730 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
    48f2:	4604      	mov	r4, r0
    48f4:	b970      	cbnz	r0, 4914 <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
    48f6:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
    48f8:	6868      	ldr	r0, [r5, #4]
    48fa:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
    48fc:	f88d 2004 	strb.w	r2, [sp, #4]
    4900:	2298      	movs	r2, #152	; 0x98
    4902:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    4906:	a901      	add	r1, sp, #4
    4908:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
    490a:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    490e:	f7ff ff02 	bl	4716 <i2c_write>
    4912:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    4914:	f105 0020 	add.w	r0, r5, #32
    4918:	f7fe fde2 	bl	34e0 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
    491c:	4620      	mov	r0, r4
    491e:	b002      	add	sp, #8
    4920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
    4924:	f06f 0415 	mvn.w	r4, #21
    4928:	e7f4      	b.n	4914 <sx1509b_init+0xc8>

0000492a <sx1509b_config>:
{
    492a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
    492e:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    4932:	6904      	ldr	r4, [r0, #16]
{
    4934:	460d      	mov	r5, r1
    4936:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
    4938:	f000 fb3f 	bl	4fba <k_is_in_isr>
    493c:	4683      	mov	fp, r0
    493e:	2800      	cmp	r0, #0
    4940:	f040 808c 	bne.w	4a5c <sx1509b_config+0x132>
	if ((flags & (GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH)) != 0) {
    4944:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
    4948:	f040 808b 	bne.w	4a62 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
    494c:	f104 0920 	add.w	r9, r4, #32
    4950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4958:	4648      	mov	r0, r9
    495a:	f7ff feda 	bl	4712 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
    495e:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
    4960:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
    4962:	40ae      	lsls	r6, r5
    4964:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    4966:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
    496a:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    496e:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
    4970:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
    4974:	d44f      	bmi.n	4a16 <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
    4976:	8a63      	ldrh	r3, [r4, #18]
    4978:	ea03 0208 	and.w	r2, r3, r8
    497c:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    497e:	07ba      	lsls	r2, r7, #30
    4980:	d45c      	bmi.n	4a3c <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
    4982:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
    4984:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
    4986:	bf4c      	ite	mi
    4988:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
    498a:	ea08 0303 	andpl.w	r3, r8, r3
    498e:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
    4990:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
    4992:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
    4994:	bf4c      	ite	mi
    4996:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
    4998:	ea08 0303 	andpl.w	r3, r8, r3
    499c:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
    499e:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
    49a0:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
    49a2:	bf4c      	ite	mi
    49a4:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
    49a8:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
    49aa:	05bd      	lsls	r5, r7, #22
    49ac:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
    49ae:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
    49b0:	d54e      	bpl.n	4a50 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
    49b2:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    49b6:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
    49b8:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    49ba:	d544      	bpl.n	4a46 <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
    49bc:	8b23      	ldrh	r3, [r4, #24]
    49be:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
    49c2:	8323      	strh	r3, [r4, #24]
			data_first = true;
    49c4:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
    49c8:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
    49cc:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
    49ce:	bf4c      	ite	mi
    49d0:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
    49d2:	ea08 0603 	andpl.w	r6, r8, r3
    49d6:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
    49da:	465b      	mov	r3, fp
    49dc:	f104 0208 	add.w	r2, r4, #8
    49e0:	4621      	mov	r1, r4
    49e2:	4650      	mov	r0, sl
    49e4:	f7ff fef3 	bl	47ce <write_pin_state>
	if (rc == 0) {
    49e8:	4605      	mov	r5, r0
    49ea:	bb00      	cbnz	r0, 4a2e <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
    49ec:	2322      	movs	r3, #34	; 0x22
    49ee:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
    49f2:	7f23      	ldrb	r3, [r4, #28]
    49f4:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
    49f8:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
    49fc:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
    49fe:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
    4a00:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
    4a02:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
    4a06:	eb0d 0102 	add.w	r1, sp, r2
    4a0a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
    4a0e:	f7ff fe82 	bl	4716 <i2c_write>
    4a12:	4605      	mov	r5, r0
    4a14:	e00b      	b.n	4a2e <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
    4a16:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    4a1a:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    4a1e:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
    4a20:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    4a22:	2220      	movs	r2, #32
    4a24:	f7ff fe84 	bl	4730 <i2c_reg_write_word_be>
		if (rc) {
    4a28:	4605      	mov	r5, r0
    4a2a:	2800      	cmp	r0, #0
    4a2c:	d0a3      	beq.n	4976 <sx1509b_config+0x4c>
    4a2e:	4648      	mov	r0, r9
    4a30:	f7fe fd56 	bl	34e0 <z_impl_k_sem_give>
}
    4a34:	4628      	mov	r0, r5
    4a36:	b003      	add	sp, #12
    4a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
    4a3c:	077d      	lsls	r5, r7, #29
    4a3e:	d50a      	bpl.n	4a56 <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
    4a40:	4333      	orrs	r3, r6
    4a42:	8263      	strh	r3, [r4, #18]
    4a44:	e79d      	b.n	4982 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4a46:	0539      	lsls	r1, r7, #20
    4a48:	d5be      	bpl.n	49c8 <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
    4a4a:	8b23      	ldrh	r3, [r4, #24]
    4a4c:	4333      	orrs	r3, r6
    4a4e:	e7b8      	b.n	49c2 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
    4a50:	4333      	orrs	r3, r6
    4a52:	82e3      	strh	r3, [r4, #22]
    4a54:	e7b8      	b.n	49c8 <sx1509b_config+0x9e>
			rc = -ENOTSUP;
    4a56:	f06f 0585 	mvn.w	r5, #133	; 0x85
    4a5a:	e7e8      	b.n	4a2e <sx1509b_config+0x104>
		return -EWOULDBLOCK;
    4a5c:	f06f 050a 	mvn.w	r5, #10
    4a60:	e7e8      	b.n	4a34 <sx1509b_config+0x10a>
		return -ENOTSUP;
    4a62:	f06f 0585 	mvn.w	r5, #133	; 0x85
    4a66:	e7e5      	b.n	4a34 <sx1509b_config+0x10a>

00004a68 <port_get>:
{
    4a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a6c:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
    4a6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    4a72:	6907      	ldr	r7, [r0, #16]
{
    4a74:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
    4a76:	f000 faa0 	bl	4fba <k_is_in_isr>
    4a7a:	4604      	mov	r4, r0
    4a7c:	bb78      	cbnz	r0, 4ade <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
    4a7e:	f107 0620 	add.w	r6, r7, #32
    4a82:	4630      	mov	r0, r6
    4a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a8c:	f7ff fe41 	bl	4712 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
    4a90:	f10d 0205 	add.w	r2, sp, #5
    4a94:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    4a96:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    4a98:	6878      	ldr	r0, [r7, #4]
    4a9a:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
    4a9c:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
    4a9e:	f10d 0206 	add.w	r2, sp, #6
    4aa2:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    4aa6:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    4aa8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
    4aac:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    4aae:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    4ab0:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
    4ab4:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    4ab6:	f88d 101c 	strb.w	r1, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    4aba:	6881      	ldr	r1, [r0, #8]
    4abc:	688c      	ldr	r4, [r1, #8]
    4abe:	a902      	add	r1, sp, #8
    4ac0:	47a0      	blx	r4
	if (rc != 0) {
    4ac2:	4604      	mov	r4, r0
    4ac4:	b920      	cbnz	r0, 4ad0 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
    4ac6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4aca:	ba5b      	rev16	r3, r3
    4acc:	b29b      	uxth	r3, r3
    4ace:	602b      	str	r3, [r5, #0]
    4ad0:	4630      	mov	r0, r6
    4ad2:	f7fe fd05 	bl	34e0 <z_impl_k_sem_give>
}
    4ad6:	4620      	mov	r0, r4
    4ad8:	b008      	add	sp, #32
    4ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
    4ade:	f06f 040a 	mvn.w	r4, #10
    4ae2:	e7f8      	b.n	4ad6 <port_get+0x6e>

00004ae4 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    4ae4:	07ca      	lsls	r2, r1, #31
	return dev->config;
    4ae6:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    4ae8:	d405      	bmi.n	4af6 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    4aea:	f3c1 0242 	ubfx	r2, r1, #1, #3
    4aee:	2a01      	cmp	r2, #1
    4af0:	d004      	beq.n	4afc <i2c_nrfx_twim_configure+0x18>
    4af2:	2a02      	cmp	r2, #2
    4af4:	d00b      	beq.n	4b0e <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
    4af6:	f06f 0015 	mvn.w	r0, #21
}
    4afa:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    4afc:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    4afe:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    4b02:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    4b06:	6903      	ldr	r3, [r0, #16]
	return 0;
    4b08:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    4b0a:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    4b0c:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    4b14:	e7f5      	b.n	4b02 <i2c_nrfx_twim_configure+0x1e>

00004b16 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    4b16:	4603      	mov	r3, r0
    4b18:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    4b1a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    4b1c:	7919      	ldrb	r1, [r3, #4]
    4b1e:	2301      	movs	r3, #1
    4b20:	fa03 f101 	lsl.w	r1, r3, r1
    4b24:	6903      	ldr	r3, [r0, #16]
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    4b2a:	bf18      	it	ne
    4b2c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    4b30:	b112      	cbz	r2, 4b38 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    4b32:	6883      	ldr	r3, [r0, #8]
    4b34:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    4b36:	4718      	bx	r3
    4b38:	6883      	ldr	r3, [r0, #8]
    4b3a:	691b      	ldr	r3, [r3, #16]
    4b3c:	e7fb      	b.n	4b36 <gpio_pin_set_dt+0x20>

00004b3e <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
    4b3e:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
    4b40:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    4b42:	6845      	ldr	r5, [r0, #4]
{
    4b44:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    4b46:	a903      	add	r1, sp, #12
    4b48:	4620      	mov	r0, r4
    4b4a:	f7ff fbe9 	bl	4320 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    4b4e:	7d29      	ldrb	r1, [r5, #20]
    4b50:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
    4b54:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    4b56:	d114      	bne.n	4b82 <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
    4b58:	2801      	cmp	r0, #1
    4b5a:	d10c      	bne.n	4b76 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    4b5c:	f105 000c 	add.w	r0, r5, #12
    4b60:	f7ff ffd9 	bl	4b16 <gpio_pin_set_dt>
    4b64:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    4b66:	2200      	movs	r2, #0
    4b68:	9903      	ldr	r1, [sp, #12]
    4b6a:	9200      	str	r2, [sp, #0]
    4b6c:	4620      	mov	r0, r4
    4b6e:	f7ff fbe2 	bl	4336 <onoff_sync_finalize>
}
    4b72:	b005      	add	sp, #20
    4b74:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    4b76:	2800      	cmp	r0, #0
    4b78:	bf14      	ite	ne
    4b7a:	4603      	movne	r3, r0
    4b7c:	f06f 0315 	mvneq.w	r3, #21
    4b80:	e7f1      	b.n	4b66 <disable_sync+0x28>
		rc = 0;
    4b82:	2300      	movs	r3, #0
    4b84:	e7ef      	b.n	4b66 <disable_sync+0x28>

00004b86 <enable_sync>:
{
    4b86:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    4b88:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    4b8a:	6846      	ldr	r6, [r0, #4]
{
    4b8c:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    4b8e:	4628      	mov	r0, r5
    4b90:	a903      	add	r1, sp, #12
    4b92:	f7ff fbc5 	bl	4320 <onoff_sync_lock>
	if ((rc == 0)
    4b96:	4603      	mov	r3, r0
    4b98:	b940      	cbnz	r0, 4bac <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    4b9a:	7d32      	ldrb	r2, [r6, #20]
    4b9c:	07d2      	lsls	r2, r2, #31
    4b9e:	d405      	bmi.n	4bac <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    4ba0:	2101      	movs	r1, #1
    4ba2:	f106 000c 	add.w	r0, r6, #12
    4ba6:	f7ff ffb6 	bl	4b16 <gpio_pin_set_dt>
    4baa:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    4bac:	2201      	movs	r2, #1
    4bae:	9200      	str	r2, [sp, #0]
    4bb0:	9903      	ldr	r1, [sp, #12]
    4bb2:	4622      	mov	r2, r4
    4bb4:	4628      	mov	r0, r5
    4bb6:	f7ff fbbe 	bl	4336 <onoff_sync_finalize>
}
    4bba:	b004      	add	sp, #16
    4bbc:	bd70      	pop	{r4, r5, r6, pc}

00004bbe <disable_onoff>:
	return onoff_release(&data->mgr);
    4bbe:	6900      	ldr	r0, [r0, #16]
    4bc0:	3004      	adds	r0, #4
    4bc2:	f7ff bb88 	b.w	42d6 <onoff_release>

00004bc6 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
    4bc6:	6900      	ldr	r0, [r0, #16]
    4bc8:	3004      	adds	r0, #4
    4bca:	f7ff bb3b 	b.w	4244 <onoff_request>

00004bce <common_init.isra.0>:
static int common_init(const struct device *dev)
    4bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bd0:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
    4bd2:	68c0      	ldr	r0, [r0, #12]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    4bd4:	f000 f9c0 	bl	4f58 <z_device_ready>
    4bd8:	b340      	cbz	r0, 4c2c <common_init.isra.0+0x5e>
	if (on) {
    4bda:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    4bdc:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
    4bde:	68e8      	ldr	r0, [r5, #12]
    4be0:	7c29      	ldrb	r1, [r5, #16]
    4be2:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    4be6:	bf16      	itet	ne
    4be8:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
    4bec:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
    4bf0:	686c      	ldrne	r4, [r5, #4]
    4bf2:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
    4bf4:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    4bf6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4bfa:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4bfc:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4bfe:	bf48      	it	mi
    4c00:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c04:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4c06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c0a:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4c0c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c0e:	bf4c      	ite	mi
    4c10:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4c12:	43b5      	bicpl	r5, r6
    4c14:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    4c16:	f8dc 3000 	ldr.w	r3, [ip]
    4c1a:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    4c1c:	4605      	mov	r5, r0
    4c1e:	b918      	cbnz	r0, 4c28 <common_init.isra.0+0x5a>
    4c20:	b114      	cbz	r4, 4c28 <common_init.isra.0+0x5a>
	z_impl_k_busy_wait(usec_to_wait);
    4c22:	4620      	mov	r0, r4
    4c24:	f000 fb1b 	bl	525e <z_impl_k_busy_wait>
}
    4c28:	4628      	mov	r0, r5
    4c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    4c2c:	f06f 0512 	mvn.w	r5, #18
    4c30:	e7fa      	b.n	4c28 <common_init.isra.0+0x5a>

00004c32 <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    4c32:	6840      	ldr	r0, [r0, #4]
    4c34:	f7ff bfcb 	b.w	4bce <common_init.isra.0>

00004c38 <onoff_worker>:
{
    4c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
    4c3c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
    4c40:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
    4c44:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
    4c46:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
    4c48:	2901      	cmp	r1, #1
{
    4c4a:	4604      	mov	r4, r0
	struct driver_data_onoff *data
    4c4c:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
    4c50:	d10f      	bne.n	4c72 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    4c52:	f105 000c 	add.w	r0, r5, #12
    4c56:	f7ff ff5e 	bl	4b16 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
    4c5a:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
    4c5c:	4603      	mov	r3, r0
	data->notify = NULL;
    4c5e:	2100      	movs	r1, #0
    4c60:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
    4c62:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
    4c66:	4630      	mov	r0, r6
    4c68:	4639      	mov	r1, r7
}
    4c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    4c6e:	f7fd b959 	b.w	1f24 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
    4c72:	2902      	cmp	r1, #2
    4c74:	d107      	bne.n	4c86 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    4c76:	2100      	movs	r1, #0
    4c78:	f105 000c 	add.w	r0, r5, #12
    4c7c:	f7ff ff4b 	bl	4b16 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
    4c80:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
    4c82:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
    4c84:	e7eb      	b.n	4c5e <onoff_worker+0x26>
	int rc = 0;
    4c86:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
    4c88:	461a      	mov	r2, r3
    4c8a:	e7e8      	b.n	4c5e <onoff_worker+0x26>

00004c8c <stop>:
{
    4c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    4c90:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    4c94:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    4c96:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
    4c98:	6858      	ldr	r0, [r3, #4]
{
    4c9a:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    4c9c:	7d01      	ldrb	r1, [r0, #20]
    4c9e:	f011 0101 	ands.w	r1, r1, #1
    4ca2:	d113      	bne.n	4ccc <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
    4ca4:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
    4ca6:	300c      	adds	r0, #12
    4ca8:	f7ff ff35 	bl	4b16 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    4cac:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
    4cb0:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    4cb2:	d10d      	bne.n	4cd0 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
    4cb4:	2302      	movs	r3, #2
    4cb6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    4cba:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    4cbc:	f104 001c 	add.w	r0, r4, #28
    4cc0:	2200      	movs	r2, #0
}
    4cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    4cc6:	2300      	movs	r3, #0
    4cc8:	f7fe bd9a 	b.w	3800 <k_work_schedule>
	int rc = 0;
    4ccc:	2300      	movs	r3, #0
		delay_us = 0;
    4cce:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
    4cd0:	463a      	mov	r2, r7
    4cd2:	4629      	mov	r1, r5
    4cd4:	4630      	mov	r0, r6
}
    4cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    4cda:	f7fd b923 	b.w	1f24 <finalize_transition>

00004cde <start>:
{
    4cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    4ce2:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    4ce6:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    4ce8:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
    4cea:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    4cec:	7d03      	ldrb	r3, [r0, #20]
    4cee:	07db      	lsls	r3, r3, #31
{
    4cf0:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    4cf2:	d414      	bmi.n	4d1e <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
    4cf4:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
    4cf6:	2101      	movs	r1, #1
    4cf8:	300c      	adds	r0, #12
    4cfa:	f7ff ff0c 	bl	4b16 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    4cfe:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
    4d02:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    4d04:	d10d      	bne.n	4d22 <start+0x44>
		data->task = WORK_TASK_ENABLE;
    4d06:	2301      	movs	r3, #1
    4d08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    4d0c:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    4d0e:	f104 001c 	add.w	r0, r4, #28
    4d12:	2200      	movs	r2, #0
}
    4d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    4d18:	2300      	movs	r3, #0
    4d1a:	f7fe bd71 	b.w	3800 <k_work_schedule>
	int rc = 0;
    4d1e:	2300      	movs	r3, #0
		delay_us = 0;
    4d20:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
    4d22:	4632      	mov	r2, r6
    4d24:	4629      	mov	r1, r5
    4d26:	4638      	mov	r0, r7
}
    4d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    4d2c:	f7fd b8fa 	b.w	1f24 <finalize_transition>

00004d30 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    4d30:	6902      	ldr	r2, [r0, #16]
{
    4d32:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4d34:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4d38:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4d3c:	2000      	movs	r0, #0
    4d3e:	4770      	bx	lr

00004d40 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4d40:	6843      	ldr	r3, [r0, #4]
    4d42:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4d44:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4d48:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4d4c:	4770      	bx	lr

00004d4e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4d4e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    4d50:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4d52:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d54:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4d58:	b148      	cbz	r0, 4d6e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    4d5a:	7c52      	ldrb	r2, [r2, #17]
    4d5c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d5e:	2000      	movs	r0, #0
    4d60:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4d64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d68:	2201      	movs	r2, #1
    4d6a:	601a      	str	r2, [r3, #0]
	return 0;
    4d6c:	4770      	bx	lr
		return -1;
    4d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4d72:	4770      	bx	lr

00004d74 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4d74:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4d76:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d78:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4d7c:	b940      	cbnz	r0, 4d90 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4d7e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4d80:	071b      	lsls	r3, r3, #28
    4d82:	d406      	bmi.n	4d92 <is_tx_ready.isra.0+0x1e>
    4d84:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4d88:	3800      	subs	r0, #0
    4d8a:	bf18      	it	ne
    4d8c:	2001      	movne	r0, #1
    4d8e:	4770      	bx	lr
    4d90:	2001      	movs	r0, #1
}
    4d92:	4770      	bx	lr

00004d94 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    4d94:	6843      	ldr	r3, [r0, #4]
    4d96:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    4d98:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4d9c:	05d1      	lsls	r1, r2, #23
    4d9e:	d518      	bpl.n	4dd2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4da0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    4da4:	b1aa      	cbz	r2, 4dd2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4da6:	f04f 0120 	mov.w	r1, #32
    4daa:	f3ef 8211 	mrs	r2, BASEPRI
    4dae:	f381 8812 	msr	BASEPRI_MAX, r1
    4db2:	f3bf 8f6f 	isb	sy
    4db6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4dba:	b131      	cbz	r1, 4dca <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dbc:	2100      	movs	r1, #0
    4dbe:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4dc2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4dc6:	2101      	movs	r1, #1
    4dc8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    4dca:	f382 8811 	msr	BASEPRI, r2
    4dce:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4dd2:	6842      	ldr	r2, [r0, #4]
    4dd4:	6852      	ldr	r2, [r2, #4]
    4dd6:	06d2      	lsls	r2, r2, #27
    4dd8:	d515      	bpl.n	4e06 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    4dda:	f04f 0120 	mov.w	r1, #32
    4dde:	f3ef 8211 	mrs	r2, BASEPRI
    4de2:	f381 8812 	msr	BASEPRI_MAX, r1
    4de6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dea:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4dee:	b111      	cbz	r1, 4df6 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4df0:	2100      	movs	r1, #0
    4df2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4dfa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4dfe:	f382 8811 	msr	BASEPRI, r2
    4e02:	f3bf 8f6f 	isb	sy
}
    4e06:	4770      	bx	lr

00004e08 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4e08:	4770      	bx	lr

00004e0a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4e0a:	4770      	bx	lr

00004e0c <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4e0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4e10:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    4e14:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4e16:	bf04      	itt	eq
    4e18:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    4e1c:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    4e20:	1f83      	subs	r3, r0, #6
    4e22:	4258      	negs	r0, r3
    4e24:	4158      	adcs	r0, r3
    4e26:	4770      	bx	lr

00004e28 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4e28:	4700      	bx	r0

00004e2a <nrfx_busy_wait>:
    4e2a:	f000 ba18 	b.w	525e <z_impl_k_busy_wait>

00004e2e <nrfx_clock_enable>:
{
    4e2e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4e30:	2000      	movs	r0, #0
    4e32:	f7fc f84b 	bl	ecc <arch_irq_is_enabled>
    4e36:	b918      	cbnz	r0, 4e40 <nrfx_clock_enable+0x12>
}
    4e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4e3c:	f7fc b836 	b.w	eac <arch_irq_enable>
    4e40:	bd08      	pop	{r3, pc}

00004e42 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    4e42:	7b0a      	ldrb	r2, [r1, #12]
{
    4e44:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    4e46:	2a03      	cmp	r2, #3
    4e48:	d829      	bhi.n	4e9e <xfer_completeness_check+0x5c>
    4e4a:	e8df f002 	tbb	[pc, r2]
    4e4e:	2521      	.short	0x2521
    4e50:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    4e52:	688a      	ldr	r2, [r1, #8]
    4e54:	0350      	lsls	r0, r2, #13
    4e56:	d504      	bpl.n	4e62 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    4e58:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    4e5c:	6908      	ldr	r0, [r1, #16]
    4e5e:	4290      	cmp	r0, r2
    4e60:	d107      	bne.n	4e72 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    4e62:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    4e64:	0352      	lsls	r2, r2, #13
    4e66:	d41a      	bmi.n	4e9e <xfer_completeness_check+0x5c>
    4e68:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    4e6c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    4e6e:	4291      	cmp	r1, r2
    4e70:	d015      	beq.n	4e9e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4e72:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4e74:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4e76:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4e7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    4e7e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    4e80:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    4e84:	6908      	ldr	r0, [r1, #16]
    4e86:	4290      	cmp	r0, r2
    4e88:	d1f3      	bne.n	4e72 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    4e8a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    4e8e:	e7ed      	b.n	4e6c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    4e90:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    4e94:	6909      	ldr	r1, [r1, #16]
    4e96:	e7ea      	b.n	4e6e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    4e98:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    4e9c:	e7fa      	b.n	4e94 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    4e9e:	2001      	movs	r0, #1
}
    4ea0:	4770      	bx	lr

00004ea2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    4ea2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    4ea4:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    4ea6:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    4ea8:	bf9c      	itt	ls
    4eaa:	6880      	ldrls	r0, [r0, #8]
    4eac:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    4eae:	3b01      	subs	r3, #1
    4eb0:	1a98      	subs	r0, r3, r2
}
    4eb2:	4770      	bx	lr

00004eb4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    4eb8:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4ebc:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    4ebe:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ec2:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    4ec4:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ec6:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4ec8:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    4eca:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    4ecc:	d906      	bls.n	4edc <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4ece:	f7ff faf6 	bl	44be <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4ed2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    4ed6:	60ec      	str	r4, [r5, #12]
}
    4ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4edc:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    4ede:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4ee2:	f7ff faec 	bl	44be <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4ee6:	6868      	ldr	r0, [r5, #4]
    4ee8:	4622      	mov	r2, r4
    4eea:	eb07 0108 	add.w	r1, r7, r8
    4eee:	e7ee      	b.n	4ece <_WriteNoCheck+0x1a>

00004ef0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    4ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    4ef4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    4ef6:	4606      	mov	r6, r0
    4ef8:	4689      	mov	r9, r1
    4efa:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    4efc:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    4f00:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4f02:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4f04:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    4f06:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4f08:	bf28      	it	cs
    4f0a:	18e4      	addcs	r4, r4, r3
    4f0c:	3c01      	subs	r4, #1
    4f0e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    4f10:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4f12:	42bc      	cmp	r4, r7
    4f14:	bf28      	it	cs
    4f16:	463c      	movcs	r4, r7
    4f18:	4294      	cmp	r4, r2
    4f1a:	bf28      	it	cs
    4f1c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    4f1e:	4649      	mov	r1, r9
    4f20:	4622      	mov	r2, r4
    4f22:	4428      	add	r0, r5
    4f24:	f7ff facb 	bl	44be <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    4f28:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    4f2a:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
    4f2c:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    4f2e:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    4f30:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
    4f32:	42ab      	cmp	r3, r5
    4f34:	bf08      	it	eq
    4f36:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4f38:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    4f3c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    4f3e:	2f00      	cmp	r7, #0
    4f40:	d1de      	bne.n	4f00 <_WriteBlocking+0x10>
}
    4f42:	4640      	mov	r0, r8
    4f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004f48 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4f48:	f7fe b888 	b.w	305c <_DoInit>

00004f4c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    4f4c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    4f4e:	f7ff fffb 	bl	4f48 <SEGGER_RTT_Init>

	return 0;
}
    4f52:	2000      	movs	r0, #0
    4f54:	bd08      	pop	{r3, pc}

00004f56 <z_device_state_init>:
}
    4f56:	4770      	bx	lr

00004f58 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4f58:	b138      	cbz	r0, 4f6a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4f5a:	68c3      	ldr	r3, [r0, #12]
    4f5c:	8818      	ldrh	r0, [r3, #0]
    4f5e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    4f62:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    4f66:	4258      	negs	r0, r3
    4f68:	4158      	adcs	r0, r3
}
    4f6a:	4770      	bx	lr

00004f6c <arch_system_halt>:
	__asm__ volatile(
    4f6c:	f04f 0220 	mov.w	r2, #32
    4f70:	f3ef 8311 	mrs	r3, BASEPRI
    4f74:	f382 8812 	msr	BASEPRI_MAX, r2
    4f78:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    4f7c:	e7fe      	b.n	4f7c <arch_system_halt+0x10>

00004f7e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    4f7e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    4f80:	f7ff fff4 	bl	4f6c <arch_system_halt>

00004f84 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f86:	4605      	mov	r5, r0
    4f88:	460e      	mov	r6, r1
    4f8a:	f04f 0320 	mov.w	r3, #32
    4f8e:	f3ef 8711 	mrs	r7, BASEPRI
    4f92:	f383 8812 	msr	BASEPRI_MAX, r3
    4f96:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4f9a:	f7fe fedf 	bl	3d5c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4f9e:	4631      	mov	r1, r6
    4fa0:	4604      	mov	r4, r0
    4fa2:	4628      	mov	r0, r5
    4fa4:	f7ff ffeb 	bl	4f7e <k_sys_fatal_error_handler>
	__asm__ volatile(
    4fa8:	f387 8811 	msr	BASEPRI, r7
    4fac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4fb0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4fb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4fb6:	f7fc b9bf 	b.w	1338 <z_impl_k_thread_abort>

00004fba <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4fba:	f3ef 8005 	mrs	r0, IPSR
}
    4fbe:	3800      	subs	r0, #0
    4fc0:	bf18      	it	ne
    4fc2:	2001      	movne	r0, #1
    4fc4:	4770      	bx	lr

00004fc6 <z_impl_k_thread_name_set>:
}
    4fc6:	f06f 0057 	mvn.w	r0, #87	; 0x57
    4fca:	4770      	bx	lr

00004fcc <z_impl_k_thread_start>:
	z_sched_start(thread);
    4fcc:	f7fe bd5a 	b.w	3a84 <z_sched_start>

00004fd0 <z_pm_save_idle_exit>:
{
    4fd0:	b508      	push	{r3, lr}
	pm_system_resume();
    4fd2:	f7fb fee3 	bl	d9c <pm_system_resume>
}
    4fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4fda:	f7ff bf16 	b.w	4e0a <sys_clock_idle_exit>

00004fde <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    4fde:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    4fe0:	2301      	movs	r3, #1
    4fe2:	408b      	lsls	r3, r1
    4fe4:	ea22 0303 	bic.w	r3, r2, r3
    4fe8:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    4fea:	fa22 f001 	lsr.w	r0, r2, r1
}
    4fee:	f000 0001 	and.w	r0, r0, #1
    4ff2:	4770      	bx	lr

00004ff4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    4ff4:	b120      	cbz	r0, 5000 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    4ff6:	2200      	movs	r2, #0
    4ff8:	4611      	mov	r1, r2
    4ffa:	3088      	adds	r0, #136	; 0x88
    4ffc:	f000 b8ce 	b.w	519c <z_sched_wake>
}
    5000:	4770      	bx	lr

00005002 <work_timeout>:
{
    5002:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5004:	4604      	mov	r4, r0
	__asm__ volatile(
    5006:	f04f 0320 	mov.w	r3, #32
    500a:	f3ef 8511 	mrs	r5, BASEPRI
    500e:	f383 8812 	msr	BASEPRI_MAX, r3
    5012:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    5016:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    5018:	f1a0 0610 	sub.w	r6, r0, #16
    501c:	2103      	movs	r1, #3
    501e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    5020:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    5022:	f7ff ffdc 	bl	4fde <flag_test_and_clear>
    5026:	b128      	cbz	r0, 5034 <work_timeout+0x32>
		queue = dw->queue;
    5028:	69a3      	ldr	r3, [r4, #24]
    502a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    502c:	a901      	add	r1, sp, #4
    502e:	4630      	mov	r0, r6
    5030:	f7fe fb34 	bl	369c <submit_to_queue_locked>
	__asm__ volatile(
    5034:	f385 8811 	msr	BASEPRI, r5
    5038:	f3bf 8f6f 	isb	sy
}
    503c:	b002      	add	sp, #8
    503e:	bd70      	pop	{r4, r5, r6, pc}

00005040 <k_work_init_delayable>:
{
    5040:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    5042:	2230      	movs	r2, #48	; 0x30
{
    5044:	4604      	mov	r4, r0
    5046:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    5048:	2100      	movs	r1, #0
    504a:	f7ff fa43 	bl	44d4 <memset>
    504e:	f44f 7380 	mov.w	r3, #256	; 0x100
    5052:	6065      	str	r5, [r4, #4]
    5054:	60e3      	str	r3, [r4, #12]
}
    5056:	bd38      	pop	{r3, r4, r5, pc}

00005058 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    5058:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    505c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    505e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5060:	2300      	movs	r3, #0
	node->prev = NULL;
    5062:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    5066:	4770      	bx	lr

00005068 <unpend_thread_no_timeout>:
{
    5068:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    506a:	f7ff fff5 	bl	5058 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    506e:	7b43      	ldrb	r3, [r0, #13]
    5070:	f023 0302 	bic.w	r3, r3, #2
    5074:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    5076:	2300      	movs	r3, #0
    5078:	6083      	str	r3, [r0, #8]
}
    507a:	bd08      	pop	{r3, pc}

0000507c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    507c:	4603      	mov	r3, r0
    507e:	b920      	cbnz	r0, 508a <z_reschedule_irqlock+0xe>
    5080:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    5084:	b90a      	cbnz	r2, 508a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5086:	f7fb bf6f 	b.w	f68 <arch_swap>
    508a:	f383 8811 	msr	BASEPRI, r3
    508e:	f3bf 8f6f 	isb	sy
}
    5092:	4770      	bx	lr

00005094 <z_reschedule_unlocked>:
	__asm__ volatile(
    5094:	f04f 0320 	mov.w	r3, #32
    5098:	f3ef 8011 	mrs	r0, BASEPRI
    509c:	f383 8812 	msr	BASEPRI_MAX, r3
    50a0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    50a4:	f7ff bfea 	b.w	507c <z_reschedule_irqlock>

000050a8 <z_priq_dumb_best>:
{
    50a8:	4603      	mov	r3, r0
	return list->head == list;
    50aa:	6800      	ldr	r0, [r0, #0]
}
    50ac:	4283      	cmp	r3, r0
    50ae:	bf08      	it	eq
    50b0:	2000      	moveq	r0, #0
    50b2:	4770      	bx	lr

000050b4 <z_ready_thread>:
{
    50b4:	b510      	push	{r4, lr}
    50b6:	f04f 0320 	mov.w	r3, #32
    50ba:	f3ef 8411 	mrs	r4, BASEPRI
    50be:	f383 8812 	msr	BASEPRI_MAX, r3
    50c2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    50c6:	f7fe fca7 	bl	3a18 <ready_thread>
	__asm__ volatile(
    50ca:	f384 8811 	msr	BASEPRI, r4
    50ce:	f3bf 8f6f 	isb	sy
}
    50d2:	bd10      	pop	{r4, pc}

000050d4 <z_thread_timeout>:
{
    50d4:	b510      	push	{r4, lr}
    50d6:	4601      	mov	r1, r0
	__asm__ volatile(
    50d8:	f04f 0320 	mov.w	r3, #32
    50dc:	f3ef 8411 	mrs	r4, BASEPRI
    50e0:	f383 8812 	msr	BASEPRI_MAX, r3
    50e4:	f3bf 8f6f 	isb	sy
		if (!killed) {
    50e8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    50ec:	f013 0f28 	tst.w	r3, #40	; 0x28
    50f0:	d10d      	bne.n	510e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    50f2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    50f6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    50f8:	b10b      	cbz	r3, 50fe <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    50fa:	f7ff ffb5 	bl	5068 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    50fe:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    5102:	f023 0314 	bic.w	r3, r3, #20
    5106:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    510a:	f7fe fc85 	bl	3a18 <ready_thread>
	__asm__ volatile(
    510e:	f384 8811 	msr	BASEPRI, r4
    5112:	f3bf 8f6f 	isb	sy
}
    5116:	bd10      	pop	{r4, pc}

00005118 <add_to_waitq_locked>:
{
    5118:	b538      	push	{r3, r4, r5, lr}
    511a:	4604      	mov	r4, r0
    511c:	460d      	mov	r5, r1
	unready_thread(thread);
    511e:	f7fe fccf 	bl	3ac0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5122:	7b63      	ldrb	r3, [r4, #13]
    5124:	f043 0302 	orr.w	r3, r3, #2
    5128:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    512a:	b195      	cbz	r5, 5152 <add_to_waitq_locked+0x3a>
    512c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    512e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5130:	429d      	cmp	r5, r3
    5132:	d015      	beq.n	5160 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5134:	b1a3      	cbz	r3, 5160 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    5136:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    513a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    513e:	4291      	cmp	r1, r2
    5140:	d008      	beq.n	5154 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    5142:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5144:	2a00      	cmp	r2, #0
    5146:	dd05      	ble.n	5154 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    5148:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    514a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    514e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5150:	605c      	str	r4, [r3, #4]
}
    5152:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5154:	686a      	ldr	r2, [r5, #4]
    5156:	4293      	cmp	r3, r2
    5158:	d002      	beq.n	5160 <add_to_waitq_locked+0x48>
    515a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    515c:	2b00      	cmp	r3, #0
    515e:	d1ec      	bne.n	513a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    5160:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5162:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5166:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5168:	606c      	str	r4, [r5, #4]
}
    516a:	e7f2      	b.n	5152 <add_to_waitq_locked+0x3a>

0000516c <z_unpend_first_thread>:
{
    516c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    516e:	f04f 0320 	mov.w	r3, #32
    5172:	f3ef 8511 	mrs	r5, BASEPRI
    5176:	f383 8812 	msr	BASEPRI_MAX, r3
    517a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    517e:	f7ff ff93 	bl	50a8 <z_priq_dumb_best>
		if (thread != NULL) {
    5182:	4604      	mov	r4, r0
    5184:	b120      	cbz	r0, 5190 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    5186:	f7ff ff6f 	bl	5068 <unpend_thread_no_timeout>
    518a:	3018      	adds	r0, #24
    518c:	f000 f823 	bl	51d6 <z_abort_timeout>
	__asm__ volatile(
    5190:	f385 8811 	msr	BASEPRI, r5
    5194:	f3bf 8f6f 	isb	sy
}
    5198:	4620      	mov	r0, r4
    519a:	bd38      	pop	{r3, r4, r5, pc}

0000519c <z_sched_wake>:
{
    519c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    519e:	f04f 0320 	mov.w	r3, #32
    51a2:	f3ef 8511 	mrs	r5, BASEPRI
    51a6:	f383 8812 	msr	BASEPRI_MAX, r3
    51aa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    51ae:	f7ff ff7b 	bl	50a8 <z_priq_dumb_best>
		if (thread != NULL) {
    51b2:	4604      	mov	r4, r0
    51b4:	b150      	cbz	r0, 51cc <z_sched_wake+0x30>
    51b6:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    51b8:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    51ba:	f7ff ff55 	bl	5068 <unpend_thread_no_timeout>
    51be:	3018      	adds	r0, #24
    51c0:	f000 f809 	bl	51d6 <z_abort_timeout>
			ready_thread(thread);
    51c4:	4620      	mov	r0, r4
    51c6:	f7fe fc27 	bl	3a18 <ready_thread>
			ret = true;
    51ca:	2001      	movs	r0, #1
	__asm__ volatile(
    51cc:	f385 8811 	msr	BASEPRI, r5
    51d0:	f3bf 8f6f 	isb	sy
}
    51d4:	bd38      	pop	{r3, r4, r5, pc}

000051d6 <z_abort_timeout>:
{
    51d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    51d8:	f04f 0220 	mov.w	r2, #32
    51dc:	f3ef 8411 	mrs	r4, BASEPRI
    51e0:	f382 8812 	msr	BASEPRI_MAX, r2
    51e4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    51e8:	6803      	ldr	r3, [r0, #0]
    51ea:	b13b      	cbz	r3, 51fc <z_abort_timeout+0x26>
			remove_timeout(to);
    51ec:	f7fe fe6c 	bl	3ec8 <remove_timeout>
			ret = 0;
    51f0:	2000      	movs	r0, #0
	__asm__ volatile(
    51f2:	f384 8811 	msr	BASEPRI, r4
    51f6:	f3bf 8f6f 	isb	sy
}
    51fa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    51fc:	f06f 0015 	mvn.w	r0, #21
    5200:	e7f7      	b.n	51f2 <z_abort_timeout+0x1c>

00005202 <z_get_next_timeout_expiry>:
{
    5202:	b510      	push	{r4, lr}
	__asm__ volatile(
    5204:	f04f 0320 	mov.w	r3, #32
    5208:	f3ef 8411 	mrs	r4, BASEPRI
    520c:	f383 8812 	msr	BASEPRI_MAX, r3
    5210:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    5214:	f7fe fe30 	bl	3e78 <next_timeout>
	__asm__ volatile(
    5218:	f384 8811 	msr	BASEPRI, r4
    521c:	f3bf 8f6f 	isb	sy
}
    5220:	bd10      	pop	{r4, pc}

00005222 <z_set_timeout_expiry>:
{
    5222:	b570      	push	{r4, r5, r6, lr}
    5224:	4604      	mov	r4, r0
    5226:	460d      	mov	r5, r1
	__asm__ volatile(
    5228:	f04f 0320 	mov.w	r3, #32
    522c:	f3ef 8611 	mrs	r6, BASEPRI
    5230:	f383 8812 	msr	BASEPRI_MAX, r3
    5234:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    5238:	f7fe fe1e 	bl	3e78 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    523c:	2801      	cmp	r0, #1
    523e:	dd05      	ble.n	524c <z_set_timeout_expiry+0x2a>
    5240:	42a0      	cmp	r0, r4
    5242:	db03      	blt.n	524c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    5244:	4629      	mov	r1, r5
    5246:	4620      	mov	r0, r4
    5248:	f7fd f90c 	bl	2464 <sys_clock_set_timeout>
	__asm__ volatile(
    524c:	f386 8811 	msr	BASEPRI, r6
    5250:	f3bf 8f6f 	isb	sy
}
    5254:	bd70      	pop	{r4, r5, r6, pc}

00005256 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    5256:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5258:	f7fe ff26 	bl	40a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    525c:	bd08      	pop	{r3, pc}

0000525e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    525e:	b108      	cbz	r0, 5264 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5260:	f7fc b95c 	b.w	151c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5264:	4770      	bx	lr
	...

00005268 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5268:	f7fd b958 	b.w	251c <SystemInit>
